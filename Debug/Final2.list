
Final2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003fc0  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002e0  08004158  08004158  00014158  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004438  08004438  00020128  2**0
                  CONTENTS
  4 .ARM          00000008  08004438  08004438  00014438  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004440  08004440  00020128  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004440  08004440  00014440  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004444  08004444  00014444  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000128  20000000  08004448  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000062c  20000128  08004570  00020128  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000754  08004570  00020754  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020128  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000bb97  00000000  00000000  00020158  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001b00  00000000  00000000  0002bcef  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000c10  00000000  00000000  0002d7f0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000b38  00000000  00000000  0002e400  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000160dd  00000000  00000000  0002ef38  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00009097  00000000  00000000  00045015  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0008cc9b  00000000  00000000  0004e0ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000dad47  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000342c  00000000  00000000  000dadc4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000128 	.word	0x20000128
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08004140 	.word	0x08004140

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	2000012c 	.word	0x2000012c
 80001d4:	08004140 	.word	0x08004140

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b972 	b.w	80004d4 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9e08      	ldr	r6, [sp, #32]
 800020e:	4604      	mov	r4, r0
 8000210:	4688      	mov	r8, r1
 8000212:	2b00      	cmp	r3, #0
 8000214:	d14b      	bne.n	80002ae <__udivmoddi4+0xa6>
 8000216:	428a      	cmp	r2, r1
 8000218:	4615      	mov	r5, r2
 800021a:	d967      	bls.n	80002ec <__udivmoddi4+0xe4>
 800021c:	fab2 f282 	clz	r2, r2
 8000220:	b14a      	cbz	r2, 8000236 <__udivmoddi4+0x2e>
 8000222:	f1c2 0720 	rsb	r7, r2, #32
 8000226:	fa01 f302 	lsl.w	r3, r1, r2
 800022a:	fa20 f707 	lsr.w	r7, r0, r7
 800022e:	4095      	lsls	r5, r2
 8000230:	ea47 0803 	orr.w	r8, r7, r3
 8000234:	4094      	lsls	r4, r2
 8000236:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800023a:	0c23      	lsrs	r3, r4, #16
 800023c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000240:	fa1f fc85 	uxth.w	ip, r5
 8000244:	fb0e 8817 	mls	r8, lr, r7, r8
 8000248:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800024c:	fb07 f10c 	mul.w	r1, r7, ip
 8000250:	4299      	cmp	r1, r3
 8000252:	d909      	bls.n	8000268 <__udivmoddi4+0x60>
 8000254:	18eb      	adds	r3, r5, r3
 8000256:	f107 30ff 	add.w	r0, r7, #4294967295
 800025a:	f080 811b 	bcs.w	8000494 <__udivmoddi4+0x28c>
 800025e:	4299      	cmp	r1, r3
 8000260:	f240 8118 	bls.w	8000494 <__udivmoddi4+0x28c>
 8000264:	3f02      	subs	r7, #2
 8000266:	442b      	add	r3, r5
 8000268:	1a5b      	subs	r3, r3, r1
 800026a:	b2a4      	uxth	r4, r4
 800026c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000270:	fb0e 3310 	mls	r3, lr, r0, r3
 8000274:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000278:	fb00 fc0c 	mul.w	ip, r0, ip
 800027c:	45a4      	cmp	ip, r4
 800027e:	d909      	bls.n	8000294 <__udivmoddi4+0x8c>
 8000280:	192c      	adds	r4, r5, r4
 8000282:	f100 33ff 	add.w	r3, r0, #4294967295
 8000286:	f080 8107 	bcs.w	8000498 <__udivmoddi4+0x290>
 800028a:	45a4      	cmp	ip, r4
 800028c:	f240 8104 	bls.w	8000498 <__udivmoddi4+0x290>
 8000290:	3802      	subs	r0, #2
 8000292:	442c      	add	r4, r5
 8000294:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000298:	eba4 040c 	sub.w	r4, r4, ip
 800029c:	2700      	movs	r7, #0
 800029e:	b11e      	cbz	r6, 80002a8 <__udivmoddi4+0xa0>
 80002a0:	40d4      	lsrs	r4, r2
 80002a2:	2300      	movs	r3, #0
 80002a4:	e9c6 4300 	strd	r4, r3, [r6]
 80002a8:	4639      	mov	r1, r7
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d909      	bls.n	80002c6 <__udivmoddi4+0xbe>
 80002b2:	2e00      	cmp	r6, #0
 80002b4:	f000 80eb 	beq.w	800048e <__udivmoddi4+0x286>
 80002b8:	2700      	movs	r7, #0
 80002ba:	e9c6 0100 	strd	r0, r1, [r6]
 80002be:	4638      	mov	r0, r7
 80002c0:	4639      	mov	r1, r7
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	fab3 f783 	clz	r7, r3
 80002ca:	2f00      	cmp	r7, #0
 80002cc:	d147      	bne.n	800035e <__udivmoddi4+0x156>
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d302      	bcc.n	80002d8 <__udivmoddi4+0xd0>
 80002d2:	4282      	cmp	r2, r0
 80002d4:	f200 80fa 	bhi.w	80004cc <__udivmoddi4+0x2c4>
 80002d8:	1a84      	subs	r4, r0, r2
 80002da:	eb61 0303 	sbc.w	r3, r1, r3
 80002de:	2001      	movs	r0, #1
 80002e0:	4698      	mov	r8, r3
 80002e2:	2e00      	cmp	r6, #0
 80002e4:	d0e0      	beq.n	80002a8 <__udivmoddi4+0xa0>
 80002e6:	e9c6 4800 	strd	r4, r8, [r6]
 80002ea:	e7dd      	b.n	80002a8 <__udivmoddi4+0xa0>
 80002ec:	b902      	cbnz	r2, 80002f0 <__udivmoddi4+0xe8>
 80002ee:	deff      	udf	#255	; 0xff
 80002f0:	fab2 f282 	clz	r2, r2
 80002f4:	2a00      	cmp	r2, #0
 80002f6:	f040 808f 	bne.w	8000418 <__udivmoddi4+0x210>
 80002fa:	1b49      	subs	r1, r1, r5
 80002fc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000300:	fa1f f885 	uxth.w	r8, r5
 8000304:	2701      	movs	r7, #1
 8000306:	fbb1 fcfe 	udiv	ip, r1, lr
 800030a:	0c23      	lsrs	r3, r4, #16
 800030c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000310:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000314:	fb08 f10c 	mul.w	r1, r8, ip
 8000318:	4299      	cmp	r1, r3
 800031a:	d907      	bls.n	800032c <__udivmoddi4+0x124>
 800031c:	18eb      	adds	r3, r5, r3
 800031e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x122>
 8000324:	4299      	cmp	r1, r3
 8000326:	f200 80cd 	bhi.w	80004c4 <__udivmoddi4+0x2bc>
 800032a:	4684      	mov	ip, r0
 800032c:	1a59      	subs	r1, r3, r1
 800032e:	b2a3      	uxth	r3, r4
 8000330:	fbb1 f0fe 	udiv	r0, r1, lr
 8000334:	fb0e 1410 	mls	r4, lr, r0, r1
 8000338:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800033c:	fb08 f800 	mul.w	r8, r8, r0
 8000340:	45a0      	cmp	r8, r4
 8000342:	d907      	bls.n	8000354 <__udivmoddi4+0x14c>
 8000344:	192c      	adds	r4, r5, r4
 8000346:	f100 33ff 	add.w	r3, r0, #4294967295
 800034a:	d202      	bcs.n	8000352 <__udivmoddi4+0x14a>
 800034c:	45a0      	cmp	r8, r4
 800034e:	f200 80b6 	bhi.w	80004be <__udivmoddi4+0x2b6>
 8000352:	4618      	mov	r0, r3
 8000354:	eba4 0408 	sub.w	r4, r4, r8
 8000358:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800035c:	e79f      	b.n	800029e <__udivmoddi4+0x96>
 800035e:	f1c7 0c20 	rsb	ip, r7, #32
 8000362:	40bb      	lsls	r3, r7
 8000364:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000368:	ea4e 0e03 	orr.w	lr, lr, r3
 800036c:	fa01 f407 	lsl.w	r4, r1, r7
 8000370:	fa20 f50c 	lsr.w	r5, r0, ip
 8000374:	fa21 f30c 	lsr.w	r3, r1, ip
 8000378:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800037c:	4325      	orrs	r5, r4
 800037e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000382:	0c2c      	lsrs	r4, r5, #16
 8000384:	fb08 3319 	mls	r3, r8, r9, r3
 8000388:	fa1f fa8e 	uxth.w	sl, lr
 800038c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000390:	fb09 f40a 	mul.w	r4, r9, sl
 8000394:	429c      	cmp	r4, r3
 8000396:	fa02 f207 	lsl.w	r2, r2, r7
 800039a:	fa00 f107 	lsl.w	r1, r0, r7
 800039e:	d90b      	bls.n	80003b8 <__udivmoddi4+0x1b0>
 80003a0:	eb1e 0303 	adds.w	r3, lr, r3
 80003a4:	f109 30ff 	add.w	r0, r9, #4294967295
 80003a8:	f080 8087 	bcs.w	80004ba <__udivmoddi4+0x2b2>
 80003ac:	429c      	cmp	r4, r3
 80003ae:	f240 8084 	bls.w	80004ba <__udivmoddi4+0x2b2>
 80003b2:	f1a9 0902 	sub.w	r9, r9, #2
 80003b6:	4473      	add	r3, lr
 80003b8:	1b1b      	subs	r3, r3, r4
 80003ba:	b2ad      	uxth	r5, r5
 80003bc:	fbb3 f0f8 	udiv	r0, r3, r8
 80003c0:	fb08 3310 	mls	r3, r8, r0, r3
 80003c4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003c8:	fb00 fa0a 	mul.w	sl, r0, sl
 80003cc:	45a2      	cmp	sl, r4
 80003ce:	d908      	bls.n	80003e2 <__udivmoddi4+0x1da>
 80003d0:	eb1e 0404 	adds.w	r4, lr, r4
 80003d4:	f100 33ff 	add.w	r3, r0, #4294967295
 80003d8:	d26b      	bcs.n	80004b2 <__udivmoddi4+0x2aa>
 80003da:	45a2      	cmp	sl, r4
 80003dc:	d969      	bls.n	80004b2 <__udivmoddi4+0x2aa>
 80003de:	3802      	subs	r0, #2
 80003e0:	4474      	add	r4, lr
 80003e2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003e6:	fba0 8902 	umull	r8, r9, r0, r2
 80003ea:	eba4 040a 	sub.w	r4, r4, sl
 80003ee:	454c      	cmp	r4, r9
 80003f0:	46c2      	mov	sl, r8
 80003f2:	464b      	mov	r3, r9
 80003f4:	d354      	bcc.n	80004a0 <__udivmoddi4+0x298>
 80003f6:	d051      	beq.n	800049c <__udivmoddi4+0x294>
 80003f8:	2e00      	cmp	r6, #0
 80003fa:	d069      	beq.n	80004d0 <__udivmoddi4+0x2c8>
 80003fc:	ebb1 050a 	subs.w	r5, r1, sl
 8000400:	eb64 0403 	sbc.w	r4, r4, r3
 8000404:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000408:	40fd      	lsrs	r5, r7
 800040a:	40fc      	lsrs	r4, r7
 800040c:	ea4c 0505 	orr.w	r5, ip, r5
 8000410:	e9c6 5400 	strd	r5, r4, [r6]
 8000414:	2700      	movs	r7, #0
 8000416:	e747      	b.n	80002a8 <__udivmoddi4+0xa0>
 8000418:	f1c2 0320 	rsb	r3, r2, #32
 800041c:	fa20 f703 	lsr.w	r7, r0, r3
 8000420:	4095      	lsls	r5, r2
 8000422:	fa01 f002 	lsl.w	r0, r1, r2
 8000426:	fa21 f303 	lsr.w	r3, r1, r3
 800042a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800042e:	4338      	orrs	r0, r7
 8000430:	0c01      	lsrs	r1, r0, #16
 8000432:	fbb3 f7fe 	udiv	r7, r3, lr
 8000436:	fa1f f885 	uxth.w	r8, r5
 800043a:	fb0e 3317 	mls	r3, lr, r7, r3
 800043e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000442:	fb07 f308 	mul.w	r3, r7, r8
 8000446:	428b      	cmp	r3, r1
 8000448:	fa04 f402 	lsl.w	r4, r4, r2
 800044c:	d907      	bls.n	800045e <__udivmoddi4+0x256>
 800044e:	1869      	adds	r1, r5, r1
 8000450:	f107 3cff 	add.w	ip, r7, #4294967295
 8000454:	d22f      	bcs.n	80004b6 <__udivmoddi4+0x2ae>
 8000456:	428b      	cmp	r3, r1
 8000458:	d92d      	bls.n	80004b6 <__udivmoddi4+0x2ae>
 800045a:	3f02      	subs	r7, #2
 800045c:	4429      	add	r1, r5
 800045e:	1acb      	subs	r3, r1, r3
 8000460:	b281      	uxth	r1, r0
 8000462:	fbb3 f0fe 	udiv	r0, r3, lr
 8000466:	fb0e 3310 	mls	r3, lr, r0, r3
 800046a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046e:	fb00 f308 	mul.w	r3, r0, r8
 8000472:	428b      	cmp	r3, r1
 8000474:	d907      	bls.n	8000486 <__udivmoddi4+0x27e>
 8000476:	1869      	adds	r1, r5, r1
 8000478:	f100 3cff 	add.w	ip, r0, #4294967295
 800047c:	d217      	bcs.n	80004ae <__udivmoddi4+0x2a6>
 800047e:	428b      	cmp	r3, r1
 8000480:	d915      	bls.n	80004ae <__udivmoddi4+0x2a6>
 8000482:	3802      	subs	r0, #2
 8000484:	4429      	add	r1, r5
 8000486:	1ac9      	subs	r1, r1, r3
 8000488:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800048c:	e73b      	b.n	8000306 <__udivmoddi4+0xfe>
 800048e:	4637      	mov	r7, r6
 8000490:	4630      	mov	r0, r6
 8000492:	e709      	b.n	80002a8 <__udivmoddi4+0xa0>
 8000494:	4607      	mov	r7, r0
 8000496:	e6e7      	b.n	8000268 <__udivmoddi4+0x60>
 8000498:	4618      	mov	r0, r3
 800049a:	e6fb      	b.n	8000294 <__udivmoddi4+0x8c>
 800049c:	4541      	cmp	r1, r8
 800049e:	d2ab      	bcs.n	80003f8 <__udivmoddi4+0x1f0>
 80004a0:	ebb8 0a02 	subs.w	sl, r8, r2
 80004a4:	eb69 020e 	sbc.w	r2, r9, lr
 80004a8:	3801      	subs	r0, #1
 80004aa:	4613      	mov	r3, r2
 80004ac:	e7a4      	b.n	80003f8 <__udivmoddi4+0x1f0>
 80004ae:	4660      	mov	r0, ip
 80004b0:	e7e9      	b.n	8000486 <__udivmoddi4+0x27e>
 80004b2:	4618      	mov	r0, r3
 80004b4:	e795      	b.n	80003e2 <__udivmoddi4+0x1da>
 80004b6:	4667      	mov	r7, ip
 80004b8:	e7d1      	b.n	800045e <__udivmoddi4+0x256>
 80004ba:	4681      	mov	r9, r0
 80004bc:	e77c      	b.n	80003b8 <__udivmoddi4+0x1b0>
 80004be:	3802      	subs	r0, #2
 80004c0:	442c      	add	r4, r5
 80004c2:	e747      	b.n	8000354 <__udivmoddi4+0x14c>
 80004c4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004c8:	442b      	add	r3, r5
 80004ca:	e72f      	b.n	800032c <__udivmoddi4+0x124>
 80004cc:	4638      	mov	r0, r7
 80004ce:	e708      	b.n	80002e2 <__udivmoddi4+0xda>
 80004d0:	4637      	mov	r7, r6
 80004d2:	e6e9      	b.n	80002a8 <__udivmoddi4+0xa0>

080004d4 <__aeabi_idiv0>:
 80004d4:	4770      	bx	lr
 80004d6:	bf00      	nop

080004d8 <recursor>:
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_TIM4_Init(void);
static void MX_USART2_UART_Init(void);
/* USER CODE BEGIN PFP */
void recursor() {
 80004d8:	b580      	push	{r7, lr}
 80004da:	af00      	add	r7, sp, #0
	HAL_UART_Transmit(&huart2, resetCursor, sizeof(resetCursor), 50);
 80004dc:	2332      	movs	r3, #50	; 0x32
 80004de:	2207      	movs	r2, #7
 80004e0:	4902      	ldr	r1, [pc, #8]	; (80004ec <recursor+0x14>)
 80004e2:	4803      	ldr	r0, [pc, #12]	; (80004f0 <recursor+0x18>)
 80004e4:	f002 fe5b 	bl	800319e <HAL_UART_Transmit>
}
 80004e8:	bf00      	nop
 80004ea:	bd80      	pop	{r7, pc}
 80004ec:	20000010 	.word	0x20000010
 80004f0:	2000069c 	.word	0x2000069c

080004f4 <clearScreen>:

void clearScreen() {
 80004f4:	b580      	push	{r7, lr}
 80004f6:	af00      	add	r7, sp, #0
	HAL_UART_Transmit(&huart2, resetCursor, sizeof(resetCursor), 50);
 80004f8:	2332      	movs	r3, #50	; 0x32
 80004fa:	2207      	movs	r2, #7
 80004fc:	490b      	ldr	r1, [pc, #44]	; (800052c <clearScreen+0x38>)
 80004fe:	480c      	ldr	r0, [pc, #48]	; (8000530 <clearScreen+0x3c>)
 8000500:	f002 fe4d 	bl	800319e <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, clr0, sizeof(clr0), 50);
 8000504:	2332      	movs	r3, #50	; 0x32
 8000506:	2205      	movs	r2, #5
 8000508:	490a      	ldr	r1, [pc, #40]	; (8000534 <clearScreen+0x40>)
 800050a:	4809      	ldr	r0, [pc, #36]	; (8000530 <clearScreen+0x3c>)
 800050c:	f002 fe47 	bl	800319e <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, clr3, sizeof(clr3), 50);
 8000510:	2332      	movs	r3, #50	; 0x32
 8000512:	2205      	movs	r2, #5
 8000514:	4908      	ldr	r1, [pc, #32]	; (8000538 <clearScreen+0x44>)
 8000516:	4806      	ldr	r0, [pc, #24]	; (8000530 <clearScreen+0x3c>)
 8000518:	f002 fe41 	bl	800319e <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, resetCursor, sizeof(resetCursor), 50);
 800051c:	2332      	movs	r3, #50	; 0x32
 800051e:	2207      	movs	r2, #7
 8000520:	4902      	ldr	r1, [pc, #8]	; (800052c <clearScreen+0x38>)
 8000522:	4803      	ldr	r0, [pc, #12]	; (8000530 <clearScreen+0x3c>)
 8000524:	f002 fe3b 	bl	800319e <HAL_UART_Transmit>
}
 8000528:	bf00      	nop
 800052a:	bd80      	pop	{r7, pc}
 800052c:	20000010 	.word	0x20000010
 8000530:	2000069c 	.word	0x2000069c
 8000534:	20000008 	.word	0x20000008
 8000538:	20000000 	.word	0x20000000

0800053c <display>:

void display() { //Display field + current Tetromino
 800053c:	b590      	push	{r4, r7, lr}
 800053e:	b0e1      	sub	sp, #388	; 0x184
 8000540:	af00      	add	r7, sp, #0
	uint8_t temp[fieldHeight][fieldWidth];
	memcpy(temp, field, fieldWidth*fieldHeight);
 8000542:	463b      	mov	r3, r7
 8000544:	4a4d      	ldr	r2, [pc, #308]	; (800067c <display+0x140>)
 8000546:	4618      	mov	r0, r3
 8000548:	4611      	mov	r1, r2
 800054a:	f240 1377 	movw	r3, #375	; 0x177
 800054e:	461a      	mov	r2, r3
 8000550:	f003 fd3a 	bl	8003fc8 <memcpy>
	for(int i=0; i<4; i++) {
 8000554:	2300      	movs	r3, #0
 8000556:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 800055a:	e037      	b.n	80005cc <display+0x90>
		for (int j=0; j<4; j++) {
 800055c:	2300      	movs	r3, #0
 800055e:	f8c7 3178 	str.w	r3, [r7, #376]	; 0x178
 8000562:	e02a      	b.n	80005ba <display+0x7e>
			if (curTeTro[i*4 + j] != '.') {
 8000564:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
 8000568:	009a      	lsls	r2, r3, #2
 800056a:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
 800056e:	4413      	add	r3, r2
 8000570:	4a43      	ldr	r2, [pc, #268]	; (8000680 <display+0x144>)
 8000572:	5cd3      	ldrb	r3, [r2, r3]
 8000574:	2b2e      	cmp	r3, #46	; 0x2e
 8000576:	d01b      	beq.n	80005b0 <display+0x74>
				temp[curY+i][curX+j] = curTeTro[i*4 + j];
 8000578:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
 800057c:	009a      	lsls	r2, r3, #2
 800057e:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
 8000582:	4413      	add	r3, r2
 8000584:	4a3f      	ldr	r2, [pc, #252]	; (8000684 <display+0x148>)
 8000586:	8812      	ldrh	r2, [r2, #0]
 8000588:	4611      	mov	r1, r2
 800058a:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 800058e:	440a      	add	r2, r1
 8000590:	493d      	ldr	r1, [pc, #244]	; (8000688 <display+0x14c>)
 8000592:	8809      	ldrh	r1, [r1, #0]
 8000594:	4608      	mov	r0, r1
 8000596:	f8d7 1178 	ldr.w	r1, [r7, #376]	; 0x178
 800059a:	4401      	add	r1, r0
 800059c:	4838      	ldr	r0, [pc, #224]	; (8000680 <display+0x144>)
 800059e:	5cc4      	ldrb	r4, [r0, r3]
 80005a0:	4638      	mov	r0, r7
 80005a2:	4613      	mov	r3, r2
 80005a4:	011b      	lsls	r3, r3, #4
 80005a6:	1a9b      	subs	r3, r3, r2
 80005a8:	4403      	add	r3, r0
 80005aa:	440b      	add	r3, r1
 80005ac:	4622      	mov	r2, r4
 80005ae:	701a      	strb	r2, [r3, #0]
		for (int j=0; j<4; j++) {
 80005b0:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
 80005b4:	3301      	adds	r3, #1
 80005b6:	f8c7 3178 	str.w	r3, [r7, #376]	; 0x178
 80005ba:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
 80005be:	2b03      	cmp	r3, #3
 80005c0:	ddd0      	ble.n	8000564 <display+0x28>
	for(int i=0; i<4; i++) {
 80005c2:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
 80005c6:	3301      	adds	r3, #1
 80005c8:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 80005cc:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
 80005d0:	2b03      	cmp	r3, #3
 80005d2:	ddc3      	ble.n	800055c <display+0x20>
			}
		}
	}
	HAL_UART_Transmit(&huart2, newLine, sizeof(newLine), 50);
 80005d4:	2332      	movs	r3, #50	; 0x32
 80005d6:	2203      	movs	r2, #3
 80005d8:	492c      	ldr	r1, [pc, #176]	; (800068c <display+0x150>)
 80005da:	482d      	ldr	r0, [pc, #180]	; (8000690 <display+0x154>)
 80005dc:	f002 fddf 	bl	800319e <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, infoText, sizeof(infoText), 50);
 80005e0:	2332      	movs	r3, #50	; 0x32
 80005e2:	2226      	movs	r2, #38	; 0x26
 80005e4:	492b      	ldr	r1, [pc, #172]	; (8000694 <display+0x158>)
 80005e6:	482a      	ldr	r0, [pc, #168]	; (8000690 <display+0x154>)
 80005e8:	f002 fdd9 	bl	800319e <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, scoreText, sizeof(scoreText), 50);
 80005ec:	2332      	movs	r3, #50	; 0x32
 80005ee:	2206      	movs	r2, #6
 80005f0:	4929      	ldr	r1, [pc, #164]	; (8000698 <display+0x15c>)
 80005f2:	4827      	ldr	r0, [pc, #156]	; (8000690 <display+0x154>)
 80005f4:	f002 fdd3 	bl	800319e <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, newLine, sizeof(newLine), 50);
 80005f8:	2332      	movs	r3, #50	; 0x32
 80005fa:	2203      	movs	r2, #3
 80005fc:	4923      	ldr	r1, [pc, #140]	; (800068c <display+0x150>)
 80005fe:	4824      	ldr	r0, [pc, #144]	; (8000690 <display+0x154>)
 8000600:	f002 fdcd 	bl	800319e <HAL_UART_Transmit>
	for(uint8_t i=0; i<fieldHeight; i++) {
 8000604:	2300      	movs	r3, #0
 8000606:	f887 3177 	strb.w	r3, [r7, #375]	; 0x177
 800060a:	e02d      	b.n	8000668 <display+0x12c>
		HAL_UART_Transmit(&huart2, leftSpace, sizeof(leftSpace), 50);
 800060c:	2332      	movs	r3, #50	; 0x32
 800060e:	2205      	movs	r2, #5
 8000610:	4922      	ldr	r1, [pc, #136]	; (800069c <display+0x160>)
 8000612:	481f      	ldr	r0, [pc, #124]	; (8000690 <display+0x154>)
 8000614:	f002 fdc3 	bl	800319e <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart2, temp[i], sizeof(temp[i]), 50);
 8000618:	f897 2177 	ldrb.w	r2, [r7, #375]	; 0x177
 800061c:	4639      	mov	r1, r7
 800061e:	4613      	mov	r3, r2
 8000620:	011b      	lsls	r3, r3, #4
 8000622:	1a9b      	subs	r3, r3, r2
 8000624:	4419      	add	r1, r3
 8000626:	2332      	movs	r3, #50	; 0x32
 8000628:	220f      	movs	r2, #15
 800062a:	4819      	ldr	r0, [pc, #100]	; (8000690 <display+0x154>)
 800062c:	f002 fdb7 	bl	800319e <HAL_UART_Transmit>
		if (i<guideTextLine) HAL_UART_Transmit(&huart2, guideText[i], sizeof(guideText[i]), 50);
 8000630:	f897 3177 	ldrb.w	r3, [r7, #375]	; 0x177
 8000634:	2b15      	cmp	r3, #21
 8000636:	d80c      	bhi.n	8000652 <display+0x116>
 8000638:	f897 2177 	ldrb.w	r2, [r7, #375]	; 0x177
 800063c:	4613      	mov	r3, r2
 800063e:	009b      	lsls	r3, r3, #2
 8000640:	4413      	add	r3, r2
 8000642:	00db      	lsls	r3, r3, #3
 8000644:	4a16      	ldr	r2, [pc, #88]	; (80006a0 <display+0x164>)
 8000646:	1899      	adds	r1, r3, r2
 8000648:	2332      	movs	r3, #50	; 0x32
 800064a:	2228      	movs	r2, #40	; 0x28
 800064c:	4810      	ldr	r0, [pc, #64]	; (8000690 <display+0x154>)
 800064e:	f002 fda6 	bl	800319e <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart2, newLine, sizeof(newLine), 50);
 8000652:	2332      	movs	r3, #50	; 0x32
 8000654:	2203      	movs	r2, #3
 8000656:	490d      	ldr	r1, [pc, #52]	; (800068c <display+0x150>)
 8000658:	480d      	ldr	r0, [pc, #52]	; (8000690 <display+0x154>)
 800065a:	f002 fda0 	bl	800319e <HAL_UART_Transmit>
	for(uint8_t i=0; i<fieldHeight; i++) {
 800065e:	f897 3177 	ldrb.w	r3, [r7, #375]	; 0x177
 8000662:	3301      	adds	r3, #1
 8000664:	f887 3177 	strb.w	r3, [r7, #375]	; 0x177
 8000668:	f897 3177 	ldrb.w	r3, [r7, #375]	; 0x177
 800066c:	2b18      	cmp	r3, #24
 800066e:	d9cd      	bls.n	800060c <display+0xd0>
	}
}
 8000670:	bf00      	nop
 8000672:	f507 77c2 	add.w	r7, r7, #388	; 0x184
 8000676:	46bd      	mov	sp, r7
 8000678:	bd90      	pop	{r4, r7, pc}
 800067a:	bf00      	nop
 800067c:	20000524 	.word	0x20000524
 8000680:	20000514 	.word	0x20000514
 8000684:	20000148 	.word	0x20000148
 8000688:	200000b2 	.word	0x200000b2
 800068c:	20000018 	.word	0x20000018
 8000690:	2000069c 	.word	0x2000069c
 8000694:	20000024 	.word	0x20000024
 8000698:	2000050c 	.word	0x2000050c
 800069c:	200000ac 	.word	0x200000ac
 80006a0:	2000019c 	.word	0x2000019c

080006a4 <rotate>:

void rotate(uint8_t tetro[16], uint8_t clockwise) {
 80006a4:	b4b0      	push	{r4, r5, r7}
 80006a6:	b08b      	sub	sp, #44	; 0x2c
 80006a8:	af00      	add	r7, sp, #0
 80006aa:	6078      	str	r0, [r7, #4]
 80006ac:	460b      	mov	r3, r1
 80006ae:	70fb      	strb	r3, [r7, #3]
	uint8_t newTetro[16];
	if (clockwise == 1) {
 80006b0:	78fb      	ldrb	r3, [r7, #3]
 80006b2:	2b01      	cmp	r3, #1
 80006b4:	d124      	bne.n	8000700 <rotate+0x5c>
		for (int i=0; i<4; i++) {
 80006b6:	2300      	movs	r3, #0
 80006b8:	627b      	str	r3, [r7, #36]	; 0x24
 80006ba:	e01d      	b.n	80006f8 <rotate+0x54>
			for (int j=0; j<4; j++) {
 80006bc:	2300      	movs	r3, #0
 80006be:	623b      	str	r3, [r7, #32]
 80006c0:	e014      	b.n	80006ec <rotate+0x48>
				//ni = j, nj = 3-i;
				newTetro[j*4 + 3 - i] = tetro[i*4 + j];
 80006c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006c4:	009a      	lsls	r2, r3, #2
 80006c6:	6a3b      	ldr	r3, [r7, #32]
 80006c8:	4413      	add	r3, r2
 80006ca:	461a      	mov	r2, r3
 80006cc:	687b      	ldr	r3, [r7, #4]
 80006ce:	441a      	add	r2, r3
 80006d0:	6a3b      	ldr	r3, [r7, #32]
 80006d2:	009b      	lsls	r3, r3, #2
 80006d4:	1cd9      	adds	r1, r3, #3
 80006d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006d8:	1acb      	subs	r3, r1, r3
 80006da:	7812      	ldrb	r2, [r2, #0]
 80006dc:	f107 0128 	add.w	r1, r7, #40	; 0x28
 80006e0:	440b      	add	r3, r1
 80006e2:	f803 2c20 	strb.w	r2, [r3, #-32]
			for (int j=0; j<4; j++) {
 80006e6:	6a3b      	ldr	r3, [r7, #32]
 80006e8:	3301      	adds	r3, #1
 80006ea:	623b      	str	r3, [r7, #32]
 80006ec:	6a3b      	ldr	r3, [r7, #32]
 80006ee:	2b03      	cmp	r3, #3
 80006f0:	dde7      	ble.n	80006c2 <rotate+0x1e>
		for (int i=0; i<4; i++) {
 80006f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006f4:	3301      	adds	r3, #1
 80006f6:	627b      	str	r3, [r7, #36]	; 0x24
 80006f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006fa:	2b03      	cmp	r3, #3
 80006fc:	ddde      	ble.n	80006bc <rotate+0x18>
 80006fe:	e024      	b.n	800074a <rotate+0xa6>
			}
		}
	} else {
		for (int i=0; i<4; i++) {
 8000700:	2300      	movs	r3, #0
 8000702:	61fb      	str	r3, [r7, #28]
 8000704:	e01e      	b.n	8000744 <rotate+0xa0>
			for (int j=0; j<4; j++) {
 8000706:	2300      	movs	r3, #0
 8000708:	61bb      	str	r3, [r7, #24]
 800070a:	e015      	b.n	8000738 <rotate+0x94>
				newTetro[i + 12 - 4*j] = tetro[i*4 + j];
 800070c:	69fb      	ldr	r3, [r7, #28]
 800070e:	009a      	lsls	r2, r3, #2
 8000710:	69bb      	ldr	r3, [r7, #24]
 8000712:	4413      	add	r3, r2
 8000714:	461a      	mov	r2, r3
 8000716:	687b      	ldr	r3, [r7, #4]
 8000718:	441a      	add	r2, r3
 800071a:	69fb      	ldr	r3, [r7, #28]
 800071c:	f103 010c 	add.w	r1, r3, #12
 8000720:	69bb      	ldr	r3, [r7, #24]
 8000722:	009b      	lsls	r3, r3, #2
 8000724:	1acb      	subs	r3, r1, r3
 8000726:	7812      	ldrb	r2, [r2, #0]
 8000728:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800072c:	440b      	add	r3, r1
 800072e:	f803 2c20 	strb.w	r2, [r3, #-32]
			for (int j=0; j<4; j++) {
 8000732:	69bb      	ldr	r3, [r7, #24]
 8000734:	3301      	adds	r3, #1
 8000736:	61bb      	str	r3, [r7, #24]
 8000738:	69bb      	ldr	r3, [r7, #24]
 800073a:	2b03      	cmp	r3, #3
 800073c:	dde6      	ble.n	800070c <rotate+0x68>
		for (int i=0; i<4; i++) {
 800073e:	69fb      	ldr	r3, [r7, #28]
 8000740:	3301      	adds	r3, #1
 8000742:	61fb      	str	r3, [r7, #28]
 8000744:	69fb      	ldr	r3, [r7, #28]
 8000746:	2b03      	cmp	r3, #3
 8000748:	dddd      	ble.n	8000706 <rotate+0x62>
			}
		}
	}
	memcpy(tetro, newTetro, 16);
 800074a:	687b      	ldr	r3, [r7, #4]
 800074c:	461d      	mov	r5, r3
 800074e:	f107 0408 	add.w	r4, r7, #8
 8000752:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000754:	6028      	str	r0, [r5, #0]
 8000756:	6069      	str	r1, [r5, #4]
 8000758:	60aa      	str	r2, [r5, #8]
 800075a:	60eb      	str	r3, [r5, #12]
}
 800075c:	bf00      	nop
 800075e:	372c      	adds	r7, #44	; 0x2c
 8000760:	46bd      	mov	sp, r7
 8000762:	bcb0      	pop	{r4, r5, r7}
 8000764:	4770      	bx	lr
	...

08000768 <canMove>:

uint8_t canMove(int direction) {
 8000768:	b480      	push	{r7}
 800076a:	b089      	sub	sp, #36	; 0x24
 800076c:	af00      	add	r7, sp, #0
 800076e:	6078      	str	r0, [r7, #4]
	//Check move down
	if (direction == 0) {
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	2b00      	cmp	r3, #0
 8000774:	d130      	bne.n	80007d8 <canMove+0x70>
		for (int i=0; i<4; i++) {
 8000776:	2300      	movs	r3, #0
 8000778:	61fb      	str	r3, [r7, #28]
 800077a:	e029      	b.n	80007d0 <canMove+0x68>
			for (int j=0; j<4; j++) {
 800077c:	2300      	movs	r3, #0
 800077e:	61bb      	str	r3, [r7, #24]
 8000780:	e020      	b.n	80007c4 <canMove+0x5c>
				if (curTeTro[i*4 + j] != '.' && field[curY+i+1][curX + j] != '.') return 0;
 8000782:	69fb      	ldr	r3, [r7, #28]
 8000784:	009a      	lsls	r2, r3, #2
 8000786:	69bb      	ldr	r3, [r7, #24]
 8000788:	4413      	add	r3, r2
 800078a:	4a4a      	ldr	r2, [pc, #296]	; (80008b4 <canMove+0x14c>)
 800078c:	5cd3      	ldrb	r3, [r2, r3]
 800078e:	2b2e      	cmp	r3, #46	; 0x2e
 8000790:	d015      	beq.n	80007be <canMove+0x56>
 8000792:	4b49      	ldr	r3, [pc, #292]	; (80008b8 <canMove+0x150>)
 8000794:	881b      	ldrh	r3, [r3, #0]
 8000796:	461a      	mov	r2, r3
 8000798:	69fb      	ldr	r3, [r7, #28]
 800079a:	4413      	add	r3, r2
 800079c:	1c5a      	adds	r2, r3, #1
 800079e:	4b47      	ldr	r3, [pc, #284]	; (80008bc <canMove+0x154>)
 80007a0:	881b      	ldrh	r3, [r3, #0]
 80007a2:	4619      	mov	r1, r3
 80007a4:	69bb      	ldr	r3, [r7, #24]
 80007a6:	4419      	add	r1, r3
 80007a8:	4845      	ldr	r0, [pc, #276]	; (80008c0 <canMove+0x158>)
 80007aa:	4613      	mov	r3, r2
 80007ac:	011b      	lsls	r3, r3, #4
 80007ae:	1a9b      	subs	r3, r3, r2
 80007b0:	4403      	add	r3, r0
 80007b2:	440b      	add	r3, r1
 80007b4:	781b      	ldrb	r3, [r3, #0]
 80007b6:	2b2e      	cmp	r3, #46	; 0x2e
 80007b8:	d001      	beq.n	80007be <canMove+0x56>
 80007ba:	2300      	movs	r3, #0
 80007bc:	e074      	b.n	80008a8 <canMove+0x140>
			for (int j=0; j<4; j++) {
 80007be:	69bb      	ldr	r3, [r7, #24]
 80007c0:	3301      	adds	r3, #1
 80007c2:	61bb      	str	r3, [r7, #24]
 80007c4:	69bb      	ldr	r3, [r7, #24]
 80007c6:	2b03      	cmp	r3, #3
 80007c8:	dddb      	ble.n	8000782 <canMove+0x1a>
		for (int i=0; i<4; i++) {
 80007ca:	69fb      	ldr	r3, [r7, #28]
 80007cc:	3301      	adds	r3, #1
 80007ce:	61fb      	str	r3, [r7, #28]
 80007d0:	69fb      	ldr	r3, [r7, #28]
 80007d2:	2b03      	cmp	r3, #3
 80007d4:	ddd2      	ble.n	800077c <canMove+0x14>
 80007d6:	e066      	b.n	80008a6 <canMove+0x13e>
			}
		}
	//Check move right
	} else if (direction == 1) {
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	2b01      	cmp	r3, #1
 80007dc:	d130      	bne.n	8000840 <canMove+0xd8>
		for (int i=0; i<4; i++) {
 80007de:	2300      	movs	r3, #0
 80007e0:	617b      	str	r3, [r7, #20]
 80007e2:	e029      	b.n	8000838 <canMove+0xd0>
			for (int j=0; j<4; j++) {
 80007e4:	2300      	movs	r3, #0
 80007e6:	613b      	str	r3, [r7, #16]
 80007e8:	e020      	b.n	800082c <canMove+0xc4>
				if (curTeTro[i*4 + j] != '.' && field[curY+i][curX + j + 1] != '.') return 0;
 80007ea:	697b      	ldr	r3, [r7, #20]
 80007ec:	009a      	lsls	r2, r3, #2
 80007ee:	693b      	ldr	r3, [r7, #16]
 80007f0:	4413      	add	r3, r2
 80007f2:	4a30      	ldr	r2, [pc, #192]	; (80008b4 <canMove+0x14c>)
 80007f4:	5cd3      	ldrb	r3, [r2, r3]
 80007f6:	2b2e      	cmp	r3, #46	; 0x2e
 80007f8:	d015      	beq.n	8000826 <canMove+0xbe>
 80007fa:	4b2f      	ldr	r3, [pc, #188]	; (80008b8 <canMove+0x150>)
 80007fc:	881b      	ldrh	r3, [r3, #0]
 80007fe:	461a      	mov	r2, r3
 8000800:	697b      	ldr	r3, [r7, #20]
 8000802:	441a      	add	r2, r3
 8000804:	4b2d      	ldr	r3, [pc, #180]	; (80008bc <canMove+0x154>)
 8000806:	881b      	ldrh	r3, [r3, #0]
 8000808:	4619      	mov	r1, r3
 800080a:	693b      	ldr	r3, [r7, #16]
 800080c:	440b      	add	r3, r1
 800080e:	1c59      	adds	r1, r3, #1
 8000810:	482b      	ldr	r0, [pc, #172]	; (80008c0 <canMove+0x158>)
 8000812:	4613      	mov	r3, r2
 8000814:	011b      	lsls	r3, r3, #4
 8000816:	1a9b      	subs	r3, r3, r2
 8000818:	4403      	add	r3, r0
 800081a:	440b      	add	r3, r1
 800081c:	781b      	ldrb	r3, [r3, #0]
 800081e:	2b2e      	cmp	r3, #46	; 0x2e
 8000820:	d001      	beq.n	8000826 <canMove+0xbe>
 8000822:	2300      	movs	r3, #0
 8000824:	e040      	b.n	80008a8 <canMove+0x140>
			for (int j=0; j<4; j++) {
 8000826:	693b      	ldr	r3, [r7, #16]
 8000828:	3301      	adds	r3, #1
 800082a:	613b      	str	r3, [r7, #16]
 800082c:	693b      	ldr	r3, [r7, #16]
 800082e:	2b03      	cmp	r3, #3
 8000830:	dddb      	ble.n	80007ea <canMove+0x82>
		for (int i=0; i<4; i++) {
 8000832:	697b      	ldr	r3, [r7, #20]
 8000834:	3301      	adds	r3, #1
 8000836:	617b      	str	r3, [r7, #20]
 8000838:	697b      	ldr	r3, [r7, #20]
 800083a:	2b03      	cmp	r3, #3
 800083c:	ddd2      	ble.n	80007e4 <canMove+0x7c>
 800083e:	e032      	b.n	80008a6 <canMove+0x13e>
			}
		}
	//Check move left
	} else if (direction == 2){
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	2b02      	cmp	r3, #2
 8000844:	d12f      	bne.n	80008a6 <canMove+0x13e>
		for (int i=0; i<4; i++) {
 8000846:	2300      	movs	r3, #0
 8000848:	60fb      	str	r3, [r7, #12]
 800084a:	e029      	b.n	80008a0 <canMove+0x138>
			for (int j=0; j<4; j++) {
 800084c:	2300      	movs	r3, #0
 800084e:	60bb      	str	r3, [r7, #8]
 8000850:	e020      	b.n	8000894 <canMove+0x12c>
				if (curTeTro[i*4 + j] != '.' && field[curY+i][curX + j - 1] != '.') return 0;
 8000852:	68fb      	ldr	r3, [r7, #12]
 8000854:	009a      	lsls	r2, r3, #2
 8000856:	68bb      	ldr	r3, [r7, #8]
 8000858:	4413      	add	r3, r2
 800085a:	4a16      	ldr	r2, [pc, #88]	; (80008b4 <canMove+0x14c>)
 800085c:	5cd3      	ldrb	r3, [r2, r3]
 800085e:	2b2e      	cmp	r3, #46	; 0x2e
 8000860:	d015      	beq.n	800088e <canMove+0x126>
 8000862:	4b15      	ldr	r3, [pc, #84]	; (80008b8 <canMove+0x150>)
 8000864:	881b      	ldrh	r3, [r3, #0]
 8000866:	461a      	mov	r2, r3
 8000868:	68fb      	ldr	r3, [r7, #12]
 800086a:	441a      	add	r2, r3
 800086c:	4b13      	ldr	r3, [pc, #76]	; (80008bc <canMove+0x154>)
 800086e:	881b      	ldrh	r3, [r3, #0]
 8000870:	4619      	mov	r1, r3
 8000872:	68bb      	ldr	r3, [r7, #8]
 8000874:	440b      	add	r3, r1
 8000876:	1e59      	subs	r1, r3, #1
 8000878:	4811      	ldr	r0, [pc, #68]	; (80008c0 <canMove+0x158>)
 800087a:	4613      	mov	r3, r2
 800087c:	011b      	lsls	r3, r3, #4
 800087e:	1a9b      	subs	r3, r3, r2
 8000880:	4403      	add	r3, r0
 8000882:	440b      	add	r3, r1
 8000884:	781b      	ldrb	r3, [r3, #0]
 8000886:	2b2e      	cmp	r3, #46	; 0x2e
 8000888:	d001      	beq.n	800088e <canMove+0x126>
 800088a:	2300      	movs	r3, #0
 800088c:	e00c      	b.n	80008a8 <canMove+0x140>
			for (int j=0; j<4; j++) {
 800088e:	68bb      	ldr	r3, [r7, #8]
 8000890:	3301      	adds	r3, #1
 8000892:	60bb      	str	r3, [r7, #8]
 8000894:	68bb      	ldr	r3, [r7, #8]
 8000896:	2b03      	cmp	r3, #3
 8000898:	dddb      	ble.n	8000852 <canMove+0xea>
		for (int i=0; i<4; i++) {
 800089a:	68fb      	ldr	r3, [r7, #12]
 800089c:	3301      	adds	r3, #1
 800089e:	60fb      	str	r3, [r7, #12]
 80008a0:	68fb      	ldr	r3, [r7, #12]
 80008a2:	2b03      	cmp	r3, #3
 80008a4:	ddd2      	ble.n	800084c <canMove+0xe4>
			}
		}
	}
	return 1;
 80008a6:	2301      	movs	r3, #1
}
 80008a8:	4618      	mov	r0, r3
 80008aa:	3724      	adds	r7, #36	; 0x24
 80008ac:	46bd      	mov	sp, r7
 80008ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b2:	4770      	bx	lr
 80008b4:	20000514 	.word	0x20000514
 80008b8:	20000148 	.word	0x20000148
 80008bc:	200000b2 	.word	0x200000b2
 80008c0:	20000524 	.word	0x20000524

080008c4 <canRotate>:

uint8_t canRotate(int direction) {
 80008c4:	b480      	push	{r7}
 80008c6:	b087      	sub	sp, #28
 80008c8:	af00      	add	r7, sp, #0
 80008ca:	6078      	str	r0, [r7, #4]
	//Check clockwise
	if (direction == 1) {
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	2b01      	cmp	r3, #1
 80008d0:	d12f      	bne.n	8000932 <canRotate+0x6e>
		for (int i=0; i<4; i++) {
 80008d2:	2300      	movs	r3, #0
 80008d4:	617b      	str	r3, [r7, #20]
 80008d6:	e028      	b.n	800092a <canRotate+0x66>
			for (int j=0; j<4; j++) {
 80008d8:	2300      	movs	r3, #0
 80008da:	613b      	str	r3, [r7, #16]
 80008dc:	e01f      	b.n	800091e <canRotate+0x5a>
				//ni = j, nj = 3-i;
				if(curTeTro[i*4 + j] != '.' && field[curY+j][curX+3-i] != '.') return 0;
 80008de:	697b      	ldr	r3, [r7, #20]
 80008e0:	009a      	lsls	r2, r3, #2
 80008e2:	693b      	ldr	r3, [r7, #16]
 80008e4:	4413      	add	r3, r2
 80008e6:	4a2e      	ldr	r2, [pc, #184]	; (80009a0 <canRotate+0xdc>)
 80008e8:	5cd3      	ldrb	r3, [r2, r3]
 80008ea:	2b2e      	cmp	r3, #46	; 0x2e
 80008ec:	d014      	beq.n	8000918 <canRotate+0x54>
 80008ee:	4b2d      	ldr	r3, [pc, #180]	; (80009a4 <canRotate+0xe0>)
 80008f0:	881b      	ldrh	r3, [r3, #0]
 80008f2:	461a      	mov	r2, r3
 80008f4:	693b      	ldr	r3, [r7, #16]
 80008f6:	441a      	add	r2, r3
 80008f8:	4b2b      	ldr	r3, [pc, #172]	; (80009a8 <canRotate+0xe4>)
 80008fa:	881b      	ldrh	r3, [r3, #0]
 80008fc:	1cd9      	adds	r1, r3, #3
 80008fe:	697b      	ldr	r3, [r7, #20]
 8000900:	1ac9      	subs	r1, r1, r3
 8000902:	482a      	ldr	r0, [pc, #168]	; (80009ac <canRotate+0xe8>)
 8000904:	4613      	mov	r3, r2
 8000906:	011b      	lsls	r3, r3, #4
 8000908:	1a9b      	subs	r3, r3, r2
 800090a:	4403      	add	r3, r0
 800090c:	440b      	add	r3, r1
 800090e:	781b      	ldrb	r3, [r3, #0]
 8000910:	2b2e      	cmp	r3, #46	; 0x2e
 8000912:	d001      	beq.n	8000918 <canRotate+0x54>
 8000914:	2300      	movs	r3, #0
 8000916:	e03d      	b.n	8000994 <canRotate+0xd0>
			for (int j=0; j<4; j++) {
 8000918:	693b      	ldr	r3, [r7, #16]
 800091a:	3301      	adds	r3, #1
 800091c:	613b      	str	r3, [r7, #16]
 800091e:	693b      	ldr	r3, [r7, #16]
 8000920:	2b03      	cmp	r3, #3
 8000922:	dddc      	ble.n	80008de <canRotate+0x1a>
		for (int i=0; i<4; i++) {
 8000924:	697b      	ldr	r3, [r7, #20]
 8000926:	3301      	adds	r3, #1
 8000928:	617b      	str	r3, [r7, #20]
 800092a:	697b      	ldr	r3, [r7, #20]
 800092c:	2b03      	cmp	r3, #3
 800092e:	ddd3      	ble.n	80008d8 <canRotate+0x14>
 8000930:	e02f      	b.n	8000992 <canRotate+0xce>
			}
		}
	//Check counter-clockwise
	} else {
		for (int i=0; i<4; i++) {
 8000932:	2300      	movs	r3, #0
 8000934:	60fb      	str	r3, [r7, #12]
 8000936:	e029      	b.n	800098c <canRotate+0xc8>
			for (int j=0; j<4; j++) {
 8000938:	2300      	movs	r3, #0
 800093a:	60bb      	str	r3, [r7, #8]
 800093c:	e020      	b.n	8000980 <canRotate+0xbc>
				//ni = 3-j, nj = i
				if(curTeTro[i*4 + j] != '.' && field[3-j+curY][curX+i] != '.') return 0;
 800093e:	68fb      	ldr	r3, [r7, #12]
 8000940:	009a      	lsls	r2, r3, #2
 8000942:	68bb      	ldr	r3, [r7, #8]
 8000944:	4413      	add	r3, r2
 8000946:	4a16      	ldr	r2, [pc, #88]	; (80009a0 <canRotate+0xdc>)
 8000948:	5cd3      	ldrb	r3, [r2, r3]
 800094a:	2b2e      	cmp	r3, #46	; 0x2e
 800094c:	d015      	beq.n	800097a <canRotate+0xb6>
 800094e:	68bb      	ldr	r3, [r7, #8]
 8000950:	f1c3 0303 	rsb	r3, r3, #3
 8000954:	4a13      	ldr	r2, [pc, #76]	; (80009a4 <canRotate+0xe0>)
 8000956:	8812      	ldrh	r2, [r2, #0]
 8000958:	441a      	add	r2, r3
 800095a:	4b13      	ldr	r3, [pc, #76]	; (80009a8 <canRotate+0xe4>)
 800095c:	881b      	ldrh	r3, [r3, #0]
 800095e:	4619      	mov	r1, r3
 8000960:	68fb      	ldr	r3, [r7, #12]
 8000962:	4419      	add	r1, r3
 8000964:	4811      	ldr	r0, [pc, #68]	; (80009ac <canRotate+0xe8>)
 8000966:	4613      	mov	r3, r2
 8000968:	011b      	lsls	r3, r3, #4
 800096a:	1a9b      	subs	r3, r3, r2
 800096c:	4403      	add	r3, r0
 800096e:	440b      	add	r3, r1
 8000970:	781b      	ldrb	r3, [r3, #0]
 8000972:	2b2e      	cmp	r3, #46	; 0x2e
 8000974:	d001      	beq.n	800097a <canRotate+0xb6>
 8000976:	2300      	movs	r3, #0
 8000978:	e00c      	b.n	8000994 <canRotate+0xd0>
			for (int j=0; j<4; j++) {
 800097a:	68bb      	ldr	r3, [r7, #8]
 800097c:	3301      	adds	r3, #1
 800097e:	60bb      	str	r3, [r7, #8]
 8000980:	68bb      	ldr	r3, [r7, #8]
 8000982:	2b03      	cmp	r3, #3
 8000984:	dddb      	ble.n	800093e <canRotate+0x7a>
		for (int i=0; i<4; i++) {
 8000986:	68fb      	ldr	r3, [r7, #12]
 8000988:	3301      	adds	r3, #1
 800098a:	60fb      	str	r3, [r7, #12]
 800098c:	68fb      	ldr	r3, [r7, #12]
 800098e:	2b03      	cmp	r3, #3
 8000990:	ddd2      	ble.n	8000938 <canRotate+0x74>
			}
		}
	}
	return 1;
 8000992:	2301      	movs	r3, #1
}
 8000994:	4618      	mov	r0, r3
 8000996:	371c      	adds	r7, #28
 8000998:	46bd      	mov	sp, r7
 800099a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800099e:	4770      	bx	lr
 80009a0:	20000514 	.word	0x20000514
 80009a4:	20000148 	.word	0x20000148
 80009a8:	200000b2 	.word	0x200000b2
 80009ac:	20000524 	.word	0x20000524

080009b0 <gotLine>:

uint8_t gotLine(uint8_t y) {
 80009b0:	b480      	push	{r7}
 80009b2:	b085      	sub	sp, #20
 80009b4:	af00      	add	r7, sp, #0
 80009b6:	4603      	mov	r3, r0
 80009b8:	71fb      	strb	r3, [r7, #7]
	uint8_t line = 1;
 80009ba:	2301      	movs	r3, #1
 80009bc:	73fb      	strb	r3, [r7, #15]
	for (int i=1; i<fieldWidth-1; i++) {
 80009be:	2301      	movs	r3, #1
 80009c0:	60bb      	str	r3, [r7, #8]
 80009c2:	e010      	b.n	80009e6 <gotLine+0x36>
		if (field[y][i] == '.') {
 80009c4:	79fa      	ldrb	r2, [r7, #7]
 80009c6:	490d      	ldr	r1, [pc, #52]	; (80009fc <gotLine+0x4c>)
 80009c8:	4613      	mov	r3, r2
 80009ca:	011b      	lsls	r3, r3, #4
 80009cc:	1a9b      	subs	r3, r3, r2
 80009ce:	18ca      	adds	r2, r1, r3
 80009d0:	68bb      	ldr	r3, [r7, #8]
 80009d2:	4413      	add	r3, r2
 80009d4:	781b      	ldrb	r3, [r3, #0]
 80009d6:	2b2e      	cmp	r3, #46	; 0x2e
 80009d8:	d102      	bne.n	80009e0 <gotLine+0x30>
			line = 0;
 80009da:	2300      	movs	r3, #0
 80009dc:	73fb      	strb	r3, [r7, #15]
			break;
 80009de:	e005      	b.n	80009ec <gotLine+0x3c>
	for (int i=1; i<fieldWidth-1; i++) {
 80009e0:	68bb      	ldr	r3, [r7, #8]
 80009e2:	3301      	adds	r3, #1
 80009e4:	60bb      	str	r3, [r7, #8]
 80009e6:	68bb      	ldr	r3, [r7, #8]
 80009e8:	2b0d      	cmp	r3, #13
 80009ea:	ddeb      	ble.n	80009c4 <gotLine+0x14>
		}
	}
	return line;
 80009ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80009ee:	4618      	mov	r0, r3
 80009f0:	3714      	adds	r7, #20
 80009f2:	46bd      	mov	sp, r7
 80009f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f8:	4770      	bx	lr
 80009fa:	bf00      	nop
 80009fc:	20000524 	.word	0x20000524

08000a00 <pushAboveDown>:

void pushAboveDown(uint8_t y) {
 8000a00:	b480      	push	{r7}
 8000a02:	b087      	sub	sp, #28
 8000a04:	af00      	add	r7, sp, #0
 8000a06:	4603      	mov	r3, r0
 8000a08:	71fb      	strb	r3, [r7, #7]
	for(int i=y; i>= 1; i--) {
 8000a0a:	79fb      	ldrb	r3, [r7, #7]
 8000a0c:	617b      	str	r3, [r7, #20]
 8000a0e:	e01f      	b.n	8000a50 <pushAboveDown+0x50>
		for (int j=1; j<fieldWidth-1; j++) {
 8000a10:	2301      	movs	r3, #1
 8000a12:	613b      	str	r3, [r7, #16]
 8000a14:	e016      	b.n	8000a44 <pushAboveDown+0x44>
			field[i][j] = field[i-1][j];
 8000a16:	697b      	ldr	r3, [r7, #20]
 8000a18:	1e5a      	subs	r2, r3, #1
 8000a1a:	4919      	ldr	r1, [pc, #100]	; (8000a80 <pushAboveDown+0x80>)
 8000a1c:	4613      	mov	r3, r2
 8000a1e:	011b      	lsls	r3, r3, #4
 8000a20:	1a9b      	subs	r3, r3, r2
 8000a22:	18ca      	adds	r2, r1, r3
 8000a24:	693b      	ldr	r3, [r7, #16]
 8000a26:	4413      	add	r3, r2
 8000a28:	7818      	ldrb	r0, [r3, #0]
 8000a2a:	4915      	ldr	r1, [pc, #84]	; (8000a80 <pushAboveDown+0x80>)
 8000a2c:	697a      	ldr	r2, [r7, #20]
 8000a2e:	4613      	mov	r3, r2
 8000a30:	011b      	lsls	r3, r3, #4
 8000a32:	1a9b      	subs	r3, r3, r2
 8000a34:	18ca      	adds	r2, r1, r3
 8000a36:	693b      	ldr	r3, [r7, #16]
 8000a38:	4413      	add	r3, r2
 8000a3a:	4602      	mov	r2, r0
 8000a3c:	701a      	strb	r2, [r3, #0]
		for (int j=1; j<fieldWidth-1; j++) {
 8000a3e:	693b      	ldr	r3, [r7, #16]
 8000a40:	3301      	adds	r3, #1
 8000a42:	613b      	str	r3, [r7, #16]
 8000a44:	693b      	ldr	r3, [r7, #16]
 8000a46:	2b0d      	cmp	r3, #13
 8000a48:	dde5      	ble.n	8000a16 <pushAboveDown+0x16>
	for(int i=y; i>= 1; i--) {
 8000a4a:	697b      	ldr	r3, [r7, #20]
 8000a4c:	3b01      	subs	r3, #1
 8000a4e:	617b      	str	r3, [r7, #20]
 8000a50:	697b      	ldr	r3, [r7, #20]
 8000a52:	2b00      	cmp	r3, #0
 8000a54:	dcdc      	bgt.n	8000a10 <pushAboveDown+0x10>
		}
	}
	for (int i=1; i<fieldWidth-1; i++) {
 8000a56:	2301      	movs	r3, #1
 8000a58:	60fb      	str	r3, [r7, #12]
 8000a5a:	e007      	b.n	8000a6c <pushAboveDown+0x6c>
		field[0][i] = '.';
 8000a5c:	4a08      	ldr	r2, [pc, #32]	; (8000a80 <pushAboveDown+0x80>)
 8000a5e:	68fb      	ldr	r3, [r7, #12]
 8000a60:	4413      	add	r3, r2
 8000a62:	222e      	movs	r2, #46	; 0x2e
 8000a64:	701a      	strb	r2, [r3, #0]
	for (int i=1; i<fieldWidth-1; i++) {
 8000a66:	68fb      	ldr	r3, [r7, #12]
 8000a68:	3301      	adds	r3, #1
 8000a6a:	60fb      	str	r3, [r7, #12]
 8000a6c:	68fb      	ldr	r3, [r7, #12]
 8000a6e:	2b0d      	cmp	r3, #13
 8000a70:	ddf4      	ble.n	8000a5c <pushAboveDown+0x5c>
	}
}
 8000a72:	bf00      	nop
 8000a74:	371c      	adds	r7, #28
 8000a76:	46bd      	mov	sp, r7
 8000a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a7c:	4770      	bx	lr
 8000a7e:	bf00      	nop
 8000a80:	20000524 	.word	0x20000524

08000a84 <isGameOver>:

uint8_t isGameOver() {
 8000a84:	b480      	push	{r7}
 8000a86:	b083      	sub	sp, #12
 8000a88:	af00      	add	r7, sp, #0
	for (int i=0; i<4; i++) {
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	607b      	str	r3, [r7, #4]
 8000a8e:	e029      	b.n	8000ae4 <isGameOver+0x60>
		for (int j=0; j<4; j++) {
 8000a90:	2300      	movs	r3, #0
 8000a92:	603b      	str	r3, [r7, #0]
 8000a94:	e020      	b.n	8000ad8 <isGameOver+0x54>
			if (curTeTro[i*4 + j] != '.' && field[curY+i][curX + j - 1] != '.') return 1;
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	009a      	lsls	r2, r3, #2
 8000a9a:	683b      	ldr	r3, [r7, #0]
 8000a9c:	4413      	add	r3, r2
 8000a9e:	4a16      	ldr	r2, [pc, #88]	; (8000af8 <isGameOver+0x74>)
 8000aa0:	5cd3      	ldrb	r3, [r2, r3]
 8000aa2:	2b2e      	cmp	r3, #46	; 0x2e
 8000aa4:	d015      	beq.n	8000ad2 <isGameOver+0x4e>
 8000aa6:	4b15      	ldr	r3, [pc, #84]	; (8000afc <isGameOver+0x78>)
 8000aa8:	881b      	ldrh	r3, [r3, #0]
 8000aaa:	461a      	mov	r2, r3
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	441a      	add	r2, r3
 8000ab0:	4b13      	ldr	r3, [pc, #76]	; (8000b00 <isGameOver+0x7c>)
 8000ab2:	881b      	ldrh	r3, [r3, #0]
 8000ab4:	4619      	mov	r1, r3
 8000ab6:	683b      	ldr	r3, [r7, #0]
 8000ab8:	440b      	add	r3, r1
 8000aba:	1e59      	subs	r1, r3, #1
 8000abc:	4811      	ldr	r0, [pc, #68]	; (8000b04 <isGameOver+0x80>)
 8000abe:	4613      	mov	r3, r2
 8000ac0:	011b      	lsls	r3, r3, #4
 8000ac2:	1a9b      	subs	r3, r3, r2
 8000ac4:	4403      	add	r3, r0
 8000ac6:	440b      	add	r3, r1
 8000ac8:	781b      	ldrb	r3, [r3, #0]
 8000aca:	2b2e      	cmp	r3, #46	; 0x2e
 8000acc:	d001      	beq.n	8000ad2 <isGameOver+0x4e>
 8000ace:	2301      	movs	r3, #1
 8000ad0:	e00c      	b.n	8000aec <isGameOver+0x68>
		for (int j=0; j<4; j++) {
 8000ad2:	683b      	ldr	r3, [r7, #0]
 8000ad4:	3301      	adds	r3, #1
 8000ad6:	603b      	str	r3, [r7, #0]
 8000ad8:	683b      	ldr	r3, [r7, #0]
 8000ada:	2b03      	cmp	r3, #3
 8000adc:	dddb      	ble.n	8000a96 <isGameOver+0x12>
	for (int i=0; i<4; i++) {
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	3301      	adds	r3, #1
 8000ae2:	607b      	str	r3, [r7, #4]
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	2b03      	cmp	r3, #3
 8000ae8:	ddd2      	ble.n	8000a90 <isGameOver+0xc>
		}
	}
	return 0;
 8000aea:	2300      	movs	r3, #0
}
 8000aec:	4618      	mov	r0, r3
 8000aee:	370c      	adds	r7, #12
 8000af0:	46bd      	mov	sp, r7
 8000af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af6:	4770      	bx	lr
 8000af8:	20000514 	.word	0x20000514
 8000afc:	20000148 	.word	0x20000148
 8000b00:	200000b2 	.word	0x200000b2
 8000b04:	20000524 	.word	0x20000524

08000b08 <setScoreText>:

void setScoreText() {
 8000b08:	b480      	push	{r7}
 8000b0a:	af00      	add	r7, sp, #0
	scoreText[0] = numText[(score/1000)%10];
 8000b0c:	4b2e      	ldr	r3, [pc, #184]	; (8000bc8 <setScoreText+0xc0>)
 8000b0e:	881b      	ldrh	r3, [r3, #0]
 8000b10:	4a2e      	ldr	r2, [pc, #184]	; (8000bcc <setScoreText+0xc4>)
 8000b12:	fba2 2303 	umull	r2, r3, r2, r3
 8000b16:	099b      	lsrs	r3, r3, #6
 8000b18:	b29a      	uxth	r2, r3
 8000b1a:	4b2d      	ldr	r3, [pc, #180]	; (8000bd0 <setScoreText+0xc8>)
 8000b1c:	fba3 1302 	umull	r1, r3, r3, r2
 8000b20:	08d9      	lsrs	r1, r3, #3
 8000b22:	460b      	mov	r3, r1
 8000b24:	009b      	lsls	r3, r3, #2
 8000b26:	440b      	add	r3, r1
 8000b28:	005b      	lsls	r3, r3, #1
 8000b2a:	1ad3      	subs	r3, r2, r3
 8000b2c:	b29b      	uxth	r3, r3
 8000b2e:	461a      	mov	r2, r3
 8000b30:	4b28      	ldr	r3, [pc, #160]	; (8000bd4 <setScoreText+0xcc>)
 8000b32:	5c9a      	ldrb	r2, [r3, r2]
 8000b34:	4b28      	ldr	r3, [pc, #160]	; (8000bd8 <setScoreText+0xd0>)
 8000b36:	701a      	strb	r2, [r3, #0]
	scoreText[1] = numText[(score/100)%10];
 8000b38:	4b23      	ldr	r3, [pc, #140]	; (8000bc8 <setScoreText+0xc0>)
 8000b3a:	881b      	ldrh	r3, [r3, #0]
 8000b3c:	4a27      	ldr	r2, [pc, #156]	; (8000bdc <setScoreText+0xd4>)
 8000b3e:	fba2 2303 	umull	r2, r3, r2, r3
 8000b42:	095b      	lsrs	r3, r3, #5
 8000b44:	b29a      	uxth	r2, r3
 8000b46:	4b22      	ldr	r3, [pc, #136]	; (8000bd0 <setScoreText+0xc8>)
 8000b48:	fba3 1302 	umull	r1, r3, r3, r2
 8000b4c:	08d9      	lsrs	r1, r3, #3
 8000b4e:	460b      	mov	r3, r1
 8000b50:	009b      	lsls	r3, r3, #2
 8000b52:	440b      	add	r3, r1
 8000b54:	005b      	lsls	r3, r3, #1
 8000b56:	1ad3      	subs	r3, r2, r3
 8000b58:	b29b      	uxth	r3, r3
 8000b5a:	461a      	mov	r2, r3
 8000b5c:	4b1d      	ldr	r3, [pc, #116]	; (8000bd4 <setScoreText+0xcc>)
 8000b5e:	5c9a      	ldrb	r2, [r3, r2]
 8000b60:	4b1d      	ldr	r3, [pc, #116]	; (8000bd8 <setScoreText+0xd0>)
 8000b62:	705a      	strb	r2, [r3, #1]
	scoreText[2] = numText[(score/10)%10];
 8000b64:	4b18      	ldr	r3, [pc, #96]	; (8000bc8 <setScoreText+0xc0>)
 8000b66:	881b      	ldrh	r3, [r3, #0]
 8000b68:	4a19      	ldr	r2, [pc, #100]	; (8000bd0 <setScoreText+0xc8>)
 8000b6a:	fba2 2303 	umull	r2, r3, r2, r3
 8000b6e:	08db      	lsrs	r3, r3, #3
 8000b70:	b29a      	uxth	r2, r3
 8000b72:	4b17      	ldr	r3, [pc, #92]	; (8000bd0 <setScoreText+0xc8>)
 8000b74:	fba3 1302 	umull	r1, r3, r3, r2
 8000b78:	08d9      	lsrs	r1, r3, #3
 8000b7a:	460b      	mov	r3, r1
 8000b7c:	009b      	lsls	r3, r3, #2
 8000b7e:	440b      	add	r3, r1
 8000b80:	005b      	lsls	r3, r3, #1
 8000b82:	1ad3      	subs	r3, r2, r3
 8000b84:	b29b      	uxth	r3, r3
 8000b86:	461a      	mov	r2, r3
 8000b88:	4b12      	ldr	r3, [pc, #72]	; (8000bd4 <setScoreText+0xcc>)
 8000b8a:	5c9a      	ldrb	r2, [r3, r2]
 8000b8c:	4b12      	ldr	r3, [pc, #72]	; (8000bd8 <setScoreText+0xd0>)
 8000b8e:	709a      	strb	r2, [r3, #2]
	scoreText[3] = numText[score%10];
 8000b90:	4b0d      	ldr	r3, [pc, #52]	; (8000bc8 <setScoreText+0xc0>)
 8000b92:	881a      	ldrh	r2, [r3, #0]
 8000b94:	4b0e      	ldr	r3, [pc, #56]	; (8000bd0 <setScoreText+0xc8>)
 8000b96:	fba3 1302 	umull	r1, r3, r3, r2
 8000b9a:	08d9      	lsrs	r1, r3, #3
 8000b9c:	460b      	mov	r3, r1
 8000b9e:	009b      	lsls	r3, r3, #2
 8000ba0:	440b      	add	r3, r1
 8000ba2:	005b      	lsls	r3, r3, #1
 8000ba4:	1ad3      	subs	r3, r2, r3
 8000ba6:	b29b      	uxth	r3, r3
 8000ba8:	461a      	mov	r2, r3
 8000baa:	4b0a      	ldr	r3, [pc, #40]	; (8000bd4 <setScoreText+0xcc>)
 8000bac:	5c9a      	ldrb	r2, [r3, r2]
 8000bae:	4b0a      	ldr	r3, [pc, #40]	; (8000bd8 <setScoreText+0xd0>)
 8000bb0:	70da      	strb	r2, [r3, #3]
	scoreText[4] = '\r';
 8000bb2:	4b09      	ldr	r3, [pc, #36]	; (8000bd8 <setScoreText+0xd0>)
 8000bb4:	220d      	movs	r2, #13
 8000bb6:	711a      	strb	r2, [r3, #4]
	scoreText[5] = '\n';
 8000bb8:	4b07      	ldr	r3, [pc, #28]	; (8000bd8 <setScoreText+0xd0>)
 8000bba:	220a      	movs	r2, #10
 8000bbc:	715a      	strb	r2, [r3, #5]
}
 8000bbe:	bf00      	nop
 8000bc0:	46bd      	mov	sp, r7
 8000bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc6:	4770      	bx	lr
 8000bc8:	20000144 	.word	0x20000144
 8000bcc:	10624dd3 	.word	0x10624dd3
 8000bd0:	cccccccd 	.word	0xcccccccd
 8000bd4:	200000a0 	.word	0x200000a0
 8000bd8:	2000050c 	.word	0x2000050c
 8000bdc:	51eb851f 	.word	0x51eb851f

08000be0 <initGame>:

void initGame() {
 8000be0:	b580      	push	{r7, lr}
 8000be2:	b082      	sub	sp, #8
 8000be4:	af00      	add	r7, sp, #0
	for (int i=0; i<fieldHeight; i++) {
 8000be6:	2300      	movs	r3, #0
 8000be8:	607b      	str	r3, [r7, #4]
 8000bea:	e034      	b.n	8000c56 <initGame+0x76>
		for (int j=0; j<fieldWidth; j++) {
 8000bec:	2300      	movs	r3, #0
 8000bee:	603b      	str	r3, [r7, #0]
 8000bf0:	e02b      	b.n	8000c4a <initGame+0x6a>
			if (j== 0 || j == fieldWidth-1) {
 8000bf2:	683b      	ldr	r3, [r7, #0]
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d002      	beq.n	8000bfe <initGame+0x1e>
 8000bf8:	683b      	ldr	r3, [r7, #0]
 8000bfa:	2b0e      	cmp	r3, #14
 8000bfc:	d10a      	bne.n	8000c14 <initGame+0x34>
				field[i][j] = '|';
 8000bfe:	4928      	ldr	r1, [pc, #160]	; (8000ca0 <initGame+0xc0>)
 8000c00:	687a      	ldr	r2, [r7, #4]
 8000c02:	4613      	mov	r3, r2
 8000c04:	011b      	lsls	r3, r3, #4
 8000c06:	1a9b      	subs	r3, r3, r2
 8000c08:	18ca      	adds	r2, r1, r3
 8000c0a:	683b      	ldr	r3, [r7, #0]
 8000c0c:	4413      	add	r3, r2
 8000c0e:	227c      	movs	r2, #124	; 0x7c
 8000c10:	701a      	strb	r2, [r3, #0]
 8000c12:	e017      	b.n	8000c44 <initGame+0x64>
			} else if (i == fieldHeight-1) {
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	2b18      	cmp	r3, #24
 8000c18:	d10a      	bne.n	8000c30 <initGame+0x50>
				field[i][j] = '#';
 8000c1a:	4921      	ldr	r1, [pc, #132]	; (8000ca0 <initGame+0xc0>)
 8000c1c:	687a      	ldr	r2, [r7, #4]
 8000c1e:	4613      	mov	r3, r2
 8000c20:	011b      	lsls	r3, r3, #4
 8000c22:	1a9b      	subs	r3, r3, r2
 8000c24:	18ca      	adds	r2, r1, r3
 8000c26:	683b      	ldr	r3, [r7, #0]
 8000c28:	4413      	add	r3, r2
 8000c2a:	2223      	movs	r2, #35	; 0x23
 8000c2c:	701a      	strb	r2, [r3, #0]
 8000c2e:	e009      	b.n	8000c44 <initGame+0x64>
			} else {
				field[i][j] = '.';
 8000c30:	491b      	ldr	r1, [pc, #108]	; (8000ca0 <initGame+0xc0>)
 8000c32:	687a      	ldr	r2, [r7, #4]
 8000c34:	4613      	mov	r3, r2
 8000c36:	011b      	lsls	r3, r3, #4
 8000c38:	1a9b      	subs	r3, r3, r2
 8000c3a:	18ca      	adds	r2, r1, r3
 8000c3c:	683b      	ldr	r3, [r7, #0]
 8000c3e:	4413      	add	r3, r2
 8000c40:	222e      	movs	r2, #46	; 0x2e
 8000c42:	701a      	strb	r2, [r3, #0]
		for (int j=0; j<fieldWidth; j++) {
 8000c44:	683b      	ldr	r3, [r7, #0]
 8000c46:	3301      	adds	r3, #1
 8000c48:	603b      	str	r3, [r7, #0]
 8000c4a:	683b      	ldr	r3, [r7, #0]
 8000c4c:	2b0e      	cmp	r3, #14
 8000c4e:	ddd0      	ble.n	8000bf2 <initGame+0x12>
	for (int i=0; i<fieldHeight; i++) {
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	3301      	adds	r3, #1
 8000c54:	607b      	str	r3, [r7, #4]
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	2b18      	cmp	r3, #24
 8000c5a:	ddc7      	ble.n	8000bec <initGame+0xc>
			}
		}

	}
	score = 0;
 8000c5c:	4b11      	ldr	r3, [pc, #68]	; (8000ca4 <initGame+0xc4>)
 8000c5e:	2200      	movs	r2, #0
 8000c60:	801a      	strh	r2, [r3, #0]
	setScoreText();
 8000c62:	f7ff ff51 	bl	8000b08 <setScoreText>
	gameOver = 0;
 8000c66:	4b10      	ldr	r3, [pc, #64]	; (8000ca8 <initGame+0xc8>)
 8000c68:	2200      	movs	r2, #0
 8000c6a:	701a      	strb	r2, [r3, #0]
	curX = fieldWidth/2 - 2;
 8000c6c:	4b0f      	ldr	r3, [pc, #60]	; (8000cac <initGame+0xcc>)
 8000c6e:	2205      	movs	r2, #5
 8000c70:	801a      	strh	r2, [r3, #0]
	curY = 0;
 8000c72:	4b0f      	ldr	r3, [pc, #60]	; (8000cb0 <initGame+0xd0>)
 8000c74:	2200      	movs	r2, #0
 8000c76:	801a      	strh	r2, [r3, #0]
	speed = 20;
 8000c78:	4b0e      	ldr	r3, [pc, #56]	; (8000cb4 <initGame+0xd4>)
 8000c7a:	2214      	movs	r2, #20
 8000c7c:	701a      	strb	r2, [r3, #0]
	speedCount = 0;
 8000c7e:	4b0e      	ldr	r3, [pc, #56]	; (8000cb8 <initGame+0xd8>)
 8000c80:	2200      	movs	r2, #0
 8000c82:	701a      	strb	r2, [r3, #0]
	pieceCount = 1;
 8000c84:	4b0d      	ldr	r3, [pc, #52]	; (8000cbc <initGame+0xdc>)
 8000c86:	2201      	movs	r2, #1
 8000c88:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit(&huart2, close, sizeof(close), 50);
 8000c8a:	2332      	movs	r3, #50	; 0x32
 8000c8c:	2206      	movs	r2, #6
 8000c8e:	490c      	ldr	r1, [pc, #48]	; (8000cc0 <initGame+0xe0>)
 8000c90:	480c      	ldr	r0, [pc, #48]	; (8000cc4 <initGame+0xe4>)
 8000c92:	f002 fa84 	bl	800319e <HAL_UART_Transmit>
}
 8000c96:	bf00      	nop
 8000c98:	3708      	adds	r7, #8
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	bd80      	pop	{r7, pc}
 8000c9e:	bf00      	nop
 8000ca0:	20000524 	.word	0x20000524
 8000ca4:	20000144 	.word	0x20000144
 8000ca8:	20000146 	.word	0x20000146
 8000cac:	200000b2 	.word	0x200000b2
 8000cb0:	20000148 	.word	0x20000148
 8000cb4:	200000b4 	.word	0x200000b4
 8000cb8:	2000014a 	.word	0x2000014a
 8000cbc:	200000b5 	.word	0x200000b5
 8000cc0:	2000001c 	.word	0x2000001c
 8000cc4:	2000069c 	.word	0x2000069c

08000cc8 <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000cc8:	b590      	push	{r4, r7, lr}
 8000cca:	b087      	sub	sp, #28
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	6078      	str	r0, [r7, #4]
    if (htim->Instance == TIM4) {
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	4a69      	ldr	r2, [pc, #420]	; (8000e7c <HAL_TIM_PeriodElapsedCallback+0x1b4>)
 8000cd6:	4293      	cmp	r3, r2
 8000cd8:	f040 80cb 	bne.w	8000e72 <HAL_TIM_PeriodElapsedCallback+0x1aa>
    	if (!gameOver) {
 8000cdc:	4b68      	ldr	r3, [pc, #416]	; (8000e80 <HAL_TIM_PeriodElapsedCallback+0x1b8>)
 8000cde:	781b      	ldrb	r3, [r3, #0]
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	f040 80ac 	bne.w	8000e3e <HAL_TIM_PeriodElapsedCallback+0x176>
    		//Move tetromino down
    		if (canMove(0)) {
 8000ce6:	2000      	movs	r0, #0
 8000ce8:	f7ff fd3e 	bl	8000768 <canMove>
 8000cec:	4603      	mov	r3, r0
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	d006      	beq.n	8000d00 <HAL_TIM_PeriodElapsedCallback+0x38>
    			curY++;
 8000cf2:	4b64      	ldr	r3, [pc, #400]	; (8000e84 <HAL_TIM_PeriodElapsedCallback+0x1bc>)
 8000cf4:	881b      	ldrh	r3, [r3, #0]
 8000cf6:	3301      	adds	r3, #1
 8000cf8:	b29a      	uxth	r2, r3
 8000cfa:	4b62      	ldr	r3, [pc, #392]	; (8000e84 <HAL_TIM_PeriodElapsedCallback+0x1bc>)
 8000cfc:	801a      	strh	r2, [r3, #0]
 8000cfe:	e095      	b.n	8000e2c <HAL_TIM_PeriodElapsedCallback+0x164>
    		} else {
    			//Set tetromino to Map
    			for(int i=0; i<4; i++) {
 8000d00:	2300      	movs	r3, #0
 8000d02:	617b      	str	r3, [r7, #20]
 8000d04:	e02b      	b.n	8000d5e <HAL_TIM_PeriodElapsedCallback+0x96>
    				for (int j=0; j<4; j++) {
 8000d06:	2300      	movs	r3, #0
 8000d08:	613b      	str	r3, [r7, #16]
 8000d0a:	e022      	b.n	8000d52 <HAL_TIM_PeriodElapsedCallback+0x8a>
    					if (curTeTro[i*4 + j] != '.') {
 8000d0c:	697b      	ldr	r3, [r7, #20]
 8000d0e:	009a      	lsls	r2, r3, #2
 8000d10:	693b      	ldr	r3, [r7, #16]
 8000d12:	4413      	add	r3, r2
 8000d14:	4a5c      	ldr	r2, [pc, #368]	; (8000e88 <HAL_TIM_PeriodElapsedCallback+0x1c0>)
 8000d16:	5cd3      	ldrb	r3, [r2, r3]
 8000d18:	2b2e      	cmp	r3, #46	; 0x2e
 8000d1a:	d017      	beq.n	8000d4c <HAL_TIM_PeriodElapsedCallback+0x84>
    			  			field[curY+i][curX+j] = curTeTro[i*4 + j];
 8000d1c:	697b      	ldr	r3, [r7, #20]
 8000d1e:	009a      	lsls	r2, r3, #2
 8000d20:	693b      	ldr	r3, [r7, #16]
 8000d22:	4413      	add	r3, r2
 8000d24:	4a57      	ldr	r2, [pc, #348]	; (8000e84 <HAL_TIM_PeriodElapsedCallback+0x1bc>)
 8000d26:	8812      	ldrh	r2, [r2, #0]
 8000d28:	4611      	mov	r1, r2
 8000d2a:	697a      	ldr	r2, [r7, #20]
 8000d2c:	440a      	add	r2, r1
 8000d2e:	4957      	ldr	r1, [pc, #348]	; (8000e8c <HAL_TIM_PeriodElapsedCallback+0x1c4>)
 8000d30:	8809      	ldrh	r1, [r1, #0]
 8000d32:	4608      	mov	r0, r1
 8000d34:	6939      	ldr	r1, [r7, #16]
 8000d36:	4401      	add	r1, r0
 8000d38:	4853      	ldr	r0, [pc, #332]	; (8000e88 <HAL_TIM_PeriodElapsedCallback+0x1c0>)
 8000d3a:	5cc4      	ldrb	r4, [r0, r3]
 8000d3c:	4854      	ldr	r0, [pc, #336]	; (8000e90 <HAL_TIM_PeriodElapsedCallback+0x1c8>)
 8000d3e:	4613      	mov	r3, r2
 8000d40:	011b      	lsls	r3, r3, #4
 8000d42:	1a9b      	subs	r3, r3, r2
 8000d44:	4403      	add	r3, r0
 8000d46:	440b      	add	r3, r1
 8000d48:	4622      	mov	r2, r4
 8000d4a:	701a      	strb	r2, [r3, #0]
    				for (int j=0; j<4; j++) {
 8000d4c:	693b      	ldr	r3, [r7, #16]
 8000d4e:	3301      	adds	r3, #1
 8000d50:	613b      	str	r3, [r7, #16]
 8000d52:	693b      	ldr	r3, [r7, #16]
 8000d54:	2b03      	cmp	r3, #3
 8000d56:	ddd9      	ble.n	8000d0c <HAL_TIM_PeriodElapsedCallback+0x44>
    			for(int i=0; i<4; i++) {
 8000d58:	697b      	ldr	r3, [r7, #20]
 8000d5a:	3301      	adds	r3, #1
 8000d5c:	617b      	str	r3, [r7, #20]
 8000d5e:	697b      	ldr	r3, [r7, #20]
 8000d60:	2b03      	cmp	r3, #3
 8000d62:	ddd0      	ble.n	8000d06 <HAL_TIM_PeriodElapsedCallback+0x3e>
    			  		 }
    			  	}
    			}
    			//Check for the line and update score
    			for (uint8_t i=0; i<fieldHeight-1; i++) {
 8000d64:	2300      	movs	r3, #0
 8000d66:	73fb      	strb	r3, [r7, #15]
 8000d68:	e015      	b.n	8000d96 <HAL_TIM_PeriodElapsedCallback+0xce>
    			  	if (gotLine(i)) {
 8000d6a:	7bfb      	ldrb	r3, [r7, #15]
 8000d6c:	4618      	mov	r0, r3
 8000d6e:	f7ff fe1f 	bl	80009b0 <gotLine>
 8000d72:	4603      	mov	r3, r0
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	d00b      	beq.n	8000d90 <HAL_TIM_PeriodElapsedCallback+0xc8>
    			  		score += 100;
 8000d78:	4b46      	ldr	r3, [pc, #280]	; (8000e94 <HAL_TIM_PeriodElapsedCallback+0x1cc>)
 8000d7a:	881b      	ldrh	r3, [r3, #0]
 8000d7c:	3364      	adds	r3, #100	; 0x64
 8000d7e:	b29a      	uxth	r2, r3
 8000d80:	4b44      	ldr	r3, [pc, #272]	; (8000e94 <HAL_TIM_PeriodElapsedCallback+0x1cc>)
 8000d82:	801a      	strh	r2, [r3, #0]
    			  		setScoreText();
 8000d84:	f7ff fec0 	bl	8000b08 <setScoreText>
    			  		pushAboveDown(i);
 8000d88:	7bfb      	ldrb	r3, [r7, #15]
 8000d8a:	4618      	mov	r0, r3
 8000d8c:	f7ff fe38 	bl	8000a00 <pushAboveDown>
    			for (uint8_t i=0; i<fieldHeight-1; i++) {
 8000d90:	7bfb      	ldrb	r3, [r7, #15]
 8000d92:	3301      	adds	r3, #1
 8000d94:	73fb      	strb	r3, [r7, #15]
 8000d96:	7bfb      	ldrb	r3, [r7, #15]
 8000d98:	2b17      	cmp	r3, #23
 8000d9a:	d9e6      	bls.n	8000d6a <HAL_TIM_PeriodElapsedCallback+0xa2>
    			  	}
    			}
    			//Get the new tetromino
    			curY = 0;
 8000d9c:	4b39      	ldr	r3, [pc, #228]	; (8000e84 <HAL_TIM_PeriodElapsedCallback+0x1bc>)
 8000d9e:	2200      	movs	r2, #0
 8000da0:	801a      	strh	r2, [r3, #0]
    			curX = fieldWidth/2 - 2;
 8000da2:	4b3a      	ldr	r3, [pc, #232]	; (8000e8c <HAL_TIM_PeriodElapsedCallback+0x1c4>)
 8000da4:	2205      	movs	r2, #5
 8000da6:	801a      	strh	r2, [r3, #0]
    			memcpy(curTeTro, tetrominos[rand()%7], 16);
 8000da8:	f003 f922 	bl	8003ff0 <rand>
 8000dac:	4601      	mov	r1, r0
 8000dae:	4b3a      	ldr	r3, [pc, #232]	; (8000e98 <HAL_TIM_PeriodElapsedCallback+0x1d0>)
 8000db0:	fb83 2301 	smull	r2, r3, r3, r1
 8000db4:	440b      	add	r3, r1
 8000db6:	109a      	asrs	r2, r3, #2
 8000db8:	17cb      	asrs	r3, r1, #31
 8000dba:	1ad2      	subs	r2, r2, r3
 8000dbc:	4613      	mov	r3, r2
 8000dbe:	00db      	lsls	r3, r3, #3
 8000dc0:	1a9b      	subs	r3, r3, r2
 8000dc2:	1aca      	subs	r2, r1, r3
 8000dc4:	0113      	lsls	r3, r2, #4
 8000dc6:	4a35      	ldr	r2, [pc, #212]	; (8000e9c <HAL_TIM_PeriodElapsedCallback+0x1d4>)
 8000dc8:	441a      	add	r2, r3
 8000dca:	4b2f      	ldr	r3, [pc, #188]	; (8000e88 <HAL_TIM_PeriodElapsedCallback+0x1c0>)
 8000dcc:	6814      	ldr	r4, [r2, #0]
 8000dce:	6850      	ldr	r0, [r2, #4]
 8000dd0:	6891      	ldr	r1, [r2, #8]
 8000dd2:	68d2      	ldr	r2, [r2, #12]
 8000dd4:	601c      	str	r4, [r3, #0]
 8000dd6:	6058      	str	r0, [r3, #4]
 8000dd8:	6099      	str	r1, [r3, #8]
 8000dda:	60da      	str	r2, [r3, #12]
    			//Update piece count and speed
    			pieceCount++;
 8000ddc:	4b30      	ldr	r3, [pc, #192]	; (8000ea0 <HAL_TIM_PeriodElapsedCallback+0x1d8>)
 8000dde:	781b      	ldrb	r3, [r3, #0]
 8000de0:	3301      	adds	r3, #1
 8000de2:	b2da      	uxtb	r2, r3
 8000de4:	4b2e      	ldr	r3, [pc, #184]	; (8000ea0 <HAL_TIM_PeriodElapsedCallback+0x1d8>)
 8000de6:	701a      	strb	r2, [r3, #0]
    			//CheckGameOver
    			if (isGameOver()) {
 8000de8:	f7ff fe4c 	bl	8000a84 <isGameOver>
 8000dec:	4603      	mov	r3, r0
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d01c      	beq.n	8000e2c <HAL_TIM_PeriodElapsedCallback+0x164>
    				gameOver = 1;
 8000df2:	4b23      	ldr	r3, [pc, #140]	; (8000e80 <HAL_TIM_PeriodElapsedCallback+0x1b8>)
 8000df4:	2201      	movs	r2, #1
 8000df6:	701a      	strb	r2, [r3, #0]
    				clearScreen();
 8000df8:	f7ff fb7c 	bl	80004f4 <clearScreen>
    				HAL_UART_Transmit(&huart2, newLine, sizeof(newLine), 50);
 8000dfc:	2332      	movs	r3, #50	; 0x32
 8000dfe:	2203      	movs	r2, #3
 8000e00:	4928      	ldr	r1, [pc, #160]	; (8000ea4 <HAL_TIM_PeriodElapsedCallback+0x1dc>)
 8000e02:	4829      	ldr	r0, [pc, #164]	; (8000ea8 <HAL_TIM_PeriodElapsedCallback+0x1e0>)
 8000e04:	f002 f9cb 	bl	800319e <HAL_UART_Transmit>
    				HAL_UART_Transmit(&huart2, gameOverText1, sizeof(gameOverText1), 50);
 8000e08:	2332      	movs	r3, #50	; 0x32
 8000e0a:	222e      	movs	r2, #46	; 0x2e
 8000e0c:	4927      	ldr	r1, [pc, #156]	; (8000eac <HAL_TIM_PeriodElapsedCallback+0x1e4>)
 8000e0e:	4826      	ldr	r0, [pc, #152]	; (8000ea8 <HAL_TIM_PeriodElapsedCallback+0x1e0>)
 8000e10:	f002 f9c5 	bl	800319e <HAL_UART_Transmit>
    				HAL_UART_Transmit(&huart2, scoreText, sizeof(scoreText), 50);
 8000e14:	2332      	movs	r3, #50	; 0x32
 8000e16:	2206      	movs	r2, #6
 8000e18:	4925      	ldr	r1, [pc, #148]	; (8000eb0 <HAL_TIM_PeriodElapsedCallback+0x1e8>)
 8000e1a:	4823      	ldr	r0, [pc, #140]	; (8000ea8 <HAL_TIM_PeriodElapsedCallback+0x1e0>)
 8000e1c:	f002 f9bf 	bl	800319e <HAL_UART_Transmit>
    				HAL_UART_Transmit(&huart2, gameOverText2, sizeof(gameOverText2), 50);
 8000e20:	2332      	movs	r3, #50	; 0x32
 8000e22:	2222      	movs	r2, #34	; 0x22
 8000e24:	4923      	ldr	r1, [pc, #140]	; (8000eb4 <HAL_TIM_PeriodElapsedCallback+0x1ec>)
 8000e26:	4820      	ldr	r0, [pc, #128]	; (8000ea8 <HAL_TIM_PeriodElapsedCallback+0x1e0>)
 8000e28:	f002 f9b9 	bl	800319e <HAL_UART_Transmit>
    			}
    		}
    		if (!gameOver) {
 8000e2c:	4b14      	ldr	r3, [pc, #80]	; (8000e80 <HAL_TIM_PeriodElapsedCallback+0x1b8>)
 8000e2e:	781b      	ldrb	r3, [r3, #0]
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	d11e      	bne.n	8000e72 <HAL_TIM_PeriodElapsedCallback+0x1aa>
    			recursor();
 8000e34:	f7ff fb50 	bl	80004d8 <recursor>
    			display();
 8000e38:	f7ff fb80 	bl	800053c <display>
    		HAL_UART_Transmit(&huart2, scoreText, sizeof(scoreText), 50);
    		HAL_UART_Transmit(&huart2, gameOverText2, sizeof(gameOverText2), 50);
    	}

    }
}
 8000e3c:	e019      	b.n	8000e72 <HAL_TIM_PeriodElapsedCallback+0x1aa>
    		recursor();
 8000e3e:	f7ff fb4b 	bl	80004d8 <recursor>
    		HAL_UART_Transmit(&huart2, newLine, sizeof(newLine), 50);
 8000e42:	2332      	movs	r3, #50	; 0x32
 8000e44:	2203      	movs	r2, #3
 8000e46:	4917      	ldr	r1, [pc, #92]	; (8000ea4 <HAL_TIM_PeriodElapsedCallback+0x1dc>)
 8000e48:	4817      	ldr	r0, [pc, #92]	; (8000ea8 <HAL_TIM_PeriodElapsedCallback+0x1e0>)
 8000e4a:	f002 f9a8 	bl	800319e <HAL_UART_Transmit>
    		HAL_UART_Transmit(&huart2, gameOverText1, sizeof(gameOverText1), 50);
 8000e4e:	2332      	movs	r3, #50	; 0x32
 8000e50:	222e      	movs	r2, #46	; 0x2e
 8000e52:	4916      	ldr	r1, [pc, #88]	; (8000eac <HAL_TIM_PeriodElapsedCallback+0x1e4>)
 8000e54:	4814      	ldr	r0, [pc, #80]	; (8000ea8 <HAL_TIM_PeriodElapsedCallback+0x1e0>)
 8000e56:	f002 f9a2 	bl	800319e <HAL_UART_Transmit>
    		HAL_UART_Transmit(&huart2, scoreText, sizeof(scoreText), 50);
 8000e5a:	2332      	movs	r3, #50	; 0x32
 8000e5c:	2206      	movs	r2, #6
 8000e5e:	4914      	ldr	r1, [pc, #80]	; (8000eb0 <HAL_TIM_PeriodElapsedCallback+0x1e8>)
 8000e60:	4811      	ldr	r0, [pc, #68]	; (8000ea8 <HAL_TIM_PeriodElapsedCallback+0x1e0>)
 8000e62:	f002 f99c 	bl	800319e <HAL_UART_Transmit>
    		HAL_UART_Transmit(&huart2, gameOverText2, sizeof(gameOverText2), 50);
 8000e66:	2332      	movs	r3, #50	; 0x32
 8000e68:	2222      	movs	r2, #34	; 0x22
 8000e6a:	4912      	ldr	r1, [pc, #72]	; (8000eb4 <HAL_TIM_PeriodElapsedCallback+0x1ec>)
 8000e6c:	480e      	ldr	r0, [pc, #56]	; (8000ea8 <HAL_TIM_PeriodElapsedCallback+0x1e0>)
 8000e6e:	f002 f996 	bl	800319e <HAL_UART_Transmit>
}
 8000e72:	bf00      	nop
 8000e74:	371c      	adds	r7, #28
 8000e76:	46bd      	mov	sp, r7
 8000e78:	bd90      	pop	{r4, r7, pc}
 8000e7a:	bf00      	nop
 8000e7c:	40000800 	.word	0x40000800
 8000e80:	20000146 	.word	0x20000146
 8000e84:	20000148 	.word	0x20000148
 8000e88:	20000514 	.word	0x20000514
 8000e8c:	200000b2 	.word	0x200000b2
 8000e90:	20000524 	.word	0x20000524
 8000e94:	20000144 	.word	0x20000144
 8000e98:	92492493 	.word	0x92492493
 8000e9c:	200006dc 	.word	0x200006dc
 8000ea0:	200000b5 	.word	0x200000b5
 8000ea4:	20000018 	.word	0x20000018
 8000ea8:	2000069c 	.word	0x2000069c
 8000eac:	2000004c 	.word	0x2000004c
 8000eb0:	2000050c 	.word	0x2000050c
 8000eb4:	2000007c 	.word	0x2000007c

08000eb8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000eb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000eba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	//Tetromino
	memcpy(tetrominos[0], ".....OO..OO.....", 16);
 8000ebc:	4ace      	ldr	r2, [pc, #824]	; (80011f8 <main+0x340>)
 8000ebe:	4bcf      	ldr	r3, [pc, #828]	; (80011fc <main+0x344>)
 8000ec0:	4614      	mov	r4, r2
 8000ec2:	461d      	mov	r5, r3
 8000ec4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000ec6:	6020      	str	r0, [r4, #0]
 8000ec8:	6061      	str	r1, [r4, #4]
 8000eca:	60a2      	str	r2, [r4, #8]
 8000ecc:	60e3      	str	r3, [r4, #12]
	memcpy(tetrominos[1], ".I...I...I...I..", 16);
 8000ece:	4bca      	ldr	r3, [pc, #808]	; (80011f8 <main+0x340>)
 8000ed0:	4acb      	ldr	r2, [pc, #812]	; (8001200 <main+0x348>)
 8000ed2:	f103 0410 	add.w	r4, r3, #16
 8000ed6:	4615      	mov	r5, r2
 8000ed8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000eda:	6020      	str	r0, [r4, #0]
 8000edc:	6061      	str	r1, [r4, #4]
 8000ede:	60a2      	str	r2, [r4, #8]
 8000ee0:	60e3      	str	r3, [r4, #12]
	memcpy(tetrominos[2], ".....SS.SS......", 16);
 8000ee2:	4bc5      	ldr	r3, [pc, #788]	; (80011f8 <main+0x340>)
 8000ee4:	4ac7      	ldr	r2, [pc, #796]	; (8001204 <main+0x34c>)
 8000ee6:	f103 0420 	add.w	r4, r3, #32
 8000eea:	4615      	mov	r5, r2
 8000eec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000eee:	6020      	str	r0, [r4, #0]
 8000ef0:	6061      	str	r1, [r4, #4]
 8000ef2:	60a2      	str	r2, [r4, #8]
 8000ef4:	60e3      	str	r3, [r4, #12]
	memcpy(tetrominos[3], "....ZZ...ZZ.....", 16);
 8000ef6:	4bc0      	ldr	r3, [pc, #768]	; (80011f8 <main+0x340>)
 8000ef8:	4ac3      	ldr	r2, [pc, #780]	; (8001208 <main+0x350>)
 8000efa:	f103 0430 	add.w	r4, r3, #48	; 0x30
 8000efe:	4615      	mov	r5, r2
 8000f00:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000f02:	6020      	str	r0, [r4, #0]
 8000f04:	6061      	str	r1, [r4, #4]
 8000f06:	60a2      	str	r2, [r4, #8]
 8000f08:	60e3      	str	r3, [r4, #12]
	memcpy(tetrominos[4], ".L...L...LL.....", 16);
 8000f0a:	4bbb      	ldr	r3, [pc, #748]	; (80011f8 <main+0x340>)
 8000f0c:	4abf      	ldr	r2, [pc, #764]	; (800120c <main+0x354>)
 8000f0e:	f103 0440 	add.w	r4, r3, #64	; 0x40
 8000f12:	4615      	mov	r5, r2
 8000f14:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000f16:	6020      	str	r0, [r4, #0]
 8000f18:	6061      	str	r1, [r4, #4]
 8000f1a:	60a2      	str	r2, [r4, #8]
 8000f1c:	60e3      	str	r3, [r4, #12]
	memcpy(tetrominos[5], "..J...J..JJ.....", 16);
 8000f1e:	4bb6      	ldr	r3, [pc, #728]	; (80011f8 <main+0x340>)
 8000f20:	4abb      	ldr	r2, [pc, #748]	; (8001210 <main+0x358>)
 8000f22:	f103 0450 	add.w	r4, r3, #80	; 0x50
 8000f26:	4615      	mov	r5, r2
 8000f28:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000f2a:	6020      	str	r0, [r4, #0]
 8000f2c:	6061      	str	r1, [r4, #4]
 8000f2e:	60a2      	str	r2, [r4, #8]
 8000f30:	60e3      	str	r3, [r4, #12]
	memcpy(tetrominos[6], "....TTT..T......", 16);
 8000f32:	4bb1      	ldr	r3, [pc, #708]	; (80011f8 <main+0x340>)
 8000f34:	4ab7      	ldr	r2, [pc, #732]	; (8001214 <main+0x35c>)
 8000f36:	f103 0460 	add.w	r4, r3, #96	; 0x60
 8000f3a:	4615      	mov	r5, r2
 8000f3c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000f3e:	6020      	str	r0, [r4, #0]
 8000f40:	6061      	str	r1, [r4, #4]
 8000f42:	60a2      	str	r2, [r4, #8]
 8000f44:	60e3      	str	r3, [r4, #12]
	memcpy(curTeTro, tetrominos[rand()%7], 16);
 8000f46:	f003 f853 	bl	8003ff0 <rand>
 8000f4a:	4601      	mov	r1, r0
 8000f4c:	4bb2      	ldr	r3, [pc, #712]	; (8001218 <main+0x360>)
 8000f4e:	fb83 2301 	smull	r2, r3, r3, r1
 8000f52:	440b      	add	r3, r1
 8000f54:	109a      	asrs	r2, r3, #2
 8000f56:	17cb      	asrs	r3, r1, #31
 8000f58:	1ad2      	subs	r2, r2, r3
 8000f5a:	4613      	mov	r3, r2
 8000f5c:	00db      	lsls	r3, r3, #3
 8000f5e:	1a9b      	subs	r3, r3, r2
 8000f60:	1aca      	subs	r2, r1, r3
 8000f62:	0113      	lsls	r3, r2, #4
 8000f64:	4aa4      	ldr	r2, [pc, #656]	; (80011f8 <main+0x340>)
 8000f66:	441a      	add	r2, r3
 8000f68:	4bac      	ldr	r3, [pc, #688]	; (800121c <main+0x364>)
 8000f6a:	6814      	ldr	r4, [r2, #0]
 8000f6c:	6850      	ldr	r0, [r2, #4]
 8000f6e:	6891      	ldr	r1, [r2, #8]
 8000f70:	68d2      	ldr	r2, [r2, #12]
 8000f72:	601c      	str	r4, [r3, #0]
 8000f74:	6058      	str	r0, [r3, #4]
 8000f76:	6099      	str	r1, [r3, #8]
 8000f78:	60da      	str	r2, [r3, #12]
	memcpy(guideText[0], "    There are 7 types of Tetrominoes.   ", 40);
 8000f7a:	4ba9      	ldr	r3, [pc, #676]	; (8001220 <main+0x368>)
 8000f7c:	4aa9      	ldr	r2, [pc, #676]	; (8001224 <main+0x36c>)
 8000f7e:	4614      	mov	r4, r2
 8000f80:	469c      	mov	ip, r3
 8000f82:	f104 0e20 	add.w	lr, r4, #32
 8000f86:	4665      	mov	r5, ip
 8000f88:	4626      	mov	r6, r4
 8000f8a:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8000f8c:	6028      	str	r0, [r5, #0]
 8000f8e:	6069      	str	r1, [r5, #4]
 8000f90:	60aa      	str	r2, [r5, #8]
 8000f92:	60eb      	str	r3, [r5, #12]
 8000f94:	3410      	adds	r4, #16
 8000f96:	f10c 0c10 	add.w	ip, ip, #16
 8000f9a:	4574      	cmp	r4, lr
 8000f9c:	d1f3      	bne.n	8000f86 <main+0xce>
 8000f9e:	4662      	mov	r2, ip
 8000fa0:	4623      	mov	r3, r4
 8000fa2:	cb03      	ldmia	r3!, {r0, r1}
 8000fa4:	6010      	str	r0, [r2, #0]
 8000fa6:	6051      	str	r1, [r2, #4]
	memcpy(guideText[1], "                                        ", 40);
 8000fa8:	4b9d      	ldr	r3, [pc, #628]	; (8001220 <main+0x368>)
 8000faa:	4a9f      	ldr	r2, [pc, #636]	; (8001228 <main+0x370>)
 8000fac:	4614      	mov	r4, r2
 8000fae:	f103 0c28 	add.w	ip, r3, #40	; 0x28
 8000fb2:	f104 0e20 	add.w	lr, r4, #32
 8000fb6:	4665      	mov	r5, ip
 8000fb8:	4626      	mov	r6, r4
 8000fba:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8000fbc:	6028      	str	r0, [r5, #0]
 8000fbe:	6069      	str	r1, [r5, #4]
 8000fc0:	60aa      	str	r2, [r5, #8]
 8000fc2:	60eb      	str	r3, [r5, #12]
 8000fc4:	3410      	adds	r4, #16
 8000fc6:	f10c 0c10 	add.w	ip, ip, #16
 8000fca:	4574      	cmp	r4, lr
 8000fcc:	d1f3      	bne.n	8000fb6 <main+0xfe>
 8000fce:	4662      	mov	r2, ip
 8000fd0:	4623      	mov	r3, r4
 8000fd2:	cb03      	ldmia	r3!, {r0, r1}
 8000fd4:	6010      	str	r0, [r2, #0]
 8000fd6:	6051      	str	r1, [r2, #4]
	memcpy(guideText[2], "         SS   ZZ    TTT   OO            ", 40);
 8000fd8:	4b91      	ldr	r3, [pc, #580]	; (8001220 <main+0x368>)
 8000fda:	4a94      	ldr	r2, [pc, #592]	; (800122c <main+0x374>)
 8000fdc:	4614      	mov	r4, r2
 8000fde:	f103 0c50 	add.w	ip, r3, #80	; 0x50
 8000fe2:	f104 0e20 	add.w	lr, r4, #32
 8000fe6:	4665      	mov	r5, ip
 8000fe8:	4626      	mov	r6, r4
 8000fea:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8000fec:	6028      	str	r0, [r5, #0]
 8000fee:	6069      	str	r1, [r5, #4]
 8000ff0:	60aa      	str	r2, [r5, #8]
 8000ff2:	60eb      	str	r3, [r5, #12]
 8000ff4:	3410      	adds	r4, #16
 8000ff6:	f10c 0c10 	add.w	ip, ip, #16
 8000ffa:	4574      	cmp	r4, lr
 8000ffc:	d1f3      	bne.n	8000fe6 <main+0x12e>
 8000ffe:	4662      	mov	r2, ip
 8001000:	4623      	mov	r3, r4
 8001002:	cb03      	ldmia	r3!, {r0, r1}
 8001004:	6010      	str	r0, [r2, #0]
 8001006:	6051      	str	r1, [r2, #4]
	memcpy(guideText[3], "        SS     ZZ    T    OO            ", 40);
 8001008:	4b85      	ldr	r3, [pc, #532]	; (8001220 <main+0x368>)
 800100a:	4a89      	ldr	r2, [pc, #548]	; (8001230 <main+0x378>)
 800100c:	4614      	mov	r4, r2
 800100e:	f103 0c78 	add.w	ip, r3, #120	; 0x78
 8001012:	f104 0e20 	add.w	lr, r4, #32
 8001016:	4665      	mov	r5, ip
 8001018:	4626      	mov	r6, r4
 800101a:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800101c:	6028      	str	r0, [r5, #0]
 800101e:	6069      	str	r1, [r5, #4]
 8001020:	60aa      	str	r2, [r5, #8]
 8001022:	60eb      	str	r3, [r5, #12]
 8001024:	3410      	adds	r4, #16
 8001026:	f10c 0c10 	add.w	ip, ip, #16
 800102a:	4574      	cmp	r4, lr
 800102c:	d1f3      	bne.n	8001016 <main+0x15e>
 800102e:	4662      	mov	r2, ip
 8001030:	4623      	mov	r3, r4
 8001032:	cb03      	ldmia	r3!, {r0, r1}
 8001034:	6010      	str	r0, [r2, #0]
 8001036:	6051      	str	r1, [r2, #4]
	memcpy(guideText[4], "                                        ", 40);
 8001038:	4b79      	ldr	r3, [pc, #484]	; (8001220 <main+0x368>)
 800103a:	4a7b      	ldr	r2, [pc, #492]	; (8001228 <main+0x370>)
 800103c:	4614      	mov	r4, r2
 800103e:	f103 0ca0 	add.w	ip, r3, #160	; 0xa0
 8001042:	f104 0e20 	add.w	lr, r4, #32
 8001046:	4665      	mov	r5, ip
 8001048:	4626      	mov	r6, r4
 800104a:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800104c:	6028      	str	r0, [r5, #0]
 800104e:	6069      	str	r1, [r5, #4]
 8001050:	60aa      	str	r2, [r5, #8]
 8001052:	60eb      	str	r3, [r5, #12]
 8001054:	3410      	adds	r4, #16
 8001056:	f10c 0c10 	add.w	ip, ip, #16
 800105a:	4574      	cmp	r4, lr
 800105c:	d1f3      	bne.n	8001046 <main+0x18e>
 800105e:	4662      	mov	r2, ip
 8001060:	4623      	mov	r3, r4
 8001062:	cb03      	ldmia	r3!, {r0, r1}
 8001064:	6010      	str	r0, [r2, #0]
 8001066:	6051      	str	r1, [r2, #4]
	memcpy(guideText[5], "           I                            ", 40);
 8001068:	4b6d      	ldr	r3, [pc, #436]	; (8001220 <main+0x368>)
 800106a:	4a72      	ldr	r2, [pc, #456]	; (8001234 <main+0x37c>)
 800106c:	4614      	mov	r4, r2
 800106e:	f103 0cc8 	add.w	ip, r3, #200	; 0xc8
 8001072:	f104 0e20 	add.w	lr, r4, #32
 8001076:	4665      	mov	r5, ip
 8001078:	4626      	mov	r6, r4
 800107a:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800107c:	6028      	str	r0, [r5, #0]
 800107e:	6069      	str	r1, [r5, #4]
 8001080:	60aa      	str	r2, [r5, #8]
 8001082:	60eb      	str	r3, [r5, #12]
 8001084:	3410      	adds	r4, #16
 8001086:	f10c 0c10 	add.w	ip, ip, #16
 800108a:	4574      	cmp	r4, lr
 800108c:	d1f3      	bne.n	8001076 <main+0x1be>
 800108e:	4662      	mov	r2, ip
 8001090:	4623      	mov	r3, r4
 8001092:	cb03      	ldmia	r3!, {r0, r1}
 8001094:	6010      	str	r0, [r2, #0]
 8001096:	6051      	str	r1, [r2, #4]
	memcpy(guideText[6], "           I      J     L               ", 40);
 8001098:	4b61      	ldr	r3, [pc, #388]	; (8001220 <main+0x368>)
 800109a:	4a67      	ldr	r2, [pc, #412]	; (8001238 <main+0x380>)
 800109c:	4614      	mov	r4, r2
 800109e:	f103 0cf0 	add.w	ip, r3, #240	; 0xf0
 80010a2:	f104 0e20 	add.w	lr, r4, #32
 80010a6:	4665      	mov	r5, ip
 80010a8:	4626      	mov	r6, r4
 80010aa:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80010ac:	6028      	str	r0, [r5, #0]
 80010ae:	6069      	str	r1, [r5, #4]
 80010b0:	60aa      	str	r2, [r5, #8]
 80010b2:	60eb      	str	r3, [r5, #12]
 80010b4:	3410      	adds	r4, #16
 80010b6:	f10c 0c10 	add.w	ip, ip, #16
 80010ba:	4574      	cmp	r4, lr
 80010bc:	d1f3      	bne.n	80010a6 <main+0x1ee>
 80010be:	4662      	mov	r2, ip
 80010c0:	4623      	mov	r3, r4
 80010c2:	cb03      	ldmia	r3!, {r0, r1}
 80010c4:	6010      	str	r0, [r2, #0]
 80010c6:	6051      	str	r1, [r2, #4]
	memcpy(guideText[7], "           I      J     L               ", 40);
 80010c8:	4b55      	ldr	r3, [pc, #340]	; (8001220 <main+0x368>)
 80010ca:	4a5b      	ldr	r2, [pc, #364]	; (8001238 <main+0x380>)
 80010cc:	4614      	mov	r4, r2
 80010ce:	f503 7c8c 	add.w	ip, r3, #280	; 0x118
 80010d2:	f104 0e20 	add.w	lr, r4, #32
 80010d6:	4665      	mov	r5, ip
 80010d8:	4626      	mov	r6, r4
 80010da:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80010dc:	6028      	str	r0, [r5, #0]
 80010de:	6069      	str	r1, [r5, #4]
 80010e0:	60aa      	str	r2, [r5, #8]
 80010e2:	60eb      	str	r3, [r5, #12]
 80010e4:	3410      	adds	r4, #16
 80010e6:	f10c 0c10 	add.w	ip, ip, #16
 80010ea:	4574      	cmp	r4, lr
 80010ec:	d1f3      	bne.n	80010d6 <main+0x21e>
 80010ee:	4662      	mov	r2, ip
 80010f0:	4623      	mov	r3, r4
 80010f2:	cb03      	ldmia	r3!, {r0, r1}
 80010f4:	6010      	str	r0, [r2, #0]
 80010f6:	6051      	str	r1, [r2, #4]
	memcpy(guideText[8], "           I     JJ     LL              ", 40);
 80010f8:	4b49      	ldr	r3, [pc, #292]	; (8001220 <main+0x368>)
 80010fa:	4a50      	ldr	r2, [pc, #320]	; (800123c <main+0x384>)
 80010fc:	4614      	mov	r4, r2
 80010fe:	f503 7ca0 	add.w	ip, r3, #320	; 0x140
 8001102:	f104 0e20 	add.w	lr, r4, #32
 8001106:	4665      	mov	r5, ip
 8001108:	4626      	mov	r6, r4
 800110a:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800110c:	6028      	str	r0, [r5, #0]
 800110e:	6069      	str	r1, [r5, #4]
 8001110:	60aa      	str	r2, [r5, #8]
 8001112:	60eb      	str	r3, [r5, #12]
 8001114:	3410      	adds	r4, #16
 8001116:	f10c 0c10 	add.w	ip, ip, #16
 800111a:	4574      	cmp	r4, lr
 800111c:	d1f3      	bne.n	8001106 <main+0x24e>
 800111e:	4662      	mov	r2, ip
 8001120:	4623      	mov	r3, r4
 8001122:	cb03      	ldmia	r3!, {r0, r1}
 8001124:	6010      	str	r0, [r2, #0]
 8001126:	6051      	str	r1, [r2, #4]
	memcpy(guideText[9], "                                        ", 40);
 8001128:	4b3d      	ldr	r3, [pc, #244]	; (8001220 <main+0x368>)
 800112a:	4a3f      	ldr	r2, [pc, #252]	; (8001228 <main+0x370>)
 800112c:	4614      	mov	r4, r2
 800112e:	f503 7cb4 	add.w	ip, r3, #360	; 0x168
 8001132:	f104 0e20 	add.w	lr, r4, #32
 8001136:	4665      	mov	r5, ip
 8001138:	4626      	mov	r6, r4
 800113a:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800113c:	6028      	str	r0, [r5, #0]
 800113e:	6069      	str	r1, [r5, #4]
 8001140:	60aa      	str	r2, [r5, #8]
 8001142:	60eb      	str	r3, [r5, #12]
 8001144:	3410      	adds	r4, #16
 8001146:	f10c 0c10 	add.w	ip, ip, #16
 800114a:	4574      	cmp	r4, lr
 800114c:	d1f3      	bne.n	8001136 <main+0x27e>
 800114e:	4662      	mov	r2, ip
 8001150:	4623      	mov	r3, r4
 8001152:	cb03      	ldmia	r3!, {r0, r1}
 8001154:	6010      	str	r0, [r2, #0]
 8001156:	6051      	str	r1, [r2, #4]
	memcpy(guideText[10], "                                        ", 40);
 8001158:	4b31      	ldr	r3, [pc, #196]	; (8001220 <main+0x368>)
 800115a:	4a33      	ldr	r2, [pc, #204]	; (8001228 <main+0x370>)
 800115c:	4614      	mov	r4, r2
 800115e:	f503 7cc8 	add.w	ip, r3, #400	; 0x190
 8001162:	f104 0e20 	add.w	lr, r4, #32
 8001166:	4665      	mov	r5, ip
 8001168:	4626      	mov	r6, r4
 800116a:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800116c:	6028      	str	r0, [r5, #0]
 800116e:	6069      	str	r1, [r5, #4]
 8001170:	60aa      	str	r2, [r5, #8]
 8001172:	60eb      	str	r3, [r5, #12]
 8001174:	3410      	adds	r4, #16
 8001176:	f10c 0c10 	add.w	ip, ip, #16
 800117a:	4574      	cmp	r4, lr
 800117c:	d1f3      	bne.n	8001166 <main+0x2ae>
 800117e:	4662      	mov	r2, ip
 8001180:	4623      	mov	r3, r4
 8001182:	cb03      	ldmia	r3!, {r0, r1}
 8001184:	6010      	str	r0, [r2, #0]
 8001186:	6051      	str	r1, [r2, #4]
	memcpy(guideText[11], "    Control                             ", 40);
 8001188:	4b25      	ldr	r3, [pc, #148]	; (8001220 <main+0x368>)
 800118a:	4a2d      	ldr	r2, [pc, #180]	; (8001240 <main+0x388>)
 800118c:	4614      	mov	r4, r2
 800118e:	f503 7cdc 	add.w	ip, r3, #440	; 0x1b8
 8001192:	f104 0e20 	add.w	lr, r4, #32
 8001196:	4665      	mov	r5, ip
 8001198:	4626      	mov	r6, r4
 800119a:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800119c:	6028      	str	r0, [r5, #0]
 800119e:	6069      	str	r1, [r5, #4]
 80011a0:	60aa      	str	r2, [r5, #8]
 80011a2:	60eb      	str	r3, [r5, #12]
 80011a4:	3410      	adds	r4, #16
 80011a6:	f10c 0c10 	add.w	ip, ip, #16
 80011aa:	4574      	cmp	r4, lr
 80011ac:	d1f3      	bne.n	8001196 <main+0x2de>
 80011ae:	4662      	mov	r2, ip
 80011b0:	4623      	mov	r3, r4
 80011b2:	cb03      	ldmia	r3!, {r0, r1}
 80011b4:	6010      	str	r0, [r2, #0]
 80011b6:	6051      	str	r1, [r2, #4]
	memcpy(guideText[12], "                                        ", 40);
 80011b8:	4b19      	ldr	r3, [pc, #100]	; (8001220 <main+0x368>)
 80011ba:	4a1b      	ldr	r2, [pc, #108]	; (8001228 <main+0x370>)
 80011bc:	4614      	mov	r4, r2
 80011be:	f503 7cf0 	add.w	ip, r3, #480	; 0x1e0
 80011c2:	f104 0e20 	add.w	lr, r4, #32
 80011c6:	4665      	mov	r5, ip
 80011c8:	4626      	mov	r6, r4
 80011ca:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80011cc:	6028      	str	r0, [r5, #0]
 80011ce:	6069      	str	r1, [r5, #4]
 80011d0:	60aa      	str	r2, [r5, #8]
 80011d2:	60eb      	str	r3, [r5, #12]
 80011d4:	3410      	adds	r4, #16
 80011d6:	f10c 0c10 	add.w	ip, ip, #16
 80011da:	4574      	cmp	r4, lr
 80011dc:	d1f3      	bne.n	80011c6 <main+0x30e>
 80011de:	4662      	mov	r2, ip
 80011e0:	4623      	mov	r3, r4
 80011e2:	cb03      	ldmia	r3!, {r0, r1}
 80011e4:	6010      	str	r0, [r2, #0]
 80011e6:	6051      	str	r1, [r2, #4]
	memcpy(guideText[13], "    A - Move left                       ", 40);
 80011e8:	4b0d      	ldr	r3, [pc, #52]	; (8001220 <main+0x368>)
 80011ea:	4a16      	ldr	r2, [pc, #88]	; (8001244 <main+0x38c>)
 80011ec:	4614      	mov	r4, r2
 80011ee:	f503 7c02 	add.w	ip, r3, #520	; 0x208
 80011f2:	f104 0e20 	add.w	lr, r4, #32
 80011f6:	e027      	b.n	8001248 <main+0x390>
 80011f8:	200006dc 	.word	0x200006dc
 80011fc:	08004158 	.word	0x08004158
 8001200:	0800416c 	.word	0x0800416c
 8001204:	08004180 	.word	0x08004180
 8001208:	08004194 	.word	0x08004194
 800120c:	080041a8 	.word	0x080041a8
 8001210:	080041bc 	.word	0x080041bc
 8001214:	080041d0 	.word	0x080041d0
 8001218:	92492493 	.word	0x92492493
 800121c:	20000514 	.word	0x20000514
 8001220:	2000019c 	.word	0x2000019c
 8001224:	080041e4 	.word	0x080041e4
 8001228:	08004210 	.word	0x08004210
 800122c:	0800423c 	.word	0x0800423c
 8001230:	08004268 	.word	0x08004268
 8001234:	08004294 	.word	0x08004294
 8001238:	080042c0 	.word	0x080042c0
 800123c:	080042ec 	.word	0x080042ec
 8001240:	08004318 	.word	0x08004318
 8001244:	08004344 	.word	0x08004344
 8001248:	4665      	mov	r5, ip
 800124a:	4626      	mov	r6, r4
 800124c:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800124e:	6028      	str	r0, [r5, #0]
 8001250:	6069      	str	r1, [r5, #4]
 8001252:	60aa      	str	r2, [r5, #8]
 8001254:	60eb      	str	r3, [r5, #12]
 8001256:	3410      	adds	r4, #16
 8001258:	f10c 0c10 	add.w	ip, ip, #16
 800125c:	4574      	cmp	r4, lr
 800125e:	d1f3      	bne.n	8001248 <main+0x390>
 8001260:	4662      	mov	r2, ip
 8001262:	4623      	mov	r3, r4
 8001264:	cb03      	ldmia	r3!, {r0, r1}
 8001266:	6010      	str	r0, [r2, #0]
 8001268:	6051      	str	r1, [r2, #4]
	memcpy(guideText[14], "                                        ", 40);
 800126a:	4b6d      	ldr	r3, [pc, #436]	; (8001420 <main+0x568>)
 800126c:	4a6d      	ldr	r2, [pc, #436]	; (8001424 <main+0x56c>)
 800126e:	4614      	mov	r4, r2
 8001270:	f503 7c0c 	add.w	ip, r3, #560	; 0x230
 8001274:	f104 0e20 	add.w	lr, r4, #32
 8001278:	4665      	mov	r5, ip
 800127a:	4626      	mov	r6, r4
 800127c:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800127e:	6028      	str	r0, [r5, #0]
 8001280:	6069      	str	r1, [r5, #4]
 8001282:	60aa      	str	r2, [r5, #8]
 8001284:	60eb      	str	r3, [r5, #12]
 8001286:	3410      	adds	r4, #16
 8001288:	f10c 0c10 	add.w	ip, ip, #16
 800128c:	4574      	cmp	r4, lr
 800128e:	d1f3      	bne.n	8001278 <main+0x3c0>
 8001290:	4662      	mov	r2, ip
 8001292:	4623      	mov	r3, r4
 8001294:	cb03      	ldmia	r3!, {r0, r1}
 8001296:	6010      	str	r0, [r2, #0]
 8001298:	6051      	str	r1, [r2, #4]
	memcpy(guideText[15], "    D - Move right                      ", 40);
 800129a:	4b61      	ldr	r3, [pc, #388]	; (8001420 <main+0x568>)
 800129c:	4a62      	ldr	r2, [pc, #392]	; (8001428 <main+0x570>)
 800129e:	4614      	mov	r4, r2
 80012a0:	f503 7c16 	add.w	ip, r3, #600	; 0x258
 80012a4:	f104 0e20 	add.w	lr, r4, #32
 80012a8:	4665      	mov	r5, ip
 80012aa:	4626      	mov	r6, r4
 80012ac:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80012ae:	6028      	str	r0, [r5, #0]
 80012b0:	6069      	str	r1, [r5, #4]
 80012b2:	60aa      	str	r2, [r5, #8]
 80012b4:	60eb      	str	r3, [r5, #12]
 80012b6:	3410      	adds	r4, #16
 80012b8:	f10c 0c10 	add.w	ip, ip, #16
 80012bc:	4574      	cmp	r4, lr
 80012be:	d1f3      	bne.n	80012a8 <main+0x3f0>
 80012c0:	4662      	mov	r2, ip
 80012c2:	4623      	mov	r3, r4
 80012c4:	cb03      	ldmia	r3!, {r0, r1}
 80012c6:	6010      	str	r0, [r2, #0]
 80012c8:	6051      	str	r1, [r2, #4]
	memcpy(guideText[16], "                                        ", 40);
 80012ca:	4b55      	ldr	r3, [pc, #340]	; (8001420 <main+0x568>)
 80012cc:	4a55      	ldr	r2, [pc, #340]	; (8001424 <main+0x56c>)
 80012ce:	4614      	mov	r4, r2
 80012d0:	f503 7c20 	add.w	ip, r3, #640	; 0x280
 80012d4:	f104 0e20 	add.w	lr, r4, #32
 80012d8:	4665      	mov	r5, ip
 80012da:	4626      	mov	r6, r4
 80012dc:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80012de:	6028      	str	r0, [r5, #0]
 80012e0:	6069      	str	r1, [r5, #4]
 80012e2:	60aa      	str	r2, [r5, #8]
 80012e4:	60eb      	str	r3, [r5, #12]
 80012e6:	3410      	adds	r4, #16
 80012e8:	f10c 0c10 	add.w	ip, ip, #16
 80012ec:	4574      	cmp	r4, lr
 80012ee:	d1f3      	bne.n	80012d8 <main+0x420>
 80012f0:	4662      	mov	r2, ip
 80012f2:	4623      	mov	r3, r4
 80012f4:	cb03      	ldmia	r3!, {r0, r1}
 80012f6:	6010      	str	r0, [r2, #0]
 80012f8:	6051      	str	r1, [r2, #4]
	memcpy(guideText[17], "    S - Move down                       ", 40);
 80012fa:	4b49      	ldr	r3, [pc, #292]	; (8001420 <main+0x568>)
 80012fc:	4a4b      	ldr	r2, [pc, #300]	; (800142c <main+0x574>)
 80012fe:	4614      	mov	r4, r2
 8001300:	f503 7c2a 	add.w	ip, r3, #680	; 0x2a8
 8001304:	f104 0e20 	add.w	lr, r4, #32
 8001308:	4665      	mov	r5, ip
 800130a:	4626      	mov	r6, r4
 800130c:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800130e:	6028      	str	r0, [r5, #0]
 8001310:	6069      	str	r1, [r5, #4]
 8001312:	60aa      	str	r2, [r5, #8]
 8001314:	60eb      	str	r3, [r5, #12]
 8001316:	3410      	adds	r4, #16
 8001318:	f10c 0c10 	add.w	ip, ip, #16
 800131c:	4574      	cmp	r4, lr
 800131e:	d1f3      	bne.n	8001308 <main+0x450>
 8001320:	4662      	mov	r2, ip
 8001322:	4623      	mov	r3, r4
 8001324:	cb03      	ldmia	r3!, {r0, r1}
 8001326:	6010      	str	r0, [r2, #0]
 8001328:	6051      	str	r1, [r2, #4]
	memcpy(guideText[18], "                                        ", 40);
 800132a:	4b3d      	ldr	r3, [pc, #244]	; (8001420 <main+0x568>)
 800132c:	4a3d      	ldr	r2, [pc, #244]	; (8001424 <main+0x56c>)
 800132e:	4614      	mov	r4, r2
 8001330:	f503 7c34 	add.w	ip, r3, #720	; 0x2d0
 8001334:	f104 0e20 	add.w	lr, r4, #32
 8001338:	4665      	mov	r5, ip
 800133a:	4626      	mov	r6, r4
 800133c:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800133e:	6028      	str	r0, [r5, #0]
 8001340:	6069      	str	r1, [r5, #4]
 8001342:	60aa      	str	r2, [r5, #8]
 8001344:	60eb      	str	r3, [r5, #12]
 8001346:	3410      	adds	r4, #16
 8001348:	f10c 0c10 	add.w	ip, ip, #16
 800134c:	4574      	cmp	r4, lr
 800134e:	d1f3      	bne.n	8001338 <main+0x480>
 8001350:	4662      	mov	r2, ip
 8001352:	4623      	mov	r3, r4
 8001354:	cb03      	ldmia	r3!, {r0, r1}
 8001356:	6010      	str	r0, [r2, #0]
 8001358:	6051      	str	r1, [r2, #4]
	memcpy(guideText[19], "    J - Rotate counter-clockwise        ", 40);
 800135a:	4b31      	ldr	r3, [pc, #196]	; (8001420 <main+0x568>)
 800135c:	4a34      	ldr	r2, [pc, #208]	; (8001430 <main+0x578>)
 800135e:	4614      	mov	r4, r2
 8001360:	f503 7c3e 	add.w	ip, r3, #760	; 0x2f8
 8001364:	f104 0e20 	add.w	lr, r4, #32
 8001368:	4665      	mov	r5, ip
 800136a:	4626      	mov	r6, r4
 800136c:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800136e:	6028      	str	r0, [r5, #0]
 8001370:	6069      	str	r1, [r5, #4]
 8001372:	60aa      	str	r2, [r5, #8]
 8001374:	60eb      	str	r3, [r5, #12]
 8001376:	3410      	adds	r4, #16
 8001378:	f10c 0c10 	add.w	ip, ip, #16
 800137c:	4574      	cmp	r4, lr
 800137e:	d1f3      	bne.n	8001368 <main+0x4b0>
 8001380:	4662      	mov	r2, ip
 8001382:	4623      	mov	r3, r4
 8001384:	cb03      	ldmia	r3!, {r0, r1}
 8001386:	6010      	str	r0, [r2, #0]
 8001388:	6051      	str	r1, [r2, #4]
	memcpy(guideText[20], "                                        ", 40);
 800138a:	4b25      	ldr	r3, [pc, #148]	; (8001420 <main+0x568>)
 800138c:	4a25      	ldr	r2, [pc, #148]	; (8001424 <main+0x56c>)
 800138e:	4614      	mov	r4, r2
 8001390:	f503 7c48 	add.w	ip, r3, #800	; 0x320
 8001394:	f104 0e20 	add.w	lr, r4, #32
 8001398:	4665      	mov	r5, ip
 800139a:	4626      	mov	r6, r4
 800139c:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800139e:	6028      	str	r0, [r5, #0]
 80013a0:	6069      	str	r1, [r5, #4]
 80013a2:	60aa      	str	r2, [r5, #8]
 80013a4:	60eb      	str	r3, [r5, #12]
 80013a6:	3410      	adds	r4, #16
 80013a8:	f10c 0c10 	add.w	ip, ip, #16
 80013ac:	4574      	cmp	r4, lr
 80013ae:	d1f3      	bne.n	8001398 <main+0x4e0>
 80013b0:	4662      	mov	r2, ip
 80013b2:	4623      	mov	r3, r4
 80013b4:	cb03      	ldmia	r3!, {r0, r1}
 80013b6:	6010      	str	r0, [r2, #0]
 80013b8:	6051      	str	r1, [r2, #4]
	memcpy(guideText[21], "    K - Rotate clockwise                ", 40);
 80013ba:	4b19      	ldr	r3, [pc, #100]	; (8001420 <main+0x568>)
 80013bc:	4a1d      	ldr	r2, [pc, #116]	; (8001434 <main+0x57c>)
 80013be:	4614      	mov	r4, r2
 80013c0:	f503 7c52 	add.w	ip, r3, #840	; 0x348
 80013c4:	f104 0e20 	add.w	lr, r4, #32
 80013c8:	4665      	mov	r5, ip
 80013ca:	4626      	mov	r6, r4
 80013cc:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80013ce:	6028      	str	r0, [r5, #0]
 80013d0:	6069      	str	r1, [r5, #4]
 80013d2:	60aa      	str	r2, [r5, #8]
 80013d4:	60eb      	str	r3, [r5, #12]
 80013d6:	3410      	adds	r4, #16
 80013d8:	f10c 0c10 	add.w	ip, ip, #16
 80013dc:	4574      	cmp	r4, lr
 80013de:	d1f3      	bne.n	80013c8 <main+0x510>
 80013e0:	4662      	mov	r2, ip
 80013e2:	4623      	mov	r3, r4
 80013e4:	cb03      	ldmia	r3!, {r0, r1}
 80013e6:	6010      	str	r0, [r2, #0]
 80013e8:	6051      	str	r1, [r2, #4]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80013ea:	f000 fb21 	bl	8001a30 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80013ee:	f000 f829 	bl	8001444 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80013f2:	f000 f907 	bl	8001604 <MX_GPIO_Init>
  MX_TIM4_Init();
 80013f6:	f000 f88d 	bl	8001514 <MX_TIM4_Init>
  MX_USART2_UART_Init();
 80013fa:	f000 f8d9 	bl	80015b0 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  initGame();
 80013fe:	f7ff fbef 	bl	8000be0 <initGame>
  recursor();
 8001402:	f7ff f869 	bl	80004d8 <recursor>
  clearScreen();
 8001406:	f7ff f875 	bl	80004f4 <clearScreen>
  recursor();
 800140a:	f7ff f865 	bl	80004d8 <recursor>
  HAL_UART_Receive_IT(&huart2, input, sizeof(input));
 800140e:	2201      	movs	r2, #1
 8001410:	4909      	ldr	r1, [pc, #36]	; (8001438 <main+0x580>)
 8001412:	480a      	ldr	r0, [pc, #40]	; (800143c <main+0x584>)
 8001414:	f001 ff5c 	bl	80032d0 <HAL_UART_Receive_IT>
  HAL_TIM_Base_Start_IT(&htim4);
 8001418:	4809      	ldr	r0, [pc, #36]	; (8001440 <main+0x588>)
 800141a:	f001 facc 	bl	80029b6 <HAL_TIM_Base_Start_IT>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800141e:	e7fe      	b.n	800141e <main+0x566>
 8001420:	2000019c 	.word	0x2000019c
 8001424:	08004210 	.word	0x08004210
 8001428:	08004370 	.word	0x08004370
 800142c:	0800439c 	.word	0x0800439c
 8001430:	080043c8 	.word	0x080043c8
 8001434:	080043f4 	.word	0x080043f4
 8001438:	20000198 	.word	0x20000198
 800143c:	2000069c 	.word	0x2000069c
 8001440:	20000158 	.word	0x20000158

08001444 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	b094      	sub	sp, #80	; 0x50
 8001448:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800144a:	f107 0320 	add.w	r3, r7, #32
 800144e:	2230      	movs	r2, #48	; 0x30
 8001450:	2100      	movs	r1, #0
 8001452:	4618      	mov	r0, r3
 8001454:	f002 fdc3 	bl	8003fde <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001458:	f107 030c 	add.w	r3, r7, #12
 800145c:	2200      	movs	r2, #0
 800145e:	601a      	str	r2, [r3, #0]
 8001460:	605a      	str	r2, [r3, #4]
 8001462:	609a      	str	r2, [r3, #8]
 8001464:	60da      	str	r2, [r3, #12]
 8001466:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001468:	2300      	movs	r3, #0
 800146a:	60bb      	str	r3, [r7, #8]
 800146c:	4b27      	ldr	r3, [pc, #156]	; (800150c <SystemClock_Config+0xc8>)
 800146e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001470:	4a26      	ldr	r2, [pc, #152]	; (800150c <SystemClock_Config+0xc8>)
 8001472:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001476:	6413      	str	r3, [r2, #64]	; 0x40
 8001478:	4b24      	ldr	r3, [pc, #144]	; (800150c <SystemClock_Config+0xc8>)
 800147a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800147c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001480:	60bb      	str	r3, [r7, #8]
 8001482:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001484:	2300      	movs	r3, #0
 8001486:	607b      	str	r3, [r7, #4]
 8001488:	4b21      	ldr	r3, [pc, #132]	; (8001510 <SystemClock_Config+0xcc>)
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	4a20      	ldr	r2, [pc, #128]	; (8001510 <SystemClock_Config+0xcc>)
 800148e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001492:	6013      	str	r3, [r2, #0]
 8001494:	4b1e      	ldr	r3, [pc, #120]	; (8001510 <SystemClock_Config+0xcc>)
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800149c:	607b      	str	r3, [r7, #4]
 800149e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80014a0:	2302      	movs	r3, #2
 80014a2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80014a4:	2301      	movs	r3, #1
 80014a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80014a8:	2310      	movs	r3, #16
 80014aa:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80014ac:	2302      	movs	r3, #2
 80014ae:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80014b0:	2300      	movs	r3, #0
 80014b2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80014b4:	2308      	movs	r3, #8
 80014b6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 60;
 80014b8:	233c      	movs	r3, #60	; 0x3c
 80014ba:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80014bc:	2302      	movs	r3, #2
 80014be:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80014c0:	2304      	movs	r3, #4
 80014c2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80014c4:	f107 0320 	add.w	r3, r7, #32
 80014c8:	4618      	mov	r0, r3
 80014ca:	f000 fe0d 	bl	80020e8 <HAL_RCC_OscConfig>
 80014ce:	4603      	mov	r3, r0
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d001      	beq.n	80014d8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80014d4:	f000 f956 	bl	8001784 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80014d8:	230f      	movs	r3, #15
 80014da:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80014dc:	2302      	movs	r3, #2
 80014de:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80014e0:	2300      	movs	r3, #0
 80014e2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80014e4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80014e8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80014ea:	2300      	movs	r3, #0
 80014ec:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80014ee:	f107 030c 	add.w	r3, r7, #12
 80014f2:	2101      	movs	r1, #1
 80014f4:	4618      	mov	r0, r3
 80014f6:	f001 f867 	bl	80025c8 <HAL_RCC_ClockConfig>
 80014fa:	4603      	mov	r3, r0
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d001      	beq.n	8001504 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001500:	f000 f940 	bl	8001784 <Error_Handler>
  }
}
 8001504:	bf00      	nop
 8001506:	3750      	adds	r7, #80	; 0x50
 8001508:	46bd      	mov	sp, r7
 800150a:	bd80      	pop	{r7, pc}
 800150c:	40023800 	.word	0x40023800
 8001510:	40007000 	.word	0x40007000

08001514 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	b086      	sub	sp, #24
 8001518:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800151a:	f107 0308 	add.w	r3, r7, #8
 800151e:	2200      	movs	r2, #0
 8001520:	601a      	str	r2, [r3, #0]
 8001522:	605a      	str	r2, [r3, #4]
 8001524:	609a      	str	r2, [r3, #8]
 8001526:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001528:	463b      	mov	r3, r7
 800152a:	2200      	movs	r2, #0
 800152c:	601a      	str	r2, [r3, #0]
 800152e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001530:	4b1d      	ldr	r3, [pc, #116]	; (80015a8 <MX_TIM4_Init+0x94>)
 8001532:	4a1e      	ldr	r2, [pc, #120]	; (80015ac <MX_TIM4_Init+0x98>)
 8001534:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 60000;
 8001536:	4b1c      	ldr	r3, [pc, #112]	; (80015a8 <MX_TIM4_Init+0x94>)
 8001538:	f64e 2260 	movw	r2, #60000	; 0xea60
 800153c:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800153e:	4b1a      	ldr	r3, [pc, #104]	; (80015a8 <MX_TIM4_Init+0x94>)
 8001540:	2200      	movs	r2, #0
 8001542:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1000;
 8001544:	4b18      	ldr	r3, [pc, #96]	; (80015a8 <MX_TIM4_Init+0x94>)
 8001546:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800154a:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800154c:	4b16      	ldr	r3, [pc, #88]	; (80015a8 <MX_TIM4_Init+0x94>)
 800154e:	2200      	movs	r2, #0
 8001550:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001552:	4b15      	ldr	r3, [pc, #84]	; (80015a8 <MX_TIM4_Init+0x94>)
 8001554:	2200      	movs	r2, #0
 8001556:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001558:	4813      	ldr	r0, [pc, #76]	; (80015a8 <MX_TIM4_Init+0x94>)
 800155a:	f001 fa01 	bl	8002960 <HAL_TIM_Base_Init>
 800155e:	4603      	mov	r3, r0
 8001560:	2b00      	cmp	r3, #0
 8001562:	d001      	beq.n	8001568 <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 8001564:	f000 f90e 	bl	8001784 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001568:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800156c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800156e:	f107 0308 	add.w	r3, r7, #8
 8001572:	4619      	mov	r1, r3
 8001574:	480c      	ldr	r0, [pc, #48]	; (80015a8 <MX_TIM4_Init+0x94>)
 8001576:	f001 fb4a 	bl	8002c0e <HAL_TIM_ConfigClockSource>
 800157a:	4603      	mov	r3, r0
 800157c:	2b00      	cmp	r3, #0
 800157e:	d001      	beq.n	8001584 <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 8001580:	f000 f900 	bl	8001784 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001584:	2300      	movs	r3, #0
 8001586:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001588:	2300      	movs	r3, #0
 800158a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800158c:	463b      	mov	r3, r7
 800158e:	4619      	mov	r1, r3
 8001590:	4805      	ldr	r0, [pc, #20]	; (80015a8 <MX_TIM4_Init+0x94>)
 8001592:	f001 fd35 	bl	8003000 <HAL_TIMEx_MasterConfigSynchronization>
 8001596:	4603      	mov	r3, r0
 8001598:	2b00      	cmp	r3, #0
 800159a:	d001      	beq.n	80015a0 <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 800159c:	f000 f8f2 	bl	8001784 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80015a0:	bf00      	nop
 80015a2:	3718      	adds	r7, #24
 80015a4:	46bd      	mov	sp, r7
 80015a6:	bd80      	pop	{r7, pc}
 80015a8:	20000158 	.word	0x20000158
 80015ac:	40000800 	.word	0x40000800

080015b0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80015b4:	4b11      	ldr	r3, [pc, #68]	; (80015fc <MX_USART2_UART_Init+0x4c>)
 80015b6:	4a12      	ldr	r2, [pc, #72]	; (8001600 <MX_USART2_UART_Init+0x50>)
 80015b8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 460800;
 80015ba:	4b10      	ldr	r3, [pc, #64]	; (80015fc <MX_USART2_UART_Init+0x4c>)
 80015bc:	f44f 22e1 	mov.w	r2, #460800	; 0x70800
 80015c0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80015c2:	4b0e      	ldr	r3, [pc, #56]	; (80015fc <MX_USART2_UART_Init+0x4c>)
 80015c4:	2200      	movs	r2, #0
 80015c6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80015c8:	4b0c      	ldr	r3, [pc, #48]	; (80015fc <MX_USART2_UART_Init+0x4c>)
 80015ca:	2200      	movs	r2, #0
 80015cc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80015ce:	4b0b      	ldr	r3, [pc, #44]	; (80015fc <MX_USART2_UART_Init+0x4c>)
 80015d0:	2200      	movs	r2, #0
 80015d2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80015d4:	4b09      	ldr	r3, [pc, #36]	; (80015fc <MX_USART2_UART_Init+0x4c>)
 80015d6:	220c      	movs	r2, #12
 80015d8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80015da:	4b08      	ldr	r3, [pc, #32]	; (80015fc <MX_USART2_UART_Init+0x4c>)
 80015dc:	2200      	movs	r2, #0
 80015de:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80015e0:	4b06      	ldr	r3, [pc, #24]	; (80015fc <MX_USART2_UART_Init+0x4c>)
 80015e2:	2200      	movs	r2, #0
 80015e4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80015e6:	4805      	ldr	r0, [pc, #20]	; (80015fc <MX_USART2_UART_Init+0x4c>)
 80015e8:	f001 fd8c 	bl	8003104 <HAL_UART_Init>
 80015ec:	4603      	mov	r3, r0
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d001      	beq.n	80015f6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80015f2:	f000 f8c7 	bl	8001784 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80015f6:	bf00      	nop
 80015f8:	bd80      	pop	{r7, pc}
 80015fa:	bf00      	nop
 80015fc:	2000069c 	.word	0x2000069c
 8001600:	40004400 	.word	0x40004400

08001604 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	b086      	sub	sp, #24
 8001608:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800160a:	1d3b      	adds	r3, r7, #4
 800160c:	2200      	movs	r2, #0
 800160e:	601a      	str	r2, [r3, #0]
 8001610:	605a      	str	r2, [r3, #4]
 8001612:	609a      	str	r2, [r3, #8]
 8001614:	60da      	str	r2, [r3, #12]
 8001616:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001618:	2300      	movs	r3, #0
 800161a:	603b      	str	r3, [r7, #0]
 800161c:	4b10      	ldr	r3, [pc, #64]	; (8001660 <MX_GPIO_Init+0x5c>)
 800161e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001620:	4a0f      	ldr	r2, [pc, #60]	; (8001660 <MX_GPIO_Init+0x5c>)
 8001622:	f043 0301 	orr.w	r3, r3, #1
 8001626:	6313      	str	r3, [r2, #48]	; 0x30
 8001628:	4b0d      	ldr	r3, [pc, #52]	; (8001660 <MX_GPIO_Init+0x5c>)
 800162a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800162c:	f003 0301 	and.w	r3, r3, #1
 8001630:	603b      	str	r3, [r7, #0]
 8001632:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8001634:	2200      	movs	r2, #0
 8001636:	2120      	movs	r1, #32
 8001638:	480a      	ldr	r0, [pc, #40]	; (8001664 <MX_GPIO_Init+0x60>)
 800163a:	f000 fd21 	bl	8002080 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 800163e:	2320      	movs	r3, #32
 8001640:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001642:	2301      	movs	r3, #1
 8001644:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001646:	2300      	movs	r3, #0
 8001648:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800164a:	2300      	movs	r3, #0
 800164c:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800164e:	1d3b      	adds	r3, r7, #4
 8001650:	4619      	mov	r1, r3
 8001652:	4804      	ldr	r0, [pc, #16]	; (8001664 <MX_GPIO_Init+0x60>)
 8001654:	f000 fb92 	bl	8001d7c <HAL_GPIO_Init>

}
 8001658:	bf00      	nop
 800165a:	3718      	adds	r7, #24
 800165c:	46bd      	mov	sp, r7
 800165e:	bd80      	pop	{r7, pc}
 8001660:	40023800 	.word	0x40023800
 8001664:	40020000 	.word	0x40020000

08001668 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8001668:	b580      	push	{r7, lr}
 800166a:	b082      	sub	sp, #8
 800166c:	af00      	add	r7, sp, #0
 800166e:	6078      	str	r0, [r7, #4]
	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8001670:	2120      	movs	r1, #32
 8001672:	483d      	ldr	r0, [pc, #244]	; (8001768 <HAL_UART_RxCpltCallback+0x100>)
 8001674:	f000 fd1d 	bl	80020b2 <HAL_GPIO_TogglePin>
	//IF press right arrow
	if (!gameOver) {
 8001678:	4b3c      	ldr	r3, [pc, #240]	; (800176c <HAL_UART_RxCpltCallback+0x104>)
 800167a:	781b      	ldrb	r3, [r3, #0]
 800167c:	2b00      	cmp	r3, #0
 800167e:	d164      	bne.n	800174a <HAL_UART_RxCpltCallback+0xe2>
		if (input[0] == 'd' && canMove(1)) {
 8001680:	4b3b      	ldr	r3, [pc, #236]	; (8001770 <HAL_UART_RxCpltCallback+0x108>)
 8001682:	781b      	ldrb	r3, [r3, #0]
 8001684:	2b64      	cmp	r3, #100	; 0x64
 8001686:	d110      	bne.n	80016aa <HAL_UART_RxCpltCallback+0x42>
 8001688:	2001      	movs	r0, #1
 800168a:	f7ff f86d 	bl	8000768 <canMove>
 800168e:	4603      	mov	r3, r0
 8001690:	2b00      	cmp	r3, #0
 8001692:	d00a      	beq.n	80016aa <HAL_UART_RxCpltCallback+0x42>
			curX++;
 8001694:	4b37      	ldr	r3, [pc, #220]	; (8001774 <HAL_UART_RxCpltCallback+0x10c>)
 8001696:	881b      	ldrh	r3, [r3, #0]
 8001698:	3301      	adds	r3, #1
 800169a:	b29a      	uxth	r2, r3
 800169c:	4b35      	ldr	r3, [pc, #212]	; (8001774 <HAL_UART_RxCpltCallback+0x10c>)
 800169e:	801a      	strh	r2, [r3, #0]
			recursor();
 80016a0:	f7fe ff1a 	bl	80004d8 <recursor>
			display();
 80016a4:	f7fe ff4a 	bl	800053c <display>
 80016a8:	e055      	b.n	8001756 <HAL_UART_RxCpltCallback+0xee>
		//If press left arrow
		} else if (input[0] == 'a' && canMove(2)){
 80016aa:	4b31      	ldr	r3, [pc, #196]	; (8001770 <HAL_UART_RxCpltCallback+0x108>)
 80016ac:	781b      	ldrb	r3, [r3, #0]
 80016ae:	2b61      	cmp	r3, #97	; 0x61
 80016b0:	d110      	bne.n	80016d4 <HAL_UART_RxCpltCallback+0x6c>
 80016b2:	2002      	movs	r0, #2
 80016b4:	f7ff f858 	bl	8000768 <canMove>
 80016b8:	4603      	mov	r3, r0
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d00a      	beq.n	80016d4 <HAL_UART_RxCpltCallback+0x6c>
			curX--;
 80016be:	4b2d      	ldr	r3, [pc, #180]	; (8001774 <HAL_UART_RxCpltCallback+0x10c>)
 80016c0:	881b      	ldrh	r3, [r3, #0]
 80016c2:	3b01      	subs	r3, #1
 80016c4:	b29a      	uxth	r2, r3
 80016c6:	4b2b      	ldr	r3, [pc, #172]	; (8001774 <HAL_UART_RxCpltCallback+0x10c>)
 80016c8:	801a      	strh	r2, [r3, #0]
			recursor();
 80016ca:	f7fe ff05 	bl	80004d8 <recursor>
			display();
 80016ce:	f7fe ff35 	bl	800053c <display>
 80016d2:	e040      	b.n	8001756 <HAL_UART_RxCpltCallback+0xee>
		//If press down arrow
		} else if (input[0] == 's' && canMove(0)){
 80016d4:	4b26      	ldr	r3, [pc, #152]	; (8001770 <HAL_UART_RxCpltCallback+0x108>)
 80016d6:	781b      	ldrb	r3, [r3, #0]
 80016d8:	2b73      	cmp	r3, #115	; 0x73
 80016da:	d110      	bne.n	80016fe <HAL_UART_RxCpltCallback+0x96>
 80016dc:	2000      	movs	r0, #0
 80016de:	f7ff f843 	bl	8000768 <canMove>
 80016e2:	4603      	mov	r3, r0
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d00a      	beq.n	80016fe <HAL_UART_RxCpltCallback+0x96>
			curY++;
 80016e8:	4b23      	ldr	r3, [pc, #140]	; (8001778 <HAL_UART_RxCpltCallback+0x110>)
 80016ea:	881b      	ldrh	r3, [r3, #0]
 80016ec:	3301      	adds	r3, #1
 80016ee:	b29a      	uxth	r2, r3
 80016f0:	4b21      	ldr	r3, [pc, #132]	; (8001778 <HAL_UART_RxCpltCallback+0x110>)
 80016f2:	801a      	strh	r2, [r3, #0]
			recursor();
 80016f4:	f7fe fef0 	bl	80004d8 <recursor>
			display();
 80016f8:	f7fe ff20 	bl	800053c <display>
 80016fc:	e02b      	b.n	8001756 <HAL_UART_RxCpltCallback+0xee>
		//If press j (rotate counter-clockwise)
		} else if (input[0] == 'j' && canRotate(0)) {
 80016fe:	4b1c      	ldr	r3, [pc, #112]	; (8001770 <HAL_UART_RxCpltCallback+0x108>)
 8001700:	781b      	ldrb	r3, [r3, #0]
 8001702:	2b6a      	cmp	r3, #106	; 0x6a
 8001704:	d10e      	bne.n	8001724 <HAL_UART_RxCpltCallback+0xbc>
 8001706:	2000      	movs	r0, #0
 8001708:	f7ff f8dc 	bl	80008c4 <canRotate>
 800170c:	4603      	mov	r3, r0
 800170e:	2b00      	cmp	r3, #0
 8001710:	d008      	beq.n	8001724 <HAL_UART_RxCpltCallback+0xbc>
			rotate(curTeTro, 0);
 8001712:	2100      	movs	r1, #0
 8001714:	4819      	ldr	r0, [pc, #100]	; (800177c <HAL_UART_RxCpltCallback+0x114>)
 8001716:	f7fe ffc5 	bl	80006a4 <rotate>
			recursor();
 800171a:	f7fe fedd 	bl	80004d8 <recursor>
			display();
 800171e:	f7fe ff0d 	bl	800053c <display>
 8001722:	e018      	b.n	8001756 <HAL_UART_RxCpltCallback+0xee>
		//If press k (rotate clockwise)
		} else if (input[0] == 'k' && canRotate(1)) {
 8001724:	4b12      	ldr	r3, [pc, #72]	; (8001770 <HAL_UART_RxCpltCallback+0x108>)
 8001726:	781b      	ldrb	r3, [r3, #0]
 8001728:	2b6b      	cmp	r3, #107	; 0x6b
 800172a:	d114      	bne.n	8001756 <HAL_UART_RxCpltCallback+0xee>
 800172c:	2001      	movs	r0, #1
 800172e:	f7ff f8c9 	bl	80008c4 <canRotate>
 8001732:	4603      	mov	r3, r0
 8001734:	2b00      	cmp	r3, #0
 8001736:	d00e      	beq.n	8001756 <HAL_UART_RxCpltCallback+0xee>
			rotate(curTeTro, 1);
 8001738:	2101      	movs	r1, #1
 800173a:	4810      	ldr	r0, [pc, #64]	; (800177c <HAL_UART_RxCpltCallback+0x114>)
 800173c:	f7fe ffb2 	bl	80006a4 <rotate>
			recursor();
 8001740:	f7fe feca 	bl	80004d8 <recursor>
			display();
 8001744:	f7fe fefa 	bl	800053c <display>
 8001748:	e005      	b.n	8001756 <HAL_UART_RxCpltCallback+0xee>
		}
	} else if (input[0] == ' ') {
 800174a:	4b09      	ldr	r3, [pc, #36]	; (8001770 <HAL_UART_RxCpltCallback+0x108>)
 800174c:	781b      	ldrb	r3, [r3, #0]
 800174e:	2b20      	cmp	r3, #32
 8001750:	d101      	bne.n	8001756 <HAL_UART_RxCpltCallback+0xee>
		initGame();
 8001752:	f7ff fa45 	bl	8000be0 <initGame>
	}
	HAL_UART_Receive_IT(&huart2, input, sizeof(input));
 8001756:	2201      	movs	r2, #1
 8001758:	4905      	ldr	r1, [pc, #20]	; (8001770 <HAL_UART_RxCpltCallback+0x108>)
 800175a:	4809      	ldr	r0, [pc, #36]	; (8001780 <HAL_UART_RxCpltCallback+0x118>)
 800175c:	f001 fdb8 	bl	80032d0 <HAL_UART_Receive_IT>
}
 8001760:	bf00      	nop
 8001762:	3708      	adds	r7, #8
 8001764:	46bd      	mov	sp, r7
 8001766:	bd80      	pop	{r7, pc}
 8001768:	40020000 	.word	0x40020000
 800176c:	20000146 	.word	0x20000146
 8001770:	20000198 	.word	0x20000198
 8001774:	200000b2 	.word	0x200000b2
 8001778:	20000148 	.word	0x20000148
 800177c:	20000514 	.word	0x20000514
 8001780:	2000069c 	.word	0x2000069c

08001784 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001784:	b480      	push	{r7}
 8001786:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001788:	bf00      	nop
 800178a:	46bd      	mov	sp, r7
 800178c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001790:	4770      	bx	lr
	...

08001794 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001794:	b480      	push	{r7}
 8001796:	b083      	sub	sp, #12
 8001798:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800179a:	2300      	movs	r3, #0
 800179c:	607b      	str	r3, [r7, #4]
 800179e:	4b10      	ldr	r3, [pc, #64]	; (80017e0 <HAL_MspInit+0x4c>)
 80017a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017a2:	4a0f      	ldr	r2, [pc, #60]	; (80017e0 <HAL_MspInit+0x4c>)
 80017a4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80017a8:	6453      	str	r3, [r2, #68]	; 0x44
 80017aa:	4b0d      	ldr	r3, [pc, #52]	; (80017e0 <HAL_MspInit+0x4c>)
 80017ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017ae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80017b2:	607b      	str	r3, [r7, #4]
 80017b4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80017b6:	2300      	movs	r3, #0
 80017b8:	603b      	str	r3, [r7, #0]
 80017ba:	4b09      	ldr	r3, [pc, #36]	; (80017e0 <HAL_MspInit+0x4c>)
 80017bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017be:	4a08      	ldr	r2, [pc, #32]	; (80017e0 <HAL_MspInit+0x4c>)
 80017c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017c4:	6413      	str	r3, [r2, #64]	; 0x40
 80017c6:	4b06      	ldr	r3, [pc, #24]	; (80017e0 <HAL_MspInit+0x4c>)
 80017c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017ce:	603b      	str	r3, [r7, #0]
 80017d0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80017d2:	bf00      	nop
 80017d4:	370c      	adds	r7, #12
 80017d6:	46bd      	mov	sp, r7
 80017d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017dc:	4770      	bx	lr
 80017de:	bf00      	nop
 80017e0:	40023800 	.word	0x40023800

080017e4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80017e4:	b580      	push	{r7, lr}
 80017e6:	b084      	sub	sp, #16
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	4a0e      	ldr	r2, [pc, #56]	; (800182c <HAL_TIM_Base_MspInit+0x48>)
 80017f2:	4293      	cmp	r3, r2
 80017f4:	d115      	bne.n	8001822 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 80017f6:	2300      	movs	r3, #0
 80017f8:	60fb      	str	r3, [r7, #12]
 80017fa:	4b0d      	ldr	r3, [pc, #52]	; (8001830 <HAL_TIM_Base_MspInit+0x4c>)
 80017fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017fe:	4a0c      	ldr	r2, [pc, #48]	; (8001830 <HAL_TIM_Base_MspInit+0x4c>)
 8001800:	f043 0304 	orr.w	r3, r3, #4
 8001804:	6413      	str	r3, [r2, #64]	; 0x40
 8001806:	4b0a      	ldr	r3, [pc, #40]	; (8001830 <HAL_TIM_Base_MspInit+0x4c>)
 8001808:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800180a:	f003 0304 	and.w	r3, r3, #4
 800180e:	60fb      	str	r3, [r7, #12]
 8001810:	68fb      	ldr	r3, [r7, #12]
    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8001812:	2200      	movs	r2, #0
 8001814:	2100      	movs	r1, #0
 8001816:	201e      	movs	r0, #30
 8001818:	f000 fa57 	bl	8001cca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 800181c:	201e      	movs	r0, #30
 800181e:	f000 fa70 	bl	8001d02 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8001822:	bf00      	nop
 8001824:	3710      	adds	r7, #16
 8001826:	46bd      	mov	sp, r7
 8001828:	bd80      	pop	{r7, pc}
 800182a:	bf00      	nop
 800182c:	40000800 	.word	0x40000800
 8001830:	40023800 	.word	0x40023800

08001834 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	b08a      	sub	sp, #40	; 0x28
 8001838:	af00      	add	r7, sp, #0
 800183a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800183c:	f107 0314 	add.w	r3, r7, #20
 8001840:	2200      	movs	r2, #0
 8001842:	601a      	str	r2, [r3, #0]
 8001844:	605a      	str	r2, [r3, #4]
 8001846:	609a      	str	r2, [r3, #8]
 8001848:	60da      	str	r2, [r3, #12]
 800184a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	4a1d      	ldr	r2, [pc, #116]	; (80018c8 <HAL_UART_MspInit+0x94>)
 8001852:	4293      	cmp	r3, r2
 8001854:	d133      	bne.n	80018be <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001856:	2300      	movs	r3, #0
 8001858:	613b      	str	r3, [r7, #16]
 800185a:	4b1c      	ldr	r3, [pc, #112]	; (80018cc <HAL_UART_MspInit+0x98>)
 800185c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800185e:	4a1b      	ldr	r2, [pc, #108]	; (80018cc <HAL_UART_MspInit+0x98>)
 8001860:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001864:	6413      	str	r3, [r2, #64]	; 0x40
 8001866:	4b19      	ldr	r3, [pc, #100]	; (80018cc <HAL_UART_MspInit+0x98>)
 8001868:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800186a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800186e:	613b      	str	r3, [r7, #16]
 8001870:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001872:	2300      	movs	r3, #0
 8001874:	60fb      	str	r3, [r7, #12]
 8001876:	4b15      	ldr	r3, [pc, #84]	; (80018cc <HAL_UART_MspInit+0x98>)
 8001878:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800187a:	4a14      	ldr	r2, [pc, #80]	; (80018cc <HAL_UART_MspInit+0x98>)
 800187c:	f043 0301 	orr.w	r3, r3, #1
 8001880:	6313      	str	r3, [r2, #48]	; 0x30
 8001882:	4b12      	ldr	r3, [pc, #72]	; (80018cc <HAL_UART_MspInit+0x98>)
 8001884:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001886:	f003 0301 	and.w	r3, r3, #1
 800188a:	60fb      	str	r3, [r7, #12]
 800188c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800188e:	230c      	movs	r3, #12
 8001890:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001892:	2302      	movs	r3, #2
 8001894:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001896:	2300      	movs	r3, #0
 8001898:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800189a:	2303      	movs	r3, #3
 800189c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800189e:	2307      	movs	r3, #7
 80018a0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018a2:	f107 0314 	add.w	r3, r7, #20
 80018a6:	4619      	mov	r1, r3
 80018a8:	4809      	ldr	r0, [pc, #36]	; (80018d0 <HAL_UART_MspInit+0x9c>)
 80018aa:	f000 fa67 	bl	8001d7c <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80018ae:	2200      	movs	r2, #0
 80018b0:	2100      	movs	r1, #0
 80018b2:	2026      	movs	r0, #38	; 0x26
 80018b4:	f000 fa09 	bl	8001cca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80018b8:	2026      	movs	r0, #38	; 0x26
 80018ba:	f000 fa22 	bl	8001d02 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80018be:	bf00      	nop
 80018c0:	3728      	adds	r7, #40	; 0x28
 80018c2:	46bd      	mov	sp, r7
 80018c4:	bd80      	pop	{r7, pc}
 80018c6:	bf00      	nop
 80018c8:	40004400 	.word	0x40004400
 80018cc:	40023800 	.word	0x40023800
 80018d0:	40020000 	.word	0x40020000

080018d4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80018d4:	b480      	push	{r7}
 80018d6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80018d8:	bf00      	nop
 80018da:	46bd      	mov	sp, r7
 80018dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e0:	4770      	bx	lr

080018e2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80018e2:	b480      	push	{r7}
 80018e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80018e6:	e7fe      	b.n	80018e6 <HardFault_Handler+0x4>

080018e8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80018e8:	b480      	push	{r7}
 80018ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80018ec:	e7fe      	b.n	80018ec <MemManage_Handler+0x4>

080018ee <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80018ee:	b480      	push	{r7}
 80018f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80018f2:	e7fe      	b.n	80018f2 <BusFault_Handler+0x4>

080018f4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80018f4:	b480      	push	{r7}
 80018f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80018f8:	e7fe      	b.n	80018f8 <UsageFault_Handler+0x4>

080018fa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80018fa:	b480      	push	{r7}
 80018fc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80018fe:	bf00      	nop
 8001900:	46bd      	mov	sp, r7
 8001902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001906:	4770      	bx	lr

08001908 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001908:	b480      	push	{r7}
 800190a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800190c:	bf00      	nop
 800190e:	46bd      	mov	sp, r7
 8001910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001914:	4770      	bx	lr

08001916 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001916:	b480      	push	{r7}
 8001918:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800191a:	bf00      	nop
 800191c:	46bd      	mov	sp, r7
 800191e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001922:	4770      	bx	lr

08001924 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001924:	b580      	push	{r7, lr}
 8001926:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001928:	f000 f8d4 	bl	8001ad4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800192c:	bf00      	nop
 800192e:	bd80      	pop	{r7, pc}

08001930 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001930:	b580      	push	{r7, lr}
 8001932:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001934:	4802      	ldr	r0, [pc, #8]	; (8001940 <TIM4_IRQHandler+0x10>)
 8001936:	f001 f862 	bl	80029fe <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800193a:	bf00      	nop
 800193c:	bd80      	pop	{r7, pc}
 800193e:	bf00      	nop
 8001940:	20000158 	.word	0x20000158

08001944 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001948:	4802      	ldr	r0, [pc, #8]	; (8001954 <USART2_IRQHandler+0x10>)
 800194a:	f001 fd17 	bl	800337c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800194e:	bf00      	nop
 8001950:	bd80      	pop	{r7, pc}
 8001952:	bf00      	nop
 8001954:	2000069c 	.word	0x2000069c

08001958 <_sbrk>:
 8001958:	b580      	push	{r7, lr}
 800195a:	b084      	sub	sp, #16
 800195c:	af00      	add	r7, sp, #0
 800195e:	6078      	str	r0, [r7, #4]
 8001960:	4b11      	ldr	r3, [pc, #68]	; (80019a8 <_sbrk+0x50>)
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	2b00      	cmp	r3, #0
 8001966:	d102      	bne.n	800196e <_sbrk+0x16>
 8001968:	4b0f      	ldr	r3, [pc, #60]	; (80019a8 <_sbrk+0x50>)
 800196a:	4a10      	ldr	r2, [pc, #64]	; (80019ac <_sbrk+0x54>)
 800196c:	601a      	str	r2, [r3, #0]
 800196e:	4b0e      	ldr	r3, [pc, #56]	; (80019a8 <_sbrk+0x50>)
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	60fb      	str	r3, [r7, #12]
 8001974:	4b0c      	ldr	r3, [pc, #48]	; (80019a8 <_sbrk+0x50>)
 8001976:	681a      	ldr	r2, [r3, #0]
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	4413      	add	r3, r2
 800197c:	466a      	mov	r2, sp
 800197e:	4293      	cmp	r3, r2
 8001980:	d907      	bls.n	8001992 <_sbrk+0x3a>
 8001982:	f002 faf7 	bl	8003f74 <__errno>
 8001986:	4602      	mov	r2, r0
 8001988:	230c      	movs	r3, #12
 800198a:	6013      	str	r3, [r2, #0]
 800198c:	f04f 33ff 	mov.w	r3, #4294967295
 8001990:	e006      	b.n	80019a0 <_sbrk+0x48>
 8001992:	4b05      	ldr	r3, [pc, #20]	; (80019a8 <_sbrk+0x50>)
 8001994:	681a      	ldr	r2, [r3, #0]
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	4413      	add	r3, r2
 800199a:	4a03      	ldr	r2, [pc, #12]	; (80019a8 <_sbrk+0x50>)
 800199c:	6013      	str	r3, [r2, #0]
 800199e:	68fb      	ldr	r3, [r7, #12]
 80019a0:	4618      	mov	r0, r3
 80019a2:	3710      	adds	r7, #16
 80019a4:	46bd      	mov	sp, r7
 80019a6:	bd80      	pop	{r7, pc}
 80019a8:	2000014c 	.word	0x2000014c
 80019ac:	20000758 	.word	0x20000758

080019b0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80019b0:	b480      	push	{r7}
 80019b2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80019b4:	4b08      	ldr	r3, [pc, #32]	; (80019d8 <SystemInit+0x28>)
 80019b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80019ba:	4a07      	ldr	r2, [pc, #28]	; (80019d8 <SystemInit+0x28>)
 80019bc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80019c0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80019c4:	4b04      	ldr	r3, [pc, #16]	; (80019d8 <SystemInit+0x28>)
 80019c6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80019ca:	609a      	str	r2, [r3, #8]
#endif
}
 80019cc:	bf00      	nop
 80019ce:	46bd      	mov	sp, r7
 80019d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d4:	4770      	bx	lr
 80019d6:	bf00      	nop
 80019d8:	e000ed00 	.word	0xe000ed00

080019dc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80019dc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001a14 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80019e0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80019e2:	e003      	b.n	80019ec <LoopCopyDataInit>

080019e4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80019e4:	4b0c      	ldr	r3, [pc, #48]	; (8001a18 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80019e6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80019e8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80019ea:	3104      	adds	r1, #4

080019ec <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80019ec:	480b      	ldr	r0, [pc, #44]	; (8001a1c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80019ee:	4b0c      	ldr	r3, [pc, #48]	; (8001a20 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80019f0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80019f2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80019f4:	d3f6      	bcc.n	80019e4 <CopyDataInit>
  ldr  r2, =_sbss
 80019f6:	4a0b      	ldr	r2, [pc, #44]	; (8001a24 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80019f8:	e002      	b.n	8001a00 <LoopFillZerobss>

080019fa <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80019fa:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80019fc:	f842 3b04 	str.w	r3, [r2], #4

08001a00 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001a00:	4b09      	ldr	r3, [pc, #36]	; (8001a28 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001a02:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001a04:	d3f9      	bcc.n	80019fa <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001a06:	f7ff ffd3 	bl	80019b0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001a0a:	f002 fab9 	bl	8003f80 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001a0e:	f7ff fa53 	bl	8000eb8 <main>
  bx  lr    
 8001a12:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001a14:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8001a18:	08004448 	.word	0x08004448
  ldr  r0, =_sdata
 8001a1c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001a20:	20000128 	.word	0x20000128
  ldr  r2, =_sbss
 8001a24:	20000128 	.word	0x20000128
  ldr  r3, = _ebss
 8001a28:	20000754 	.word	0x20000754

08001a2c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001a2c:	e7fe      	b.n	8001a2c <ADC_IRQHandler>
	...

08001a30 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001a34:	4b0e      	ldr	r3, [pc, #56]	; (8001a70 <HAL_Init+0x40>)
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	4a0d      	ldr	r2, [pc, #52]	; (8001a70 <HAL_Init+0x40>)
 8001a3a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001a3e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001a40:	4b0b      	ldr	r3, [pc, #44]	; (8001a70 <HAL_Init+0x40>)
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	4a0a      	ldr	r2, [pc, #40]	; (8001a70 <HAL_Init+0x40>)
 8001a46:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001a4a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001a4c:	4b08      	ldr	r3, [pc, #32]	; (8001a70 <HAL_Init+0x40>)
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	4a07      	ldr	r2, [pc, #28]	; (8001a70 <HAL_Init+0x40>)
 8001a52:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a56:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a58:	2003      	movs	r0, #3
 8001a5a:	f000 f92b 	bl	8001cb4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001a5e:	2000      	movs	r0, #0
 8001a60:	f000 f808 	bl	8001a74 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001a64:	f7ff fe96 	bl	8001794 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001a68:	2300      	movs	r3, #0
}
 8001a6a:	4618      	mov	r0, r3
 8001a6c:	bd80      	pop	{r7, pc}
 8001a6e:	bf00      	nop
 8001a70:	40023c00 	.word	0x40023c00

08001a74 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a74:	b580      	push	{r7, lr}
 8001a76:	b082      	sub	sp, #8
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001a7c:	4b12      	ldr	r3, [pc, #72]	; (8001ac8 <HAL_InitTick+0x54>)
 8001a7e:	681a      	ldr	r2, [r3, #0]
 8001a80:	4b12      	ldr	r3, [pc, #72]	; (8001acc <HAL_InitTick+0x58>)
 8001a82:	781b      	ldrb	r3, [r3, #0]
 8001a84:	4619      	mov	r1, r3
 8001a86:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a8a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001a8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a92:	4618      	mov	r0, r3
 8001a94:	f000 f943 	bl	8001d1e <HAL_SYSTICK_Config>
 8001a98:	4603      	mov	r3, r0
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d001      	beq.n	8001aa2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001a9e:	2301      	movs	r3, #1
 8001aa0:	e00e      	b.n	8001ac0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	2b0f      	cmp	r3, #15
 8001aa6:	d80a      	bhi.n	8001abe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	6879      	ldr	r1, [r7, #4]
 8001aac:	f04f 30ff 	mov.w	r0, #4294967295
 8001ab0:	f000 f90b 	bl	8001cca <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001ab4:	4a06      	ldr	r2, [pc, #24]	; (8001ad0 <HAL_InitTick+0x5c>)
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001aba:	2300      	movs	r3, #0
 8001abc:	e000      	b.n	8001ac0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001abe:	2301      	movs	r3, #1
}
 8001ac0:	4618      	mov	r0, r3
 8001ac2:	3708      	adds	r7, #8
 8001ac4:	46bd      	mov	sp, r7
 8001ac6:	bd80      	pop	{r7, pc}
 8001ac8:	200000b8 	.word	0x200000b8
 8001acc:	200000c0 	.word	0x200000c0
 8001ad0:	200000bc 	.word	0x200000bc

08001ad4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ad4:	b480      	push	{r7}
 8001ad6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001ad8:	4b06      	ldr	r3, [pc, #24]	; (8001af4 <HAL_IncTick+0x20>)
 8001ada:	781b      	ldrb	r3, [r3, #0]
 8001adc:	461a      	mov	r2, r3
 8001ade:	4b06      	ldr	r3, [pc, #24]	; (8001af8 <HAL_IncTick+0x24>)
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	4413      	add	r3, r2
 8001ae4:	4a04      	ldr	r2, [pc, #16]	; (8001af8 <HAL_IncTick+0x24>)
 8001ae6:	6013      	str	r3, [r2, #0]
}
 8001ae8:	bf00      	nop
 8001aea:	46bd      	mov	sp, r7
 8001aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af0:	4770      	bx	lr
 8001af2:	bf00      	nop
 8001af4:	200000c0 	.word	0x200000c0
 8001af8:	2000074c 	.word	0x2000074c

08001afc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001afc:	b480      	push	{r7}
 8001afe:	af00      	add	r7, sp, #0
  return uwTick;
 8001b00:	4b03      	ldr	r3, [pc, #12]	; (8001b10 <HAL_GetTick+0x14>)
 8001b02:	681b      	ldr	r3, [r3, #0]
}
 8001b04:	4618      	mov	r0, r3
 8001b06:	46bd      	mov	sp, r7
 8001b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0c:	4770      	bx	lr
 8001b0e:	bf00      	nop
 8001b10:	2000074c 	.word	0x2000074c

08001b14 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b14:	b480      	push	{r7}
 8001b16:	b085      	sub	sp, #20
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	f003 0307 	and.w	r3, r3, #7
 8001b22:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b24:	4b0c      	ldr	r3, [pc, #48]	; (8001b58 <__NVIC_SetPriorityGrouping+0x44>)
 8001b26:	68db      	ldr	r3, [r3, #12]
 8001b28:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b2a:	68ba      	ldr	r2, [r7, #8]
 8001b2c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001b30:	4013      	ands	r3, r2
 8001b32:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b38:	68bb      	ldr	r3, [r7, #8]
 8001b3a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001b3c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001b40:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b44:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b46:	4a04      	ldr	r2, [pc, #16]	; (8001b58 <__NVIC_SetPriorityGrouping+0x44>)
 8001b48:	68bb      	ldr	r3, [r7, #8]
 8001b4a:	60d3      	str	r3, [r2, #12]
}
 8001b4c:	bf00      	nop
 8001b4e:	3714      	adds	r7, #20
 8001b50:	46bd      	mov	sp, r7
 8001b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b56:	4770      	bx	lr
 8001b58:	e000ed00 	.word	0xe000ed00

08001b5c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001b5c:	b480      	push	{r7}
 8001b5e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b60:	4b04      	ldr	r3, [pc, #16]	; (8001b74 <__NVIC_GetPriorityGrouping+0x18>)
 8001b62:	68db      	ldr	r3, [r3, #12]
 8001b64:	0a1b      	lsrs	r3, r3, #8
 8001b66:	f003 0307 	and.w	r3, r3, #7
}
 8001b6a:	4618      	mov	r0, r3
 8001b6c:	46bd      	mov	sp, r7
 8001b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b72:	4770      	bx	lr
 8001b74:	e000ed00 	.word	0xe000ed00

08001b78 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b78:	b480      	push	{r7}
 8001b7a:	b083      	sub	sp, #12
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	4603      	mov	r3, r0
 8001b80:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	db0b      	blt.n	8001ba2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b8a:	79fb      	ldrb	r3, [r7, #7]
 8001b8c:	f003 021f 	and.w	r2, r3, #31
 8001b90:	4907      	ldr	r1, [pc, #28]	; (8001bb0 <__NVIC_EnableIRQ+0x38>)
 8001b92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b96:	095b      	lsrs	r3, r3, #5
 8001b98:	2001      	movs	r0, #1
 8001b9a:	fa00 f202 	lsl.w	r2, r0, r2
 8001b9e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001ba2:	bf00      	nop
 8001ba4:	370c      	adds	r7, #12
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bac:	4770      	bx	lr
 8001bae:	bf00      	nop
 8001bb0:	e000e100 	.word	0xe000e100

08001bb4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001bb4:	b480      	push	{r7}
 8001bb6:	b083      	sub	sp, #12
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	4603      	mov	r3, r0
 8001bbc:	6039      	str	r1, [r7, #0]
 8001bbe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001bc0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	db0a      	blt.n	8001bde <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bc8:	683b      	ldr	r3, [r7, #0]
 8001bca:	b2da      	uxtb	r2, r3
 8001bcc:	490c      	ldr	r1, [pc, #48]	; (8001c00 <__NVIC_SetPriority+0x4c>)
 8001bce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bd2:	0112      	lsls	r2, r2, #4
 8001bd4:	b2d2      	uxtb	r2, r2
 8001bd6:	440b      	add	r3, r1
 8001bd8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001bdc:	e00a      	b.n	8001bf4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bde:	683b      	ldr	r3, [r7, #0]
 8001be0:	b2da      	uxtb	r2, r3
 8001be2:	4908      	ldr	r1, [pc, #32]	; (8001c04 <__NVIC_SetPriority+0x50>)
 8001be4:	79fb      	ldrb	r3, [r7, #7]
 8001be6:	f003 030f 	and.w	r3, r3, #15
 8001bea:	3b04      	subs	r3, #4
 8001bec:	0112      	lsls	r2, r2, #4
 8001bee:	b2d2      	uxtb	r2, r2
 8001bf0:	440b      	add	r3, r1
 8001bf2:	761a      	strb	r2, [r3, #24]
}
 8001bf4:	bf00      	nop
 8001bf6:	370c      	adds	r7, #12
 8001bf8:	46bd      	mov	sp, r7
 8001bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bfe:	4770      	bx	lr
 8001c00:	e000e100 	.word	0xe000e100
 8001c04:	e000ed00 	.word	0xe000ed00

08001c08 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c08:	b480      	push	{r7}
 8001c0a:	b089      	sub	sp, #36	; 0x24
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	60f8      	str	r0, [r7, #12]
 8001c10:	60b9      	str	r1, [r7, #8]
 8001c12:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	f003 0307 	and.w	r3, r3, #7
 8001c1a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c1c:	69fb      	ldr	r3, [r7, #28]
 8001c1e:	f1c3 0307 	rsb	r3, r3, #7
 8001c22:	2b04      	cmp	r3, #4
 8001c24:	bf28      	it	cs
 8001c26:	2304      	movcs	r3, #4
 8001c28:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c2a:	69fb      	ldr	r3, [r7, #28]
 8001c2c:	3304      	adds	r3, #4
 8001c2e:	2b06      	cmp	r3, #6
 8001c30:	d902      	bls.n	8001c38 <NVIC_EncodePriority+0x30>
 8001c32:	69fb      	ldr	r3, [r7, #28]
 8001c34:	3b03      	subs	r3, #3
 8001c36:	e000      	b.n	8001c3a <NVIC_EncodePriority+0x32>
 8001c38:	2300      	movs	r3, #0
 8001c3a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c3c:	f04f 32ff 	mov.w	r2, #4294967295
 8001c40:	69bb      	ldr	r3, [r7, #24]
 8001c42:	fa02 f303 	lsl.w	r3, r2, r3
 8001c46:	43da      	mvns	r2, r3
 8001c48:	68bb      	ldr	r3, [r7, #8]
 8001c4a:	401a      	ands	r2, r3
 8001c4c:	697b      	ldr	r3, [r7, #20]
 8001c4e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c50:	f04f 31ff 	mov.w	r1, #4294967295
 8001c54:	697b      	ldr	r3, [r7, #20]
 8001c56:	fa01 f303 	lsl.w	r3, r1, r3
 8001c5a:	43d9      	mvns	r1, r3
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c60:	4313      	orrs	r3, r2
         );
}
 8001c62:	4618      	mov	r0, r3
 8001c64:	3724      	adds	r7, #36	; 0x24
 8001c66:	46bd      	mov	sp, r7
 8001c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6c:	4770      	bx	lr
	...

08001c70 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001c70:	b580      	push	{r7, lr}
 8001c72:	b082      	sub	sp, #8
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	3b01      	subs	r3, #1
 8001c7c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001c80:	d301      	bcc.n	8001c86 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001c82:	2301      	movs	r3, #1
 8001c84:	e00f      	b.n	8001ca6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001c86:	4a0a      	ldr	r2, [pc, #40]	; (8001cb0 <SysTick_Config+0x40>)
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	3b01      	subs	r3, #1
 8001c8c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001c8e:	210f      	movs	r1, #15
 8001c90:	f04f 30ff 	mov.w	r0, #4294967295
 8001c94:	f7ff ff8e 	bl	8001bb4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001c98:	4b05      	ldr	r3, [pc, #20]	; (8001cb0 <SysTick_Config+0x40>)
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001c9e:	4b04      	ldr	r3, [pc, #16]	; (8001cb0 <SysTick_Config+0x40>)
 8001ca0:	2207      	movs	r2, #7
 8001ca2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001ca4:	2300      	movs	r3, #0
}
 8001ca6:	4618      	mov	r0, r3
 8001ca8:	3708      	adds	r7, #8
 8001caa:	46bd      	mov	sp, r7
 8001cac:	bd80      	pop	{r7, pc}
 8001cae:	bf00      	nop
 8001cb0:	e000e010 	.word	0xe000e010

08001cb4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	b082      	sub	sp, #8
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001cbc:	6878      	ldr	r0, [r7, #4]
 8001cbe:	f7ff ff29 	bl	8001b14 <__NVIC_SetPriorityGrouping>
}
 8001cc2:	bf00      	nop
 8001cc4:	3708      	adds	r7, #8
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	bd80      	pop	{r7, pc}

08001cca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001cca:	b580      	push	{r7, lr}
 8001ccc:	b086      	sub	sp, #24
 8001cce:	af00      	add	r7, sp, #0
 8001cd0:	4603      	mov	r3, r0
 8001cd2:	60b9      	str	r1, [r7, #8]
 8001cd4:	607a      	str	r2, [r7, #4]
 8001cd6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001cd8:	2300      	movs	r3, #0
 8001cda:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001cdc:	f7ff ff3e 	bl	8001b5c <__NVIC_GetPriorityGrouping>
 8001ce0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001ce2:	687a      	ldr	r2, [r7, #4]
 8001ce4:	68b9      	ldr	r1, [r7, #8]
 8001ce6:	6978      	ldr	r0, [r7, #20]
 8001ce8:	f7ff ff8e 	bl	8001c08 <NVIC_EncodePriority>
 8001cec:	4602      	mov	r2, r0
 8001cee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001cf2:	4611      	mov	r1, r2
 8001cf4:	4618      	mov	r0, r3
 8001cf6:	f7ff ff5d 	bl	8001bb4 <__NVIC_SetPriority>
}
 8001cfa:	bf00      	nop
 8001cfc:	3718      	adds	r7, #24
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	bd80      	pop	{r7, pc}

08001d02 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d02:	b580      	push	{r7, lr}
 8001d04:	b082      	sub	sp, #8
 8001d06:	af00      	add	r7, sp, #0
 8001d08:	4603      	mov	r3, r0
 8001d0a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001d0c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d10:	4618      	mov	r0, r3
 8001d12:	f7ff ff31 	bl	8001b78 <__NVIC_EnableIRQ>
}
 8001d16:	bf00      	nop
 8001d18:	3708      	adds	r7, #8
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	bd80      	pop	{r7, pc}

08001d1e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001d1e:	b580      	push	{r7, lr}
 8001d20:	b082      	sub	sp, #8
 8001d22:	af00      	add	r7, sp, #0
 8001d24:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001d26:	6878      	ldr	r0, [r7, #4]
 8001d28:	f7ff ffa2 	bl	8001c70 <SysTick_Config>
 8001d2c:	4603      	mov	r3, r0
}
 8001d2e:	4618      	mov	r0, r3
 8001d30:	3708      	adds	r7, #8
 8001d32:	46bd      	mov	sp, r7
 8001d34:	bd80      	pop	{r7, pc}

08001d36 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001d36:	b480      	push	{r7}
 8001d38:	b083      	sub	sp, #12
 8001d3a:	af00      	add	r7, sp, #0
 8001d3c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001d44:	b2db      	uxtb	r3, r3
 8001d46:	2b02      	cmp	r3, #2
 8001d48:	d004      	beq.n	8001d54 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	2280      	movs	r2, #128	; 0x80
 8001d4e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001d50:	2301      	movs	r3, #1
 8001d52:	e00c      	b.n	8001d6e <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	2205      	movs	r2, #5
 8001d58:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	681a      	ldr	r2, [r3, #0]
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	f022 0201 	bic.w	r2, r2, #1
 8001d6a:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001d6c:	2300      	movs	r3, #0
}
 8001d6e:	4618      	mov	r0, r3
 8001d70:	370c      	adds	r7, #12
 8001d72:	46bd      	mov	sp, r7
 8001d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d78:	4770      	bx	lr
	...

08001d7c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d7c:	b480      	push	{r7}
 8001d7e:	b089      	sub	sp, #36	; 0x24
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	6078      	str	r0, [r7, #4]
 8001d84:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001d86:	2300      	movs	r3, #0
 8001d88:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001d8a:	2300      	movs	r3, #0
 8001d8c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001d8e:	2300      	movs	r3, #0
 8001d90:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001d92:	2300      	movs	r3, #0
 8001d94:	61fb      	str	r3, [r7, #28]
 8001d96:	e159      	b.n	800204c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001d98:	2201      	movs	r2, #1
 8001d9a:	69fb      	ldr	r3, [r7, #28]
 8001d9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001da0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001da2:	683b      	ldr	r3, [r7, #0]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	697a      	ldr	r2, [r7, #20]
 8001da8:	4013      	ands	r3, r2
 8001daa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001dac:	693a      	ldr	r2, [r7, #16]
 8001dae:	697b      	ldr	r3, [r7, #20]
 8001db0:	429a      	cmp	r2, r3
 8001db2:	f040 8148 	bne.w	8002046 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001db6:	683b      	ldr	r3, [r7, #0]
 8001db8:	685b      	ldr	r3, [r3, #4]
 8001dba:	2b01      	cmp	r3, #1
 8001dbc:	d00b      	beq.n	8001dd6 <HAL_GPIO_Init+0x5a>
 8001dbe:	683b      	ldr	r3, [r7, #0]
 8001dc0:	685b      	ldr	r3, [r3, #4]
 8001dc2:	2b02      	cmp	r3, #2
 8001dc4:	d007      	beq.n	8001dd6 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001dc6:	683b      	ldr	r3, [r7, #0]
 8001dc8:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001dca:	2b11      	cmp	r3, #17
 8001dcc:	d003      	beq.n	8001dd6 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001dce:	683b      	ldr	r3, [r7, #0]
 8001dd0:	685b      	ldr	r3, [r3, #4]
 8001dd2:	2b12      	cmp	r3, #18
 8001dd4:	d130      	bne.n	8001e38 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	689b      	ldr	r3, [r3, #8]
 8001dda:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001ddc:	69fb      	ldr	r3, [r7, #28]
 8001dde:	005b      	lsls	r3, r3, #1
 8001de0:	2203      	movs	r2, #3
 8001de2:	fa02 f303 	lsl.w	r3, r2, r3
 8001de6:	43db      	mvns	r3, r3
 8001de8:	69ba      	ldr	r2, [r7, #24]
 8001dea:	4013      	ands	r3, r2
 8001dec:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001dee:	683b      	ldr	r3, [r7, #0]
 8001df0:	68da      	ldr	r2, [r3, #12]
 8001df2:	69fb      	ldr	r3, [r7, #28]
 8001df4:	005b      	lsls	r3, r3, #1
 8001df6:	fa02 f303 	lsl.w	r3, r2, r3
 8001dfa:	69ba      	ldr	r2, [r7, #24]
 8001dfc:	4313      	orrs	r3, r2
 8001dfe:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	69ba      	ldr	r2, [r7, #24]
 8001e04:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	685b      	ldr	r3, [r3, #4]
 8001e0a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001e0c:	2201      	movs	r2, #1
 8001e0e:	69fb      	ldr	r3, [r7, #28]
 8001e10:	fa02 f303 	lsl.w	r3, r2, r3
 8001e14:	43db      	mvns	r3, r3
 8001e16:	69ba      	ldr	r2, [r7, #24]
 8001e18:	4013      	ands	r3, r2
 8001e1a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001e1c:	683b      	ldr	r3, [r7, #0]
 8001e1e:	685b      	ldr	r3, [r3, #4]
 8001e20:	091b      	lsrs	r3, r3, #4
 8001e22:	f003 0201 	and.w	r2, r3, #1
 8001e26:	69fb      	ldr	r3, [r7, #28]
 8001e28:	fa02 f303 	lsl.w	r3, r2, r3
 8001e2c:	69ba      	ldr	r2, [r7, #24]
 8001e2e:	4313      	orrs	r3, r2
 8001e30:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	69ba      	ldr	r2, [r7, #24]
 8001e36:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	68db      	ldr	r3, [r3, #12]
 8001e3c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001e3e:	69fb      	ldr	r3, [r7, #28]
 8001e40:	005b      	lsls	r3, r3, #1
 8001e42:	2203      	movs	r2, #3
 8001e44:	fa02 f303 	lsl.w	r3, r2, r3
 8001e48:	43db      	mvns	r3, r3
 8001e4a:	69ba      	ldr	r2, [r7, #24]
 8001e4c:	4013      	ands	r3, r2
 8001e4e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001e50:	683b      	ldr	r3, [r7, #0]
 8001e52:	689a      	ldr	r2, [r3, #8]
 8001e54:	69fb      	ldr	r3, [r7, #28]
 8001e56:	005b      	lsls	r3, r3, #1
 8001e58:	fa02 f303 	lsl.w	r3, r2, r3
 8001e5c:	69ba      	ldr	r2, [r7, #24]
 8001e5e:	4313      	orrs	r3, r2
 8001e60:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	69ba      	ldr	r2, [r7, #24]
 8001e66:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001e68:	683b      	ldr	r3, [r7, #0]
 8001e6a:	685b      	ldr	r3, [r3, #4]
 8001e6c:	2b02      	cmp	r3, #2
 8001e6e:	d003      	beq.n	8001e78 <HAL_GPIO_Init+0xfc>
 8001e70:	683b      	ldr	r3, [r7, #0]
 8001e72:	685b      	ldr	r3, [r3, #4]
 8001e74:	2b12      	cmp	r3, #18
 8001e76:	d123      	bne.n	8001ec0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001e78:	69fb      	ldr	r3, [r7, #28]
 8001e7a:	08da      	lsrs	r2, r3, #3
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	3208      	adds	r2, #8
 8001e80:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e84:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001e86:	69fb      	ldr	r3, [r7, #28]
 8001e88:	f003 0307 	and.w	r3, r3, #7
 8001e8c:	009b      	lsls	r3, r3, #2
 8001e8e:	220f      	movs	r2, #15
 8001e90:	fa02 f303 	lsl.w	r3, r2, r3
 8001e94:	43db      	mvns	r3, r3
 8001e96:	69ba      	ldr	r2, [r7, #24]
 8001e98:	4013      	ands	r3, r2
 8001e9a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001e9c:	683b      	ldr	r3, [r7, #0]
 8001e9e:	691a      	ldr	r2, [r3, #16]
 8001ea0:	69fb      	ldr	r3, [r7, #28]
 8001ea2:	f003 0307 	and.w	r3, r3, #7
 8001ea6:	009b      	lsls	r3, r3, #2
 8001ea8:	fa02 f303 	lsl.w	r3, r2, r3
 8001eac:	69ba      	ldr	r2, [r7, #24]
 8001eae:	4313      	orrs	r3, r2
 8001eb0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001eb2:	69fb      	ldr	r3, [r7, #28]
 8001eb4:	08da      	lsrs	r2, r3, #3
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	3208      	adds	r2, #8
 8001eba:	69b9      	ldr	r1, [r7, #24]
 8001ebc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001ec6:	69fb      	ldr	r3, [r7, #28]
 8001ec8:	005b      	lsls	r3, r3, #1
 8001eca:	2203      	movs	r2, #3
 8001ecc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ed0:	43db      	mvns	r3, r3
 8001ed2:	69ba      	ldr	r2, [r7, #24]
 8001ed4:	4013      	ands	r3, r2
 8001ed6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001ed8:	683b      	ldr	r3, [r7, #0]
 8001eda:	685b      	ldr	r3, [r3, #4]
 8001edc:	f003 0203 	and.w	r2, r3, #3
 8001ee0:	69fb      	ldr	r3, [r7, #28]
 8001ee2:	005b      	lsls	r3, r3, #1
 8001ee4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ee8:	69ba      	ldr	r2, [r7, #24]
 8001eea:	4313      	orrs	r3, r2
 8001eec:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	69ba      	ldr	r2, [r7, #24]
 8001ef2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001ef4:	683b      	ldr	r3, [r7, #0]
 8001ef6:	685b      	ldr	r3, [r3, #4]
 8001ef8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	f000 80a2 	beq.w	8002046 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f02:	2300      	movs	r3, #0
 8001f04:	60fb      	str	r3, [r7, #12]
 8001f06:	4b56      	ldr	r3, [pc, #344]	; (8002060 <HAL_GPIO_Init+0x2e4>)
 8001f08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f0a:	4a55      	ldr	r2, [pc, #340]	; (8002060 <HAL_GPIO_Init+0x2e4>)
 8001f0c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001f10:	6453      	str	r3, [r2, #68]	; 0x44
 8001f12:	4b53      	ldr	r3, [pc, #332]	; (8002060 <HAL_GPIO_Init+0x2e4>)
 8001f14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f16:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f1a:	60fb      	str	r3, [r7, #12]
 8001f1c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001f1e:	4a51      	ldr	r2, [pc, #324]	; (8002064 <HAL_GPIO_Init+0x2e8>)
 8001f20:	69fb      	ldr	r3, [r7, #28]
 8001f22:	089b      	lsrs	r3, r3, #2
 8001f24:	3302      	adds	r3, #2
 8001f26:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f2a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001f2c:	69fb      	ldr	r3, [r7, #28]
 8001f2e:	f003 0303 	and.w	r3, r3, #3
 8001f32:	009b      	lsls	r3, r3, #2
 8001f34:	220f      	movs	r2, #15
 8001f36:	fa02 f303 	lsl.w	r3, r2, r3
 8001f3a:	43db      	mvns	r3, r3
 8001f3c:	69ba      	ldr	r2, [r7, #24]
 8001f3e:	4013      	ands	r3, r2
 8001f40:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	4a48      	ldr	r2, [pc, #288]	; (8002068 <HAL_GPIO_Init+0x2ec>)
 8001f46:	4293      	cmp	r3, r2
 8001f48:	d019      	beq.n	8001f7e <HAL_GPIO_Init+0x202>
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	4a47      	ldr	r2, [pc, #284]	; (800206c <HAL_GPIO_Init+0x2f0>)
 8001f4e:	4293      	cmp	r3, r2
 8001f50:	d013      	beq.n	8001f7a <HAL_GPIO_Init+0x1fe>
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	4a46      	ldr	r2, [pc, #280]	; (8002070 <HAL_GPIO_Init+0x2f4>)
 8001f56:	4293      	cmp	r3, r2
 8001f58:	d00d      	beq.n	8001f76 <HAL_GPIO_Init+0x1fa>
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	4a45      	ldr	r2, [pc, #276]	; (8002074 <HAL_GPIO_Init+0x2f8>)
 8001f5e:	4293      	cmp	r3, r2
 8001f60:	d007      	beq.n	8001f72 <HAL_GPIO_Init+0x1f6>
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	4a44      	ldr	r2, [pc, #272]	; (8002078 <HAL_GPIO_Init+0x2fc>)
 8001f66:	4293      	cmp	r3, r2
 8001f68:	d101      	bne.n	8001f6e <HAL_GPIO_Init+0x1f2>
 8001f6a:	2304      	movs	r3, #4
 8001f6c:	e008      	b.n	8001f80 <HAL_GPIO_Init+0x204>
 8001f6e:	2307      	movs	r3, #7
 8001f70:	e006      	b.n	8001f80 <HAL_GPIO_Init+0x204>
 8001f72:	2303      	movs	r3, #3
 8001f74:	e004      	b.n	8001f80 <HAL_GPIO_Init+0x204>
 8001f76:	2302      	movs	r3, #2
 8001f78:	e002      	b.n	8001f80 <HAL_GPIO_Init+0x204>
 8001f7a:	2301      	movs	r3, #1
 8001f7c:	e000      	b.n	8001f80 <HAL_GPIO_Init+0x204>
 8001f7e:	2300      	movs	r3, #0
 8001f80:	69fa      	ldr	r2, [r7, #28]
 8001f82:	f002 0203 	and.w	r2, r2, #3
 8001f86:	0092      	lsls	r2, r2, #2
 8001f88:	4093      	lsls	r3, r2
 8001f8a:	69ba      	ldr	r2, [r7, #24]
 8001f8c:	4313      	orrs	r3, r2
 8001f8e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001f90:	4934      	ldr	r1, [pc, #208]	; (8002064 <HAL_GPIO_Init+0x2e8>)
 8001f92:	69fb      	ldr	r3, [r7, #28]
 8001f94:	089b      	lsrs	r3, r3, #2
 8001f96:	3302      	adds	r3, #2
 8001f98:	69ba      	ldr	r2, [r7, #24]
 8001f9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001f9e:	4b37      	ldr	r3, [pc, #220]	; (800207c <HAL_GPIO_Init+0x300>)
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001fa4:	693b      	ldr	r3, [r7, #16]
 8001fa6:	43db      	mvns	r3, r3
 8001fa8:	69ba      	ldr	r2, [r7, #24]
 8001faa:	4013      	ands	r3, r2
 8001fac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001fae:	683b      	ldr	r3, [r7, #0]
 8001fb0:	685b      	ldr	r3, [r3, #4]
 8001fb2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d003      	beq.n	8001fc2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001fba:	69ba      	ldr	r2, [r7, #24]
 8001fbc:	693b      	ldr	r3, [r7, #16]
 8001fbe:	4313      	orrs	r3, r2
 8001fc0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001fc2:	4a2e      	ldr	r2, [pc, #184]	; (800207c <HAL_GPIO_Init+0x300>)
 8001fc4:	69bb      	ldr	r3, [r7, #24]
 8001fc6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001fc8:	4b2c      	ldr	r3, [pc, #176]	; (800207c <HAL_GPIO_Init+0x300>)
 8001fca:	685b      	ldr	r3, [r3, #4]
 8001fcc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001fce:	693b      	ldr	r3, [r7, #16]
 8001fd0:	43db      	mvns	r3, r3
 8001fd2:	69ba      	ldr	r2, [r7, #24]
 8001fd4:	4013      	ands	r3, r2
 8001fd6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001fd8:	683b      	ldr	r3, [r7, #0]
 8001fda:	685b      	ldr	r3, [r3, #4]
 8001fdc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d003      	beq.n	8001fec <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001fe4:	69ba      	ldr	r2, [r7, #24]
 8001fe6:	693b      	ldr	r3, [r7, #16]
 8001fe8:	4313      	orrs	r3, r2
 8001fea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001fec:	4a23      	ldr	r2, [pc, #140]	; (800207c <HAL_GPIO_Init+0x300>)
 8001fee:	69bb      	ldr	r3, [r7, #24]
 8001ff0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001ff2:	4b22      	ldr	r3, [pc, #136]	; (800207c <HAL_GPIO_Init+0x300>)
 8001ff4:	689b      	ldr	r3, [r3, #8]
 8001ff6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ff8:	693b      	ldr	r3, [r7, #16]
 8001ffa:	43db      	mvns	r3, r3
 8001ffc:	69ba      	ldr	r2, [r7, #24]
 8001ffe:	4013      	ands	r3, r2
 8002000:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002002:	683b      	ldr	r3, [r7, #0]
 8002004:	685b      	ldr	r3, [r3, #4]
 8002006:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800200a:	2b00      	cmp	r3, #0
 800200c:	d003      	beq.n	8002016 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800200e:	69ba      	ldr	r2, [r7, #24]
 8002010:	693b      	ldr	r3, [r7, #16]
 8002012:	4313      	orrs	r3, r2
 8002014:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002016:	4a19      	ldr	r2, [pc, #100]	; (800207c <HAL_GPIO_Init+0x300>)
 8002018:	69bb      	ldr	r3, [r7, #24]
 800201a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800201c:	4b17      	ldr	r3, [pc, #92]	; (800207c <HAL_GPIO_Init+0x300>)
 800201e:	68db      	ldr	r3, [r3, #12]
 8002020:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002022:	693b      	ldr	r3, [r7, #16]
 8002024:	43db      	mvns	r3, r3
 8002026:	69ba      	ldr	r2, [r7, #24]
 8002028:	4013      	ands	r3, r2
 800202a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800202c:	683b      	ldr	r3, [r7, #0]
 800202e:	685b      	ldr	r3, [r3, #4]
 8002030:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002034:	2b00      	cmp	r3, #0
 8002036:	d003      	beq.n	8002040 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002038:	69ba      	ldr	r2, [r7, #24]
 800203a:	693b      	ldr	r3, [r7, #16]
 800203c:	4313      	orrs	r3, r2
 800203e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002040:	4a0e      	ldr	r2, [pc, #56]	; (800207c <HAL_GPIO_Init+0x300>)
 8002042:	69bb      	ldr	r3, [r7, #24]
 8002044:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002046:	69fb      	ldr	r3, [r7, #28]
 8002048:	3301      	adds	r3, #1
 800204a:	61fb      	str	r3, [r7, #28]
 800204c:	69fb      	ldr	r3, [r7, #28]
 800204e:	2b0f      	cmp	r3, #15
 8002050:	f67f aea2 	bls.w	8001d98 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002054:	bf00      	nop
 8002056:	3724      	adds	r7, #36	; 0x24
 8002058:	46bd      	mov	sp, r7
 800205a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800205e:	4770      	bx	lr
 8002060:	40023800 	.word	0x40023800
 8002064:	40013800 	.word	0x40013800
 8002068:	40020000 	.word	0x40020000
 800206c:	40020400 	.word	0x40020400
 8002070:	40020800 	.word	0x40020800
 8002074:	40020c00 	.word	0x40020c00
 8002078:	40021000 	.word	0x40021000
 800207c:	40013c00 	.word	0x40013c00

08002080 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002080:	b480      	push	{r7}
 8002082:	b083      	sub	sp, #12
 8002084:	af00      	add	r7, sp, #0
 8002086:	6078      	str	r0, [r7, #4]
 8002088:	460b      	mov	r3, r1
 800208a:	807b      	strh	r3, [r7, #2]
 800208c:	4613      	mov	r3, r2
 800208e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002090:	787b      	ldrb	r3, [r7, #1]
 8002092:	2b00      	cmp	r3, #0
 8002094:	d003      	beq.n	800209e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002096:	887a      	ldrh	r2, [r7, #2]
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800209c:	e003      	b.n	80020a6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800209e:	887b      	ldrh	r3, [r7, #2]
 80020a0:	041a      	lsls	r2, r3, #16
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	619a      	str	r2, [r3, #24]
}
 80020a6:	bf00      	nop
 80020a8:	370c      	adds	r7, #12
 80020aa:	46bd      	mov	sp, r7
 80020ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b0:	4770      	bx	lr

080020b2 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80020b2:	b480      	push	{r7}
 80020b4:	b083      	sub	sp, #12
 80020b6:	af00      	add	r7, sp, #0
 80020b8:	6078      	str	r0, [r7, #4]
 80020ba:	460b      	mov	r3, r1
 80020bc:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	695a      	ldr	r2, [r3, #20]
 80020c2:	887b      	ldrh	r3, [r7, #2]
 80020c4:	401a      	ands	r2, r3
 80020c6:	887b      	ldrh	r3, [r7, #2]
 80020c8:	429a      	cmp	r2, r3
 80020ca:	d104      	bne.n	80020d6 <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80020cc:	887b      	ldrh	r3, [r7, #2]
 80020ce:	041a      	lsls	r2, r3, #16
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 80020d4:	e002      	b.n	80020dc <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 80020d6:	887a      	ldrh	r2, [r7, #2]
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	619a      	str	r2, [r3, #24]
}
 80020dc:	bf00      	nop
 80020de:	370c      	adds	r7, #12
 80020e0:	46bd      	mov	sp, r7
 80020e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e6:	4770      	bx	lr

080020e8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80020e8:	b580      	push	{r7, lr}
 80020ea:	b086      	sub	sp, #24
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d101      	bne.n	80020fa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80020f6:	2301      	movs	r3, #1
 80020f8:	e25b      	b.n	80025b2 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	f003 0301 	and.w	r3, r3, #1
 8002102:	2b00      	cmp	r3, #0
 8002104:	d075      	beq.n	80021f2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002106:	4ba3      	ldr	r3, [pc, #652]	; (8002394 <HAL_RCC_OscConfig+0x2ac>)
 8002108:	689b      	ldr	r3, [r3, #8]
 800210a:	f003 030c 	and.w	r3, r3, #12
 800210e:	2b04      	cmp	r3, #4
 8002110:	d00c      	beq.n	800212c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002112:	4ba0      	ldr	r3, [pc, #640]	; (8002394 <HAL_RCC_OscConfig+0x2ac>)
 8002114:	689b      	ldr	r3, [r3, #8]
 8002116:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800211a:	2b08      	cmp	r3, #8
 800211c:	d112      	bne.n	8002144 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800211e:	4b9d      	ldr	r3, [pc, #628]	; (8002394 <HAL_RCC_OscConfig+0x2ac>)
 8002120:	685b      	ldr	r3, [r3, #4]
 8002122:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002126:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800212a:	d10b      	bne.n	8002144 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800212c:	4b99      	ldr	r3, [pc, #612]	; (8002394 <HAL_RCC_OscConfig+0x2ac>)
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002134:	2b00      	cmp	r3, #0
 8002136:	d05b      	beq.n	80021f0 <HAL_RCC_OscConfig+0x108>
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	685b      	ldr	r3, [r3, #4]
 800213c:	2b00      	cmp	r3, #0
 800213e:	d157      	bne.n	80021f0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002140:	2301      	movs	r3, #1
 8002142:	e236      	b.n	80025b2 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	685b      	ldr	r3, [r3, #4]
 8002148:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800214c:	d106      	bne.n	800215c <HAL_RCC_OscConfig+0x74>
 800214e:	4b91      	ldr	r3, [pc, #580]	; (8002394 <HAL_RCC_OscConfig+0x2ac>)
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	4a90      	ldr	r2, [pc, #576]	; (8002394 <HAL_RCC_OscConfig+0x2ac>)
 8002154:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002158:	6013      	str	r3, [r2, #0]
 800215a:	e01d      	b.n	8002198 <HAL_RCC_OscConfig+0xb0>
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	685b      	ldr	r3, [r3, #4]
 8002160:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002164:	d10c      	bne.n	8002180 <HAL_RCC_OscConfig+0x98>
 8002166:	4b8b      	ldr	r3, [pc, #556]	; (8002394 <HAL_RCC_OscConfig+0x2ac>)
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	4a8a      	ldr	r2, [pc, #552]	; (8002394 <HAL_RCC_OscConfig+0x2ac>)
 800216c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002170:	6013      	str	r3, [r2, #0]
 8002172:	4b88      	ldr	r3, [pc, #544]	; (8002394 <HAL_RCC_OscConfig+0x2ac>)
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	4a87      	ldr	r2, [pc, #540]	; (8002394 <HAL_RCC_OscConfig+0x2ac>)
 8002178:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800217c:	6013      	str	r3, [r2, #0]
 800217e:	e00b      	b.n	8002198 <HAL_RCC_OscConfig+0xb0>
 8002180:	4b84      	ldr	r3, [pc, #528]	; (8002394 <HAL_RCC_OscConfig+0x2ac>)
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	4a83      	ldr	r2, [pc, #524]	; (8002394 <HAL_RCC_OscConfig+0x2ac>)
 8002186:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800218a:	6013      	str	r3, [r2, #0]
 800218c:	4b81      	ldr	r3, [pc, #516]	; (8002394 <HAL_RCC_OscConfig+0x2ac>)
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	4a80      	ldr	r2, [pc, #512]	; (8002394 <HAL_RCC_OscConfig+0x2ac>)
 8002192:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002196:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	685b      	ldr	r3, [r3, #4]
 800219c:	2b00      	cmp	r3, #0
 800219e:	d013      	beq.n	80021c8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021a0:	f7ff fcac 	bl	8001afc <HAL_GetTick>
 80021a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021a6:	e008      	b.n	80021ba <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80021a8:	f7ff fca8 	bl	8001afc <HAL_GetTick>
 80021ac:	4602      	mov	r2, r0
 80021ae:	693b      	ldr	r3, [r7, #16]
 80021b0:	1ad3      	subs	r3, r2, r3
 80021b2:	2b64      	cmp	r3, #100	; 0x64
 80021b4:	d901      	bls.n	80021ba <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80021b6:	2303      	movs	r3, #3
 80021b8:	e1fb      	b.n	80025b2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021ba:	4b76      	ldr	r3, [pc, #472]	; (8002394 <HAL_RCC_OscConfig+0x2ac>)
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d0f0      	beq.n	80021a8 <HAL_RCC_OscConfig+0xc0>
 80021c6:	e014      	b.n	80021f2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021c8:	f7ff fc98 	bl	8001afc <HAL_GetTick>
 80021cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80021ce:	e008      	b.n	80021e2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80021d0:	f7ff fc94 	bl	8001afc <HAL_GetTick>
 80021d4:	4602      	mov	r2, r0
 80021d6:	693b      	ldr	r3, [r7, #16]
 80021d8:	1ad3      	subs	r3, r2, r3
 80021da:	2b64      	cmp	r3, #100	; 0x64
 80021dc:	d901      	bls.n	80021e2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80021de:	2303      	movs	r3, #3
 80021e0:	e1e7      	b.n	80025b2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80021e2:	4b6c      	ldr	r3, [pc, #432]	; (8002394 <HAL_RCC_OscConfig+0x2ac>)
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d1f0      	bne.n	80021d0 <HAL_RCC_OscConfig+0xe8>
 80021ee:	e000      	b.n	80021f2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80021f0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	f003 0302 	and.w	r3, r3, #2
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d063      	beq.n	80022c6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80021fe:	4b65      	ldr	r3, [pc, #404]	; (8002394 <HAL_RCC_OscConfig+0x2ac>)
 8002200:	689b      	ldr	r3, [r3, #8]
 8002202:	f003 030c 	and.w	r3, r3, #12
 8002206:	2b00      	cmp	r3, #0
 8002208:	d00b      	beq.n	8002222 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800220a:	4b62      	ldr	r3, [pc, #392]	; (8002394 <HAL_RCC_OscConfig+0x2ac>)
 800220c:	689b      	ldr	r3, [r3, #8]
 800220e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002212:	2b08      	cmp	r3, #8
 8002214:	d11c      	bne.n	8002250 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002216:	4b5f      	ldr	r3, [pc, #380]	; (8002394 <HAL_RCC_OscConfig+0x2ac>)
 8002218:	685b      	ldr	r3, [r3, #4]
 800221a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800221e:	2b00      	cmp	r3, #0
 8002220:	d116      	bne.n	8002250 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002222:	4b5c      	ldr	r3, [pc, #368]	; (8002394 <HAL_RCC_OscConfig+0x2ac>)
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	f003 0302 	and.w	r3, r3, #2
 800222a:	2b00      	cmp	r3, #0
 800222c:	d005      	beq.n	800223a <HAL_RCC_OscConfig+0x152>
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	68db      	ldr	r3, [r3, #12]
 8002232:	2b01      	cmp	r3, #1
 8002234:	d001      	beq.n	800223a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002236:	2301      	movs	r3, #1
 8002238:	e1bb      	b.n	80025b2 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800223a:	4b56      	ldr	r3, [pc, #344]	; (8002394 <HAL_RCC_OscConfig+0x2ac>)
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	691b      	ldr	r3, [r3, #16]
 8002246:	00db      	lsls	r3, r3, #3
 8002248:	4952      	ldr	r1, [pc, #328]	; (8002394 <HAL_RCC_OscConfig+0x2ac>)
 800224a:	4313      	orrs	r3, r2
 800224c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800224e:	e03a      	b.n	80022c6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	68db      	ldr	r3, [r3, #12]
 8002254:	2b00      	cmp	r3, #0
 8002256:	d020      	beq.n	800229a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002258:	4b4f      	ldr	r3, [pc, #316]	; (8002398 <HAL_RCC_OscConfig+0x2b0>)
 800225a:	2201      	movs	r2, #1
 800225c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800225e:	f7ff fc4d 	bl	8001afc <HAL_GetTick>
 8002262:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002264:	e008      	b.n	8002278 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002266:	f7ff fc49 	bl	8001afc <HAL_GetTick>
 800226a:	4602      	mov	r2, r0
 800226c:	693b      	ldr	r3, [r7, #16]
 800226e:	1ad3      	subs	r3, r2, r3
 8002270:	2b02      	cmp	r3, #2
 8002272:	d901      	bls.n	8002278 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002274:	2303      	movs	r3, #3
 8002276:	e19c      	b.n	80025b2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002278:	4b46      	ldr	r3, [pc, #280]	; (8002394 <HAL_RCC_OscConfig+0x2ac>)
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	f003 0302 	and.w	r3, r3, #2
 8002280:	2b00      	cmp	r3, #0
 8002282:	d0f0      	beq.n	8002266 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002284:	4b43      	ldr	r3, [pc, #268]	; (8002394 <HAL_RCC_OscConfig+0x2ac>)
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	691b      	ldr	r3, [r3, #16]
 8002290:	00db      	lsls	r3, r3, #3
 8002292:	4940      	ldr	r1, [pc, #256]	; (8002394 <HAL_RCC_OscConfig+0x2ac>)
 8002294:	4313      	orrs	r3, r2
 8002296:	600b      	str	r3, [r1, #0]
 8002298:	e015      	b.n	80022c6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800229a:	4b3f      	ldr	r3, [pc, #252]	; (8002398 <HAL_RCC_OscConfig+0x2b0>)
 800229c:	2200      	movs	r2, #0
 800229e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022a0:	f7ff fc2c 	bl	8001afc <HAL_GetTick>
 80022a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80022a6:	e008      	b.n	80022ba <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80022a8:	f7ff fc28 	bl	8001afc <HAL_GetTick>
 80022ac:	4602      	mov	r2, r0
 80022ae:	693b      	ldr	r3, [r7, #16]
 80022b0:	1ad3      	subs	r3, r2, r3
 80022b2:	2b02      	cmp	r3, #2
 80022b4:	d901      	bls.n	80022ba <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80022b6:	2303      	movs	r3, #3
 80022b8:	e17b      	b.n	80025b2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80022ba:	4b36      	ldr	r3, [pc, #216]	; (8002394 <HAL_RCC_OscConfig+0x2ac>)
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	f003 0302 	and.w	r3, r3, #2
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d1f0      	bne.n	80022a8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	f003 0308 	and.w	r3, r3, #8
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d030      	beq.n	8002334 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	695b      	ldr	r3, [r3, #20]
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d016      	beq.n	8002308 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80022da:	4b30      	ldr	r3, [pc, #192]	; (800239c <HAL_RCC_OscConfig+0x2b4>)
 80022dc:	2201      	movs	r2, #1
 80022de:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022e0:	f7ff fc0c 	bl	8001afc <HAL_GetTick>
 80022e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80022e6:	e008      	b.n	80022fa <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80022e8:	f7ff fc08 	bl	8001afc <HAL_GetTick>
 80022ec:	4602      	mov	r2, r0
 80022ee:	693b      	ldr	r3, [r7, #16]
 80022f0:	1ad3      	subs	r3, r2, r3
 80022f2:	2b02      	cmp	r3, #2
 80022f4:	d901      	bls.n	80022fa <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80022f6:	2303      	movs	r3, #3
 80022f8:	e15b      	b.n	80025b2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80022fa:	4b26      	ldr	r3, [pc, #152]	; (8002394 <HAL_RCC_OscConfig+0x2ac>)
 80022fc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80022fe:	f003 0302 	and.w	r3, r3, #2
 8002302:	2b00      	cmp	r3, #0
 8002304:	d0f0      	beq.n	80022e8 <HAL_RCC_OscConfig+0x200>
 8002306:	e015      	b.n	8002334 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002308:	4b24      	ldr	r3, [pc, #144]	; (800239c <HAL_RCC_OscConfig+0x2b4>)
 800230a:	2200      	movs	r2, #0
 800230c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800230e:	f7ff fbf5 	bl	8001afc <HAL_GetTick>
 8002312:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002314:	e008      	b.n	8002328 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002316:	f7ff fbf1 	bl	8001afc <HAL_GetTick>
 800231a:	4602      	mov	r2, r0
 800231c:	693b      	ldr	r3, [r7, #16]
 800231e:	1ad3      	subs	r3, r2, r3
 8002320:	2b02      	cmp	r3, #2
 8002322:	d901      	bls.n	8002328 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002324:	2303      	movs	r3, #3
 8002326:	e144      	b.n	80025b2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002328:	4b1a      	ldr	r3, [pc, #104]	; (8002394 <HAL_RCC_OscConfig+0x2ac>)
 800232a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800232c:	f003 0302 	and.w	r3, r3, #2
 8002330:	2b00      	cmp	r3, #0
 8002332:	d1f0      	bne.n	8002316 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	f003 0304 	and.w	r3, r3, #4
 800233c:	2b00      	cmp	r3, #0
 800233e:	f000 80a0 	beq.w	8002482 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002342:	2300      	movs	r3, #0
 8002344:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002346:	4b13      	ldr	r3, [pc, #76]	; (8002394 <HAL_RCC_OscConfig+0x2ac>)
 8002348:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800234a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800234e:	2b00      	cmp	r3, #0
 8002350:	d10f      	bne.n	8002372 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002352:	2300      	movs	r3, #0
 8002354:	60bb      	str	r3, [r7, #8]
 8002356:	4b0f      	ldr	r3, [pc, #60]	; (8002394 <HAL_RCC_OscConfig+0x2ac>)
 8002358:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800235a:	4a0e      	ldr	r2, [pc, #56]	; (8002394 <HAL_RCC_OscConfig+0x2ac>)
 800235c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002360:	6413      	str	r3, [r2, #64]	; 0x40
 8002362:	4b0c      	ldr	r3, [pc, #48]	; (8002394 <HAL_RCC_OscConfig+0x2ac>)
 8002364:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002366:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800236a:	60bb      	str	r3, [r7, #8]
 800236c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800236e:	2301      	movs	r3, #1
 8002370:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002372:	4b0b      	ldr	r3, [pc, #44]	; (80023a0 <HAL_RCC_OscConfig+0x2b8>)
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800237a:	2b00      	cmp	r3, #0
 800237c:	d121      	bne.n	80023c2 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800237e:	4b08      	ldr	r3, [pc, #32]	; (80023a0 <HAL_RCC_OscConfig+0x2b8>)
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	4a07      	ldr	r2, [pc, #28]	; (80023a0 <HAL_RCC_OscConfig+0x2b8>)
 8002384:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002388:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800238a:	f7ff fbb7 	bl	8001afc <HAL_GetTick>
 800238e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002390:	e011      	b.n	80023b6 <HAL_RCC_OscConfig+0x2ce>
 8002392:	bf00      	nop
 8002394:	40023800 	.word	0x40023800
 8002398:	42470000 	.word	0x42470000
 800239c:	42470e80 	.word	0x42470e80
 80023a0:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80023a4:	f7ff fbaa 	bl	8001afc <HAL_GetTick>
 80023a8:	4602      	mov	r2, r0
 80023aa:	693b      	ldr	r3, [r7, #16]
 80023ac:	1ad3      	subs	r3, r2, r3
 80023ae:	2b02      	cmp	r3, #2
 80023b0:	d901      	bls.n	80023b6 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80023b2:	2303      	movs	r3, #3
 80023b4:	e0fd      	b.n	80025b2 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023b6:	4b81      	ldr	r3, [pc, #516]	; (80025bc <HAL_RCC_OscConfig+0x4d4>)
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d0f0      	beq.n	80023a4 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	689b      	ldr	r3, [r3, #8]
 80023c6:	2b01      	cmp	r3, #1
 80023c8:	d106      	bne.n	80023d8 <HAL_RCC_OscConfig+0x2f0>
 80023ca:	4b7d      	ldr	r3, [pc, #500]	; (80025c0 <HAL_RCC_OscConfig+0x4d8>)
 80023cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023ce:	4a7c      	ldr	r2, [pc, #496]	; (80025c0 <HAL_RCC_OscConfig+0x4d8>)
 80023d0:	f043 0301 	orr.w	r3, r3, #1
 80023d4:	6713      	str	r3, [r2, #112]	; 0x70
 80023d6:	e01c      	b.n	8002412 <HAL_RCC_OscConfig+0x32a>
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	689b      	ldr	r3, [r3, #8]
 80023dc:	2b05      	cmp	r3, #5
 80023de:	d10c      	bne.n	80023fa <HAL_RCC_OscConfig+0x312>
 80023e0:	4b77      	ldr	r3, [pc, #476]	; (80025c0 <HAL_RCC_OscConfig+0x4d8>)
 80023e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023e4:	4a76      	ldr	r2, [pc, #472]	; (80025c0 <HAL_RCC_OscConfig+0x4d8>)
 80023e6:	f043 0304 	orr.w	r3, r3, #4
 80023ea:	6713      	str	r3, [r2, #112]	; 0x70
 80023ec:	4b74      	ldr	r3, [pc, #464]	; (80025c0 <HAL_RCC_OscConfig+0x4d8>)
 80023ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023f0:	4a73      	ldr	r2, [pc, #460]	; (80025c0 <HAL_RCC_OscConfig+0x4d8>)
 80023f2:	f043 0301 	orr.w	r3, r3, #1
 80023f6:	6713      	str	r3, [r2, #112]	; 0x70
 80023f8:	e00b      	b.n	8002412 <HAL_RCC_OscConfig+0x32a>
 80023fa:	4b71      	ldr	r3, [pc, #452]	; (80025c0 <HAL_RCC_OscConfig+0x4d8>)
 80023fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023fe:	4a70      	ldr	r2, [pc, #448]	; (80025c0 <HAL_RCC_OscConfig+0x4d8>)
 8002400:	f023 0301 	bic.w	r3, r3, #1
 8002404:	6713      	str	r3, [r2, #112]	; 0x70
 8002406:	4b6e      	ldr	r3, [pc, #440]	; (80025c0 <HAL_RCC_OscConfig+0x4d8>)
 8002408:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800240a:	4a6d      	ldr	r2, [pc, #436]	; (80025c0 <HAL_RCC_OscConfig+0x4d8>)
 800240c:	f023 0304 	bic.w	r3, r3, #4
 8002410:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	689b      	ldr	r3, [r3, #8]
 8002416:	2b00      	cmp	r3, #0
 8002418:	d015      	beq.n	8002446 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800241a:	f7ff fb6f 	bl	8001afc <HAL_GetTick>
 800241e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002420:	e00a      	b.n	8002438 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002422:	f7ff fb6b 	bl	8001afc <HAL_GetTick>
 8002426:	4602      	mov	r2, r0
 8002428:	693b      	ldr	r3, [r7, #16]
 800242a:	1ad3      	subs	r3, r2, r3
 800242c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002430:	4293      	cmp	r3, r2
 8002432:	d901      	bls.n	8002438 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002434:	2303      	movs	r3, #3
 8002436:	e0bc      	b.n	80025b2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002438:	4b61      	ldr	r3, [pc, #388]	; (80025c0 <HAL_RCC_OscConfig+0x4d8>)
 800243a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800243c:	f003 0302 	and.w	r3, r3, #2
 8002440:	2b00      	cmp	r3, #0
 8002442:	d0ee      	beq.n	8002422 <HAL_RCC_OscConfig+0x33a>
 8002444:	e014      	b.n	8002470 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002446:	f7ff fb59 	bl	8001afc <HAL_GetTick>
 800244a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800244c:	e00a      	b.n	8002464 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800244e:	f7ff fb55 	bl	8001afc <HAL_GetTick>
 8002452:	4602      	mov	r2, r0
 8002454:	693b      	ldr	r3, [r7, #16]
 8002456:	1ad3      	subs	r3, r2, r3
 8002458:	f241 3288 	movw	r2, #5000	; 0x1388
 800245c:	4293      	cmp	r3, r2
 800245e:	d901      	bls.n	8002464 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002460:	2303      	movs	r3, #3
 8002462:	e0a6      	b.n	80025b2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002464:	4b56      	ldr	r3, [pc, #344]	; (80025c0 <HAL_RCC_OscConfig+0x4d8>)
 8002466:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002468:	f003 0302 	and.w	r3, r3, #2
 800246c:	2b00      	cmp	r3, #0
 800246e:	d1ee      	bne.n	800244e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002470:	7dfb      	ldrb	r3, [r7, #23]
 8002472:	2b01      	cmp	r3, #1
 8002474:	d105      	bne.n	8002482 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002476:	4b52      	ldr	r3, [pc, #328]	; (80025c0 <HAL_RCC_OscConfig+0x4d8>)
 8002478:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800247a:	4a51      	ldr	r2, [pc, #324]	; (80025c0 <HAL_RCC_OscConfig+0x4d8>)
 800247c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002480:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	699b      	ldr	r3, [r3, #24]
 8002486:	2b00      	cmp	r3, #0
 8002488:	f000 8092 	beq.w	80025b0 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800248c:	4b4c      	ldr	r3, [pc, #304]	; (80025c0 <HAL_RCC_OscConfig+0x4d8>)
 800248e:	689b      	ldr	r3, [r3, #8]
 8002490:	f003 030c 	and.w	r3, r3, #12
 8002494:	2b08      	cmp	r3, #8
 8002496:	d05c      	beq.n	8002552 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	699b      	ldr	r3, [r3, #24]
 800249c:	2b02      	cmp	r3, #2
 800249e:	d141      	bne.n	8002524 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80024a0:	4b48      	ldr	r3, [pc, #288]	; (80025c4 <HAL_RCC_OscConfig+0x4dc>)
 80024a2:	2200      	movs	r2, #0
 80024a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024a6:	f7ff fb29 	bl	8001afc <HAL_GetTick>
 80024aa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80024ac:	e008      	b.n	80024c0 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80024ae:	f7ff fb25 	bl	8001afc <HAL_GetTick>
 80024b2:	4602      	mov	r2, r0
 80024b4:	693b      	ldr	r3, [r7, #16]
 80024b6:	1ad3      	subs	r3, r2, r3
 80024b8:	2b02      	cmp	r3, #2
 80024ba:	d901      	bls.n	80024c0 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80024bc:	2303      	movs	r3, #3
 80024be:	e078      	b.n	80025b2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80024c0:	4b3f      	ldr	r3, [pc, #252]	; (80025c0 <HAL_RCC_OscConfig+0x4d8>)
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d1f0      	bne.n	80024ae <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	69da      	ldr	r2, [r3, #28]
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	6a1b      	ldr	r3, [r3, #32]
 80024d4:	431a      	orrs	r2, r3
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024da:	019b      	lsls	r3, r3, #6
 80024dc:	431a      	orrs	r2, r3
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024e2:	085b      	lsrs	r3, r3, #1
 80024e4:	3b01      	subs	r3, #1
 80024e6:	041b      	lsls	r3, r3, #16
 80024e8:	431a      	orrs	r2, r3
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024ee:	061b      	lsls	r3, r3, #24
 80024f0:	4933      	ldr	r1, [pc, #204]	; (80025c0 <HAL_RCC_OscConfig+0x4d8>)
 80024f2:	4313      	orrs	r3, r2
 80024f4:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80024f6:	4b33      	ldr	r3, [pc, #204]	; (80025c4 <HAL_RCC_OscConfig+0x4dc>)
 80024f8:	2201      	movs	r2, #1
 80024fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024fc:	f7ff fafe 	bl	8001afc <HAL_GetTick>
 8002500:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002502:	e008      	b.n	8002516 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002504:	f7ff fafa 	bl	8001afc <HAL_GetTick>
 8002508:	4602      	mov	r2, r0
 800250a:	693b      	ldr	r3, [r7, #16]
 800250c:	1ad3      	subs	r3, r2, r3
 800250e:	2b02      	cmp	r3, #2
 8002510:	d901      	bls.n	8002516 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8002512:	2303      	movs	r3, #3
 8002514:	e04d      	b.n	80025b2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002516:	4b2a      	ldr	r3, [pc, #168]	; (80025c0 <HAL_RCC_OscConfig+0x4d8>)
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800251e:	2b00      	cmp	r3, #0
 8002520:	d0f0      	beq.n	8002504 <HAL_RCC_OscConfig+0x41c>
 8002522:	e045      	b.n	80025b0 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002524:	4b27      	ldr	r3, [pc, #156]	; (80025c4 <HAL_RCC_OscConfig+0x4dc>)
 8002526:	2200      	movs	r2, #0
 8002528:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800252a:	f7ff fae7 	bl	8001afc <HAL_GetTick>
 800252e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002530:	e008      	b.n	8002544 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002532:	f7ff fae3 	bl	8001afc <HAL_GetTick>
 8002536:	4602      	mov	r2, r0
 8002538:	693b      	ldr	r3, [r7, #16]
 800253a:	1ad3      	subs	r3, r2, r3
 800253c:	2b02      	cmp	r3, #2
 800253e:	d901      	bls.n	8002544 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002540:	2303      	movs	r3, #3
 8002542:	e036      	b.n	80025b2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002544:	4b1e      	ldr	r3, [pc, #120]	; (80025c0 <HAL_RCC_OscConfig+0x4d8>)
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800254c:	2b00      	cmp	r3, #0
 800254e:	d1f0      	bne.n	8002532 <HAL_RCC_OscConfig+0x44a>
 8002550:	e02e      	b.n	80025b0 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	699b      	ldr	r3, [r3, #24]
 8002556:	2b01      	cmp	r3, #1
 8002558:	d101      	bne.n	800255e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800255a:	2301      	movs	r3, #1
 800255c:	e029      	b.n	80025b2 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800255e:	4b18      	ldr	r3, [pc, #96]	; (80025c0 <HAL_RCC_OscConfig+0x4d8>)
 8002560:	685b      	ldr	r3, [r3, #4]
 8002562:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	69db      	ldr	r3, [r3, #28]
 800256e:	429a      	cmp	r2, r3
 8002570:	d11c      	bne.n	80025ac <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800257c:	429a      	cmp	r2, r3
 800257e:	d115      	bne.n	80025ac <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8002580:	68fa      	ldr	r2, [r7, #12]
 8002582:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002586:	4013      	ands	r3, r2
 8002588:	687a      	ldr	r2, [r7, #4]
 800258a:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800258c:	4293      	cmp	r3, r2
 800258e:	d10d      	bne.n	80025ac <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800259a:	429a      	cmp	r2, r3
 800259c:	d106      	bne.n	80025ac <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80025a8:	429a      	cmp	r2, r3
 80025aa:	d001      	beq.n	80025b0 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 80025ac:	2301      	movs	r3, #1
 80025ae:	e000      	b.n	80025b2 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 80025b0:	2300      	movs	r3, #0
}
 80025b2:	4618      	mov	r0, r3
 80025b4:	3718      	adds	r7, #24
 80025b6:	46bd      	mov	sp, r7
 80025b8:	bd80      	pop	{r7, pc}
 80025ba:	bf00      	nop
 80025bc:	40007000 	.word	0x40007000
 80025c0:	40023800 	.word	0x40023800
 80025c4:	42470060 	.word	0x42470060

080025c8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80025c8:	b580      	push	{r7, lr}
 80025ca:	b084      	sub	sp, #16
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	6078      	str	r0, [r7, #4]
 80025d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d101      	bne.n	80025dc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80025d8:	2301      	movs	r3, #1
 80025da:	e0cc      	b.n	8002776 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80025dc:	4b68      	ldr	r3, [pc, #416]	; (8002780 <HAL_RCC_ClockConfig+0x1b8>)
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	f003 030f 	and.w	r3, r3, #15
 80025e4:	683a      	ldr	r2, [r7, #0]
 80025e6:	429a      	cmp	r2, r3
 80025e8:	d90c      	bls.n	8002604 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025ea:	4b65      	ldr	r3, [pc, #404]	; (8002780 <HAL_RCC_ClockConfig+0x1b8>)
 80025ec:	683a      	ldr	r2, [r7, #0]
 80025ee:	b2d2      	uxtb	r2, r2
 80025f0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80025f2:	4b63      	ldr	r3, [pc, #396]	; (8002780 <HAL_RCC_ClockConfig+0x1b8>)
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f003 030f 	and.w	r3, r3, #15
 80025fa:	683a      	ldr	r2, [r7, #0]
 80025fc:	429a      	cmp	r2, r3
 80025fe:	d001      	beq.n	8002604 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002600:	2301      	movs	r3, #1
 8002602:	e0b8      	b.n	8002776 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	f003 0302 	and.w	r3, r3, #2
 800260c:	2b00      	cmp	r3, #0
 800260e:	d020      	beq.n	8002652 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	f003 0304 	and.w	r3, r3, #4
 8002618:	2b00      	cmp	r3, #0
 800261a:	d005      	beq.n	8002628 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800261c:	4b59      	ldr	r3, [pc, #356]	; (8002784 <HAL_RCC_ClockConfig+0x1bc>)
 800261e:	689b      	ldr	r3, [r3, #8]
 8002620:	4a58      	ldr	r2, [pc, #352]	; (8002784 <HAL_RCC_ClockConfig+0x1bc>)
 8002622:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002626:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	f003 0308 	and.w	r3, r3, #8
 8002630:	2b00      	cmp	r3, #0
 8002632:	d005      	beq.n	8002640 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002634:	4b53      	ldr	r3, [pc, #332]	; (8002784 <HAL_RCC_ClockConfig+0x1bc>)
 8002636:	689b      	ldr	r3, [r3, #8]
 8002638:	4a52      	ldr	r2, [pc, #328]	; (8002784 <HAL_RCC_ClockConfig+0x1bc>)
 800263a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800263e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002640:	4b50      	ldr	r3, [pc, #320]	; (8002784 <HAL_RCC_ClockConfig+0x1bc>)
 8002642:	689b      	ldr	r3, [r3, #8]
 8002644:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	689b      	ldr	r3, [r3, #8]
 800264c:	494d      	ldr	r1, [pc, #308]	; (8002784 <HAL_RCC_ClockConfig+0x1bc>)
 800264e:	4313      	orrs	r3, r2
 8002650:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	f003 0301 	and.w	r3, r3, #1
 800265a:	2b00      	cmp	r3, #0
 800265c:	d044      	beq.n	80026e8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	685b      	ldr	r3, [r3, #4]
 8002662:	2b01      	cmp	r3, #1
 8002664:	d107      	bne.n	8002676 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002666:	4b47      	ldr	r3, [pc, #284]	; (8002784 <HAL_RCC_ClockConfig+0x1bc>)
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800266e:	2b00      	cmp	r3, #0
 8002670:	d119      	bne.n	80026a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002672:	2301      	movs	r3, #1
 8002674:	e07f      	b.n	8002776 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	685b      	ldr	r3, [r3, #4]
 800267a:	2b02      	cmp	r3, #2
 800267c:	d003      	beq.n	8002686 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002682:	2b03      	cmp	r3, #3
 8002684:	d107      	bne.n	8002696 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002686:	4b3f      	ldr	r3, [pc, #252]	; (8002784 <HAL_RCC_ClockConfig+0x1bc>)
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800268e:	2b00      	cmp	r3, #0
 8002690:	d109      	bne.n	80026a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002692:	2301      	movs	r3, #1
 8002694:	e06f      	b.n	8002776 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002696:	4b3b      	ldr	r3, [pc, #236]	; (8002784 <HAL_RCC_ClockConfig+0x1bc>)
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	f003 0302 	and.w	r3, r3, #2
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d101      	bne.n	80026a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80026a2:	2301      	movs	r3, #1
 80026a4:	e067      	b.n	8002776 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80026a6:	4b37      	ldr	r3, [pc, #220]	; (8002784 <HAL_RCC_ClockConfig+0x1bc>)
 80026a8:	689b      	ldr	r3, [r3, #8]
 80026aa:	f023 0203 	bic.w	r2, r3, #3
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	685b      	ldr	r3, [r3, #4]
 80026b2:	4934      	ldr	r1, [pc, #208]	; (8002784 <HAL_RCC_ClockConfig+0x1bc>)
 80026b4:	4313      	orrs	r3, r2
 80026b6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80026b8:	f7ff fa20 	bl	8001afc <HAL_GetTick>
 80026bc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026be:	e00a      	b.n	80026d6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80026c0:	f7ff fa1c 	bl	8001afc <HAL_GetTick>
 80026c4:	4602      	mov	r2, r0
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	1ad3      	subs	r3, r2, r3
 80026ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80026ce:	4293      	cmp	r3, r2
 80026d0:	d901      	bls.n	80026d6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80026d2:	2303      	movs	r3, #3
 80026d4:	e04f      	b.n	8002776 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026d6:	4b2b      	ldr	r3, [pc, #172]	; (8002784 <HAL_RCC_ClockConfig+0x1bc>)
 80026d8:	689b      	ldr	r3, [r3, #8]
 80026da:	f003 020c 	and.w	r2, r3, #12
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	685b      	ldr	r3, [r3, #4]
 80026e2:	009b      	lsls	r3, r3, #2
 80026e4:	429a      	cmp	r2, r3
 80026e6:	d1eb      	bne.n	80026c0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80026e8:	4b25      	ldr	r3, [pc, #148]	; (8002780 <HAL_RCC_ClockConfig+0x1b8>)
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	f003 030f 	and.w	r3, r3, #15
 80026f0:	683a      	ldr	r2, [r7, #0]
 80026f2:	429a      	cmp	r2, r3
 80026f4:	d20c      	bcs.n	8002710 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026f6:	4b22      	ldr	r3, [pc, #136]	; (8002780 <HAL_RCC_ClockConfig+0x1b8>)
 80026f8:	683a      	ldr	r2, [r7, #0]
 80026fa:	b2d2      	uxtb	r2, r2
 80026fc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80026fe:	4b20      	ldr	r3, [pc, #128]	; (8002780 <HAL_RCC_ClockConfig+0x1b8>)
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	f003 030f 	and.w	r3, r3, #15
 8002706:	683a      	ldr	r2, [r7, #0]
 8002708:	429a      	cmp	r2, r3
 800270a:	d001      	beq.n	8002710 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800270c:	2301      	movs	r3, #1
 800270e:	e032      	b.n	8002776 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	f003 0304 	and.w	r3, r3, #4
 8002718:	2b00      	cmp	r3, #0
 800271a:	d008      	beq.n	800272e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800271c:	4b19      	ldr	r3, [pc, #100]	; (8002784 <HAL_RCC_ClockConfig+0x1bc>)
 800271e:	689b      	ldr	r3, [r3, #8]
 8002720:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	68db      	ldr	r3, [r3, #12]
 8002728:	4916      	ldr	r1, [pc, #88]	; (8002784 <HAL_RCC_ClockConfig+0x1bc>)
 800272a:	4313      	orrs	r3, r2
 800272c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	f003 0308 	and.w	r3, r3, #8
 8002736:	2b00      	cmp	r3, #0
 8002738:	d009      	beq.n	800274e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800273a:	4b12      	ldr	r3, [pc, #72]	; (8002784 <HAL_RCC_ClockConfig+0x1bc>)
 800273c:	689b      	ldr	r3, [r3, #8]
 800273e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	691b      	ldr	r3, [r3, #16]
 8002746:	00db      	lsls	r3, r3, #3
 8002748:	490e      	ldr	r1, [pc, #56]	; (8002784 <HAL_RCC_ClockConfig+0x1bc>)
 800274a:	4313      	orrs	r3, r2
 800274c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800274e:	f000 f821 	bl	8002794 <HAL_RCC_GetSysClockFreq>
 8002752:	4601      	mov	r1, r0
 8002754:	4b0b      	ldr	r3, [pc, #44]	; (8002784 <HAL_RCC_ClockConfig+0x1bc>)
 8002756:	689b      	ldr	r3, [r3, #8]
 8002758:	091b      	lsrs	r3, r3, #4
 800275a:	f003 030f 	and.w	r3, r3, #15
 800275e:	4a0a      	ldr	r2, [pc, #40]	; (8002788 <HAL_RCC_ClockConfig+0x1c0>)
 8002760:	5cd3      	ldrb	r3, [r2, r3]
 8002762:	fa21 f303 	lsr.w	r3, r1, r3
 8002766:	4a09      	ldr	r2, [pc, #36]	; (800278c <HAL_RCC_ClockConfig+0x1c4>)
 8002768:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800276a:	4b09      	ldr	r3, [pc, #36]	; (8002790 <HAL_RCC_ClockConfig+0x1c8>)
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	4618      	mov	r0, r3
 8002770:	f7ff f980 	bl	8001a74 <HAL_InitTick>

  return HAL_OK;
 8002774:	2300      	movs	r3, #0
}
 8002776:	4618      	mov	r0, r3
 8002778:	3710      	adds	r7, #16
 800277a:	46bd      	mov	sp, r7
 800277c:	bd80      	pop	{r7, pc}
 800277e:	bf00      	nop
 8002780:	40023c00 	.word	0x40023c00
 8002784:	40023800 	.word	0x40023800
 8002788:	08004420 	.word	0x08004420
 800278c:	200000b8 	.word	0x200000b8
 8002790:	200000bc 	.word	0x200000bc

08002794 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002794:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002796:	b085      	sub	sp, #20
 8002798:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800279a:	2300      	movs	r3, #0
 800279c:	607b      	str	r3, [r7, #4]
 800279e:	2300      	movs	r3, #0
 80027a0:	60fb      	str	r3, [r7, #12]
 80027a2:	2300      	movs	r3, #0
 80027a4:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80027a6:	2300      	movs	r3, #0
 80027a8:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80027aa:	4b50      	ldr	r3, [pc, #320]	; (80028ec <HAL_RCC_GetSysClockFreq+0x158>)
 80027ac:	689b      	ldr	r3, [r3, #8]
 80027ae:	f003 030c 	and.w	r3, r3, #12
 80027b2:	2b04      	cmp	r3, #4
 80027b4:	d007      	beq.n	80027c6 <HAL_RCC_GetSysClockFreq+0x32>
 80027b6:	2b08      	cmp	r3, #8
 80027b8:	d008      	beq.n	80027cc <HAL_RCC_GetSysClockFreq+0x38>
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	f040 808d 	bne.w	80028da <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80027c0:	4b4b      	ldr	r3, [pc, #300]	; (80028f0 <HAL_RCC_GetSysClockFreq+0x15c>)
 80027c2:	60bb      	str	r3, [r7, #8]
       break;
 80027c4:	e08c      	b.n	80028e0 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80027c6:	4b4b      	ldr	r3, [pc, #300]	; (80028f4 <HAL_RCC_GetSysClockFreq+0x160>)
 80027c8:	60bb      	str	r3, [r7, #8]
      break;
 80027ca:	e089      	b.n	80028e0 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80027cc:	4b47      	ldr	r3, [pc, #284]	; (80028ec <HAL_RCC_GetSysClockFreq+0x158>)
 80027ce:	685b      	ldr	r3, [r3, #4]
 80027d0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80027d4:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80027d6:	4b45      	ldr	r3, [pc, #276]	; (80028ec <HAL_RCC_GetSysClockFreq+0x158>)
 80027d8:	685b      	ldr	r3, [r3, #4]
 80027da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d023      	beq.n	800282a <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80027e2:	4b42      	ldr	r3, [pc, #264]	; (80028ec <HAL_RCC_GetSysClockFreq+0x158>)
 80027e4:	685b      	ldr	r3, [r3, #4]
 80027e6:	099b      	lsrs	r3, r3, #6
 80027e8:	f04f 0400 	mov.w	r4, #0
 80027ec:	f240 11ff 	movw	r1, #511	; 0x1ff
 80027f0:	f04f 0200 	mov.w	r2, #0
 80027f4:	ea03 0501 	and.w	r5, r3, r1
 80027f8:	ea04 0602 	and.w	r6, r4, r2
 80027fc:	4a3d      	ldr	r2, [pc, #244]	; (80028f4 <HAL_RCC_GetSysClockFreq+0x160>)
 80027fe:	fb02 f106 	mul.w	r1, r2, r6
 8002802:	2200      	movs	r2, #0
 8002804:	fb02 f205 	mul.w	r2, r2, r5
 8002808:	440a      	add	r2, r1
 800280a:	493a      	ldr	r1, [pc, #232]	; (80028f4 <HAL_RCC_GetSysClockFreq+0x160>)
 800280c:	fba5 0101 	umull	r0, r1, r5, r1
 8002810:	1853      	adds	r3, r2, r1
 8002812:	4619      	mov	r1, r3
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	f04f 0400 	mov.w	r4, #0
 800281a:	461a      	mov	r2, r3
 800281c:	4623      	mov	r3, r4
 800281e:	f7fd fcdb 	bl	80001d8 <__aeabi_uldivmod>
 8002822:	4603      	mov	r3, r0
 8002824:	460c      	mov	r4, r1
 8002826:	60fb      	str	r3, [r7, #12]
 8002828:	e049      	b.n	80028be <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800282a:	4b30      	ldr	r3, [pc, #192]	; (80028ec <HAL_RCC_GetSysClockFreq+0x158>)
 800282c:	685b      	ldr	r3, [r3, #4]
 800282e:	099b      	lsrs	r3, r3, #6
 8002830:	f04f 0400 	mov.w	r4, #0
 8002834:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002838:	f04f 0200 	mov.w	r2, #0
 800283c:	ea03 0501 	and.w	r5, r3, r1
 8002840:	ea04 0602 	and.w	r6, r4, r2
 8002844:	4629      	mov	r1, r5
 8002846:	4632      	mov	r2, r6
 8002848:	f04f 0300 	mov.w	r3, #0
 800284c:	f04f 0400 	mov.w	r4, #0
 8002850:	0154      	lsls	r4, r2, #5
 8002852:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002856:	014b      	lsls	r3, r1, #5
 8002858:	4619      	mov	r1, r3
 800285a:	4622      	mov	r2, r4
 800285c:	1b49      	subs	r1, r1, r5
 800285e:	eb62 0206 	sbc.w	r2, r2, r6
 8002862:	f04f 0300 	mov.w	r3, #0
 8002866:	f04f 0400 	mov.w	r4, #0
 800286a:	0194      	lsls	r4, r2, #6
 800286c:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002870:	018b      	lsls	r3, r1, #6
 8002872:	1a5b      	subs	r3, r3, r1
 8002874:	eb64 0402 	sbc.w	r4, r4, r2
 8002878:	f04f 0100 	mov.w	r1, #0
 800287c:	f04f 0200 	mov.w	r2, #0
 8002880:	00e2      	lsls	r2, r4, #3
 8002882:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002886:	00d9      	lsls	r1, r3, #3
 8002888:	460b      	mov	r3, r1
 800288a:	4614      	mov	r4, r2
 800288c:	195b      	adds	r3, r3, r5
 800288e:	eb44 0406 	adc.w	r4, r4, r6
 8002892:	f04f 0100 	mov.w	r1, #0
 8002896:	f04f 0200 	mov.w	r2, #0
 800289a:	02a2      	lsls	r2, r4, #10
 800289c:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80028a0:	0299      	lsls	r1, r3, #10
 80028a2:	460b      	mov	r3, r1
 80028a4:	4614      	mov	r4, r2
 80028a6:	4618      	mov	r0, r3
 80028a8:	4621      	mov	r1, r4
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	f04f 0400 	mov.w	r4, #0
 80028b0:	461a      	mov	r2, r3
 80028b2:	4623      	mov	r3, r4
 80028b4:	f7fd fc90 	bl	80001d8 <__aeabi_uldivmod>
 80028b8:	4603      	mov	r3, r0
 80028ba:	460c      	mov	r4, r1
 80028bc:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80028be:	4b0b      	ldr	r3, [pc, #44]	; (80028ec <HAL_RCC_GetSysClockFreq+0x158>)
 80028c0:	685b      	ldr	r3, [r3, #4]
 80028c2:	0c1b      	lsrs	r3, r3, #16
 80028c4:	f003 0303 	and.w	r3, r3, #3
 80028c8:	3301      	adds	r3, #1
 80028ca:	005b      	lsls	r3, r3, #1
 80028cc:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80028ce:	68fa      	ldr	r2, [r7, #12]
 80028d0:	683b      	ldr	r3, [r7, #0]
 80028d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80028d6:	60bb      	str	r3, [r7, #8]
      break;
 80028d8:	e002      	b.n	80028e0 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80028da:	4b05      	ldr	r3, [pc, #20]	; (80028f0 <HAL_RCC_GetSysClockFreq+0x15c>)
 80028dc:	60bb      	str	r3, [r7, #8]
      break;
 80028de:	bf00      	nop
    }
  }
  return sysclockfreq;
 80028e0:	68bb      	ldr	r3, [r7, #8]
}
 80028e2:	4618      	mov	r0, r3
 80028e4:	3714      	adds	r7, #20
 80028e6:	46bd      	mov	sp, r7
 80028e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80028ea:	bf00      	nop
 80028ec:	40023800 	.word	0x40023800
 80028f0:	00f42400 	.word	0x00f42400
 80028f4:	017d7840 	.word	0x017d7840

080028f8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80028f8:	b480      	push	{r7}
 80028fa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80028fc:	4b03      	ldr	r3, [pc, #12]	; (800290c <HAL_RCC_GetHCLKFreq+0x14>)
 80028fe:	681b      	ldr	r3, [r3, #0]
}
 8002900:	4618      	mov	r0, r3
 8002902:	46bd      	mov	sp, r7
 8002904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002908:	4770      	bx	lr
 800290a:	bf00      	nop
 800290c:	200000b8 	.word	0x200000b8

08002910 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002910:	b580      	push	{r7, lr}
 8002912:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002914:	f7ff fff0 	bl	80028f8 <HAL_RCC_GetHCLKFreq>
 8002918:	4601      	mov	r1, r0
 800291a:	4b05      	ldr	r3, [pc, #20]	; (8002930 <HAL_RCC_GetPCLK1Freq+0x20>)
 800291c:	689b      	ldr	r3, [r3, #8]
 800291e:	0a9b      	lsrs	r3, r3, #10
 8002920:	f003 0307 	and.w	r3, r3, #7
 8002924:	4a03      	ldr	r2, [pc, #12]	; (8002934 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002926:	5cd3      	ldrb	r3, [r2, r3]
 8002928:	fa21 f303 	lsr.w	r3, r1, r3
}
 800292c:	4618      	mov	r0, r3
 800292e:	bd80      	pop	{r7, pc}
 8002930:	40023800 	.word	0x40023800
 8002934:	08004430 	.word	0x08004430

08002938 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002938:	b580      	push	{r7, lr}
 800293a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800293c:	f7ff ffdc 	bl	80028f8 <HAL_RCC_GetHCLKFreq>
 8002940:	4601      	mov	r1, r0
 8002942:	4b05      	ldr	r3, [pc, #20]	; (8002958 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002944:	689b      	ldr	r3, [r3, #8]
 8002946:	0b5b      	lsrs	r3, r3, #13
 8002948:	f003 0307 	and.w	r3, r3, #7
 800294c:	4a03      	ldr	r2, [pc, #12]	; (800295c <HAL_RCC_GetPCLK2Freq+0x24>)
 800294e:	5cd3      	ldrb	r3, [r2, r3]
 8002950:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002954:	4618      	mov	r0, r3
 8002956:	bd80      	pop	{r7, pc}
 8002958:	40023800 	.word	0x40023800
 800295c:	08004430 	.word	0x08004430

08002960 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002960:	b580      	push	{r7, lr}
 8002962:	b082      	sub	sp, #8
 8002964:	af00      	add	r7, sp, #0
 8002966:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	2b00      	cmp	r3, #0
 800296c:	d101      	bne.n	8002972 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800296e:	2301      	movs	r3, #1
 8002970:	e01d      	b.n	80029ae <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002978:	b2db      	uxtb	r3, r3
 800297a:	2b00      	cmp	r3, #0
 800297c:	d106      	bne.n	800298c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	2200      	movs	r2, #0
 8002982:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002986:	6878      	ldr	r0, [r7, #4]
 8002988:	f7fe ff2c 	bl	80017e4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	2202      	movs	r2, #2
 8002990:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681a      	ldr	r2, [r3, #0]
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	3304      	adds	r3, #4
 800299c:	4619      	mov	r1, r3
 800299e:	4610      	mov	r0, r2
 80029a0:	f000 fa14 	bl	8002dcc <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	2201      	movs	r2, #1
 80029a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80029ac:	2300      	movs	r3, #0
}
 80029ae:	4618      	mov	r0, r3
 80029b0:	3708      	adds	r7, #8
 80029b2:	46bd      	mov	sp, r7
 80029b4:	bd80      	pop	{r7, pc}

080029b6 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80029b6:	b480      	push	{r7}
 80029b8:	b085      	sub	sp, #20
 80029ba:	af00      	add	r7, sp, #0
 80029bc:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	68da      	ldr	r2, [r3, #12]
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	f042 0201 	orr.w	r2, r2, #1
 80029cc:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	689b      	ldr	r3, [r3, #8]
 80029d4:	f003 0307 	and.w	r3, r3, #7
 80029d8:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	2b06      	cmp	r3, #6
 80029de:	d007      	beq.n	80029f0 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	681a      	ldr	r2, [r3, #0]
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	f042 0201 	orr.w	r2, r2, #1
 80029ee:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80029f0:	2300      	movs	r3, #0
}
 80029f2:	4618      	mov	r0, r3
 80029f4:	3714      	adds	r7, #20
 80029f6:	46bd      	mov	sp, r7
 80029f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029fc:	4770      	bx	lr

080029fe <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80029fe:	b580      	push	{r7, lr}
 8002a00:	b082      	sub	sp, #8
 8002a02:	af00      	add	r7, sp, #0
 8002a04:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	691b      	ldr	r3, [r3, #16]
 8002a0c:	f003 0302 	and.w	r3, r3, #2
 8002a10:	2b02      	cmp	r3, #2
 8002a12:	d122      	bne.n	8002a5a <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	68db      	ldr	r3, [r3, #12]
 8002a1a:	f003 0302 	and.w	r3, r3, #2
 8002a1e:	2b02      	cmp	r3, #2
 8002a20:	d11b      	bne.n	8002a5a <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	f06f 0202 	mvn.w	r2, #2
 8002a2a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	2201      	movs	r2, #1
 8002a30:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	699b      	ldr	r3, [r3, #24]
 8002a38:	f003 0303 	and.w	r3, r3, #3
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d003      	beq.n	8002a48 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002a40:	6878      	ldr	r0, [r7, #4]
 8002a42:	f000 f9a5 	bl	8002d90 <HAL_TIM_IC_CaptureCallback>
 8002a46:	e005      	b.n	8002a54 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a48:	6878      	ldr	r0, [r7, #4]
 8002a4a:	f000 f997 	bl	8002d7c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a4e:	6878      	ldr	r0, [r7, #4]
 8002a50:	f000 f9a8 	bl	8002da4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	2200      	movs	r2, #0
 8002a58:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	691b      	ldr	r3, [r3, #16]
 8002a60:	f003 0304 	and.w	r3, r3, #4
 8002a64:	2b04      	cmp	r3, #4
 8002a66:	d122      	bne.n	8002aae <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	68db      	ldr	r3, [r3, #12]
 8002a6e:	f003 0304 	and.w	r3, r3, #4
 8002a72:	2b04      	cmp	r3, #4
 8002a74:	d11b      	bne.n	8002aae <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	f06f 0204 	mvn.w	r2, #4
 8002a7e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	2202      	movs	r2, #2
 8002a84:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	699b      	ldr	r3, [r3, #24]
 8002a8c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d003      	beq.n	8002a9c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002a94:	6878      	ldr	r0, [r7, #4]
 8002a96:	f000 f97b 	bl	8002d90 <HAL_TIM_IC_CaptureCallback>
 8002a9a:	e005      	b.n	8002aa8 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a9c:	6878      	ldr	r0, [r7, #4]
 8002a9e:	f000 f96d 	bl	8002d7c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002aa2:	6878      	ldr	r0, [r7, #4]
 8002aa4:	f000 f97e 	bl	8002da4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	2200      	movs	r2, #0
 8002aac:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	691b      	ldr	r3, [r3, #16]
 8002ab4:	f003 0308 	and.w	r3, r3, #8
 8002ab8:	2b08      	cmp	r3, #8
 8002aba:	d122      	bne.n	8002b02 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	68db      	ldr	r3, [r3, #12]
 8002ac2:	f003 0308 	and.w	r3, r3, #8
 8002ac6:	2b08      	cmp	r3, #8
 8002ac8:	d11b      	bne.n	8002b02 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f06f 0208 	mvn.w	r2, #8
 8002ad2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	2204      	movs	r2, #4
 8002ad8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	69db      	ldr	r3, [r3, #28]
 8002ae0:	f003 0303 	and.w	r3, r3, #3
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d003      	beq.n	8002af0 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002ae8:	6878      	ldr	r0, [r7, #4]
 8002aea:	f000 f951 	bl	8002d90 <HAL_TIM_IC_CaptureCallback>
 8002aee:	e005      	b.n	8002afc <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002af0:	6878      	ldr	r0, [r7, #4]
 8002af2:	f000 f943 	bl	8002d7c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002af6:	6878      	ldr	r0, [r7, #4]
 8002af8:	f000 f954 	bl	8002da4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	2200      	movs	r2, #0
 8002b00:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	691b      	ldr	r3, [r3, #16]
 8002b08:	f003 0310 	and.w	r3, r3, #16
 8002b0c:	2b10      	cmp	r3, #16
 8002b0e:	d122      	bne.n	8002b56 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	68db      	ldr	r3, [r3, #12]
 8002b16:	f003 0310 	and.w	r3, r3, #16
 8002b1a:	2b10      	cmp	r3, #16
 8002b1c:	d11b      	bne.n	8002b56 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	f06f 0210 	mvn.w	r2, #16
 8002b26:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	2208      	movs	r2, #8
 8002b2c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	69db      	ldr	r3, [r3, #28]
 8002b34:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d003      	beq.n	8002b44 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002b3c:	6878      	ldr	r0, [r7, #4]
 8002b3e:	f000 f927 	bl	8002d90 <HAL_TIM_IC_CaptureCallback>
 8002b42:	e005      	b.n	8002b50 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b44:	6878      	ldr	r0, [r7, #4]
 8002b46:	f000 f919 	bl	8002d7c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b4a:	6878      	ldr	r0, [r7, #4]
 8002b4c:	f000 f92a 	bl	8002da4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	2200      	movs	r2, #0
 8002b54:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	691b      	ldr	r3, [r3, #16]
 8002b5c:	f003 0301 	and.w	r3, r3, #1
 8002b60:	2b01      	cmp	r3, #1
 8002b62:	d10e      	bne.n	8002b82 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	68db      	ldr	r3, [r3, #12]
 8002b6a:	f003 0301 	and.w	r3, r3, #1
 8002b6e:	2b01      	cmp	r3, #1
 8002b70:	d107      	bne.n	8002b82 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f06f 0201 	mvn.w	r2, #1
 8002b7a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002b7c:	6878      	ldr	r0, [r7, #4]
 8002b7e:	f7fe f8a3 	bl	8000cc8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	691b      	ldr	r3, [r3, #16]
 8002b88:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b8c:	2b80      	cmp	r3, #128	; 0x80
 8002b8e:	d10e      	bne.n	8002bae <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	68db      	ldr	r3, [r3, #12]
 8002b96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b9a:	2b80      	cmp	r3, #128	; 0x80
 8002b9c:	d107      	bne.n	8002bae <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002ba6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002ba8:	6878      	ldr	r0, [r7, #4]
 8002baa:	f000 faa1 	bl	80030f0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	691b      	ldr	r3, [r3, #16]
 8002bb4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bb8:	2b40      	cmp	r3, #64	; 0x40
 8002bba:	d10e      	bne.n	8002bda <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	68db      	ldr	r3, [r3, #12]
 8002bc2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bc6:	2b40      	cmp	r3, #64	; 0x40
 8002bc8:	d107      	bne.n	8002bda <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002bd2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002bd4:	6878      	ldr	r0, [r7, #4]
 8002bd6:	f000 f8ef 	bl	8002db8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	691b      	ldr	r3, [r3, #16]
 8002be0:	f003 0320 	and.w	r3, r3, #32
 8002be4:	2b20      	cmp	r3, #32
 8002be6:	d10e      	bne.n	8002c06 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	68db      	ldr	r3, [r3, #12]
 8002bee:	f003 0320 	and.w	r3, r3, #32
 8002bf2:	2b20      	cmp	r3, #32
 8002bf4:	d107      	bne.n	8002c06 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	f06f 0220 	mvn.w	r2, #32
 8002bfe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002c00:	6878      	ldr	r0, [r7, #4]
 8002c02:	f000 fa6b 	bl	80030dc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002c06:	bf00      	nop
 8002c08:	3708      	adds	r7, #8
 8002c0a:	46bd      	mov	sp, r7
 8002c0c:	bd80      	pop	{r7, pc}

08002c0e <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002c0e:	b580      	push	{r7, lr}
 8002c10:	b084      	sub	sp, #16
 8002c12:	af00      	add	r7, sp, #0
 8002c14:	6078      	str	r0, [r7, #4]
 8002c16:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002c1e:	2b01      	cmp	r3, #1
 8002c20:	d101      	bne.n	8002c26 <HAL_TIM_ConfigClockSource+0x18>
 8002c22:	2302      	movs	r3, #2
 8002c24:	e0a6      	b.n	8002d74 <HAL_TIM_ConfigClockSource+0x166>
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	2201      	movs	r2, #1
 8002c2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	2202      	movs	r2, #2
 8002c32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	689b      	ldr	r3, [r3, #8]
 8002c3c:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002c44:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002c4c:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	68fa      	ldr	r2, [r7, #12]
 8002c54:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002c56:	683b      	ldr	r3, [r7, #0]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	2b40      	cmp	r3, #64	; 0x40
 8002c5c:	d067      	beq.n	8002d2e <HAL_TIM_ConfigClockSource+0x120>
 8002c5e:	2b40      	cmp	r3, #64	; 0x40
 8002c60:	d80b      	bhi.n	8002c7a <HAL_TIM_ConfigClockSource+0x6c>
 8002c62:	2b10      	cmp	r3, #16
 8002c64:	d073      	beq.n	8002d4e <HAL_TIM_ConfigClockSource+0x140>
 8002c66:	2b10      	cmp	r3, #16
 8002c68:	d802      	bhi.n	8002c70 <HAL_TIM_ConfigClockSource+0x62>
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d06f      	beq.n	8002d4e <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8002c6e:	e078      	b.n	8002d62 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8002c70:	2b20      	cmp	r3, #32
 8002c72:	d06c      	beq.n	8002d4e <HAL_TIM_ConfigClockSource+0x140>
 8002c74:	2b30      	cmp	r3, #48	; 0x30
 8002c76:	d06a      	beq.n	8002d4e <HAL_TIM_ConfigClockSource+0x140>
      break;
 8002c78:	e073      	b.n	8002d62 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8002c7a:	2b70      	cmp	r3, #112	; 0x70
 8002c7c:	d00d      	beq.n	8002c9a <HAL_TIM_ConfigClockSource+0x8c>
 8002c7e:	2b70      	cmp	r3, #112	; 0x70
 8002c80:	d804      	bhi.n	8002c8c <HAL_TIM_ConfigClockSource+0x7e>
 8002c82:	2b50      	cmp	r3, #80	; 0x50
 8002c84:	d033      	beq.n	8002cee <HAL_TIM_ConfigClockSource+0xe0>
 8002c86:	2b60      	cmp	r3, #96	; 0x60
 8002c88:	d041      	beq.n	8002d0e <HAL_TIM_ConfigClockSource+0x100>
      break;
 8002c8a:	e06a      	b.n	8002d62 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8002c8c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002c90:	d066      	beq.n	8002d60 <HAL_TIM_ConfigClockSource+0x152>
 8002c92:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002c96:	d017      	beq.n	8002cc8 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8002c98:	e063      	b.n	8002d62 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	6818      	ldr	r0, [r3, #0]
 8002c9e:	683b      	ldr	r3, [r7, #0]
 8002ca0:	6899      	ldr	r1, [r3, #8]
 8002ca2:	683b      	ldr	r3, [r7, #0]
 8002ca4:	685a      	ldr	r2, [r3, #4]
 8002ca6:	683b      	ldr	r3, [r7, #0]
 8002ca8:	68db      	ldr	r3, [r3, #12]
 8002caa:	f000 f989 	bl	8002fc0 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	689b      	ldr	r3, [r3, #8]
 8002cb4:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002cbc:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	68fa      	ldr	r2, [r7, #12]
 8002cc4:	609a      	str	r2, [r3, #8]
      break;
 8002cc6:	e04c      	b.n	8002d62 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	6818      	ldr	r0, [r3, #0]
 8002ccc:	683b      	ldr	r3, [r7, #0]
 8002cce:	6899      	ldr	r1, [r3, #8]
 8002cd0:	683b      	ldr	r3, [r7, #0]
 8002cd2:	685a      	ldr	r2, [r3, #4]
 8002cd4:	683b      	ldr	r3, [r7, #0]
 8002cd6:	68db      	ldr	r3, [r3, #12]
 8002cd8:	f000 f972 	bl	8002fc0 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	689a      	ldr	r2, [r3, #8]
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002cea:	609a      	str	r2, [r3, #8]
      break;
 8002cec:	e039      	b.n	8002d62 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	6818      	ldr	r0, [r3, #0]
 8002cf2:	683b      	ldr	r3, [r7, #0]
 8002cf4:	6859      	ldr	r1, [r3, #4]
 8002cf6:	683b      	ldr	r3, [r7, #0]
 8002cf8:	68db      	ldr	r3, [r3, #12]
 8002cfa:	461a      	mov	r2, r3
 8002cfc:	f000 f8e6 	bl	8002ecc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	2150      	movs	r1, #80	; 0x50
 8002d06:	4618      	mov	r0, r3
 8002d08:	f000 f93f 	bl	8002f8a <TIM_ITRx_SetConfig>
      break;
 8002d0c:	e029      	b.n	8002d62 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	6818      	ldr	r0, [r3, #0]
 8002d12:	683b      	ldr	r3, [r7, #0]
 8002d14:	6859      	ldr	r1, [r3, #4]
 8002d16:	683b      	ldr	r3, [r7, #0]
 8002d18:	68db      	ldr	r3, [r3, #12]
 8002d1a:	461a      	mov	r2, r3
 8002d1c:	f000 f905 	bl	8002f2a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	2160      	movs	r1, #96	; 0x60
 8002d26:	4618      	mov	r0, r3
 8002d28:	f000 f92f 	bl	8002f8a <TIM_ITRx_SetConfig>
      break;
 8002d2c:	e019      	b.n	8002d62 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	6818      	ldr	r0, [r3, #0]
 8002d32:	683b      	ldr	r3, [r7, #0]
 8002d34:	6859      	ldr	r1, [r3, #4]
 8002d36:	683b      	ldr	r3, [r7, #0]
 8002d38:	68db      	ldr	r3, [r3, #12]
 8002d3a:	461a      	mov	r2, r3
 8002d3c:	f000 f8c6 	bl	8002ecc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	2140      	movs	r1, #64	; 0x40
 8002d46:	4618      	mov	r0, r3
 8002d48:	f000 f91f 	bl	8002f8a <TIM_ITRx_SetConfig>
      break;
 8002d4c:	e009      	b.n	8002d62 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681a      	ldr	r2, [r3, #0]
 8002d52:	683b      	ldr	r3, [r7, #0]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	4619      	mov	r1, r3
 8002d58:	4610      	mov	r0, r2
 8002d5a:	f000 f916 	bl	8002f8a <TIM_ITRx_SetConfig>
      break;
 8002d5e:	e000      	b.n	8002d62 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8002d60:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	2201      	movs	r2, #1
 8002d66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	2200      	movs	r2, #0
 8002d6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002d72:	2300      	movs	r3, #0
}
 8002d74:	4618      	mov	r0, r3
 8002d76:	3710      	adds	r7, #16
 8002d78:	46bd      	mov	sp, r7
 8002d7a:	bd80      	pop	{r7, pc}

08002d7c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002d7c:	b480      	push	{r7}
 8002d7e:	b083      	sub	sp, #12
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002d84:	bf00      	nop
 8002d86:	370c      	adds	r7, #12
 8002d88:	46bd      	mov	sp, r7
 8002d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d8e:	4770      	bx	lr

08002d90 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002d90:	b480      	push	{r7}
 8002d92:	b083      	sub	sp, #12
 8002d94:	af00      	add	r7, sp, #0
 8002d96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002d98:	bf00      	nop
 8002d9a:	370c      	adds	r7, #12
 8002d9c:	46bd      	mov	sp, r7
 8002d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da2:	4770      	bx	lr

08002da4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002da4:	b480      	push	{r7}
 8002da6:	b083      	sub	sp, #12
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002dac:	bf00      	nop
 8002dae:	370c      	adds	r7, #12
 8002db0:	46bd      	mov	sp, r7
 8002db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db6:	4770      	bx	lr

08002db8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002db8:	b480      	push	{r7}
 8002dba:	b083      	sub	sp, #12
 8002dbc:	af00      	add	r7, sp, #0
 8002dbe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002dc0:	bf00      	nop
 8002dc2:	370c      	adds	r7, #12
 8002dc4:	46bd      	mov	sp, r7
 8002dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dca:	4770      	bx	lr

08002dcc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002dcc:	b480      	push	{r7}
 8002dce:	b085      	sub	sp, #20
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	6078      	str	r0, [r7, #4]
 8002dd4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	4a34      	ldr	r2, [pc, #208]	; (8002eb0 <TIM_Base_SetConfig+0xe4>)
 8002de0:	4293      	cmp	r3, r2
 8002de2:	d00f      	beq.n	8002e04 <TIM_Base_SetConfig+0x38>
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002dea:	d00b      	beq.n	8002e04 <TIM_Base_SetConfig+0x38>
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	4a31      	ldr	r2, [pc, #196]	; (8002eb4 <TIM_Base_SetConfig+0xe8>)
 8002df0:	4293      	cmp	r3, r2
 8002df2:	d007      	beq.n	8002e04 <TIM_Base_SetConfig+0x38>
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	4a30      	ldr	r2, [pc, #192]	; (8002eb8 <TIM_Base_SetConfig+0xec>)
 8002df8:	4293      	cmp	r3, r2
 8002dfa:	d003      	beq.n	8002e04 <TIM_Base_SetConfig+0x38>
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	4a2f      	ldr	r2, [pc, #188]	; (8002ebc <TIM_Base_SetConfig+0xf0>)
 8002e00:	4293      	cmp	r3, r2
 8002e02:	d108      	bne.n	8002e16 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e0a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002e0c:	683b      	ldr	r3, [r7, #0]
 8002e0e:	685b      	ldr	r3, [r3, #4]
 8002e10:	68fa      	ldr	r2, [r7, #12]
 8002e12:	4313      	orrs	r3, r2
 8002e14:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	4a25      	ldr	r2, [pc, #148]	; (8002eb0 <TIM_Base_SetConfig+0xe4>)
 8002e1a:	4293      	cmp	r3, r2
 8002e1c:	d01b      	beq.n	8002e56 <TIM_Base_SetConfig+0x8a>
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e24:	d017      	beq.n	8002e56 <TIM_Base_SetConfig+0x8a>
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	4a22      	ldr	r2, [pc, #136]	; (8002eb4 <TIM_Base_SetConfig+0xe8>)
 8002e2a:	4293      	cmp	r3, r2
 8002e2c:	d013      	beq.n	8002e56 <TIM_Base_SetConfig+0x8a>
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	4a21      	ldr	r2, [pc, #132]	; (8002eb8 <TIM_Base_SetConfig+0xec>)
 8002e32:	4293      	cmp	r3, r2
 8002e34:	d00f      	beq.n	8002e56 <TIM_Base_SetConfig+0x8a>
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	4a20      	ldr	r2, [pc, #128]	; (8002ebc <TIM_Base_SetConfig+0xf0>)
 8002e3a:	4293      	cmp	r3, r2
 8002e3c:	d00b      	beq.n	8002e56 <TIM_Base_SetConfig+0x8a>
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	4a1f      	ldr	r2, [pc, #124]	; (8002ec0 <TIM_Base_SetConfig+0xf4>)
 8002e42:	4293      	cmp	r3, r2
 8002e44:	d007      	beq.n	8002e56 <TIM_Base_SetConfig+0x8a>
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	4a1e      	ldr	r2, [pc, #120]	; (8002ec4 <TIM_Base_SetConfig+0xf8>)
 8002e4a:	4293      	cmp	r3, r2
 8002e4c:	d003      	beq.n	8002e56 <TIM_Base_SetConfig+0x8a>
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	4a1d      	ldr	r2, [pc, #116]	; (8002ec8 <TIM_Base_SetConfig+0xfc>)
 8002e52:	4293      	cmp	r3, r2
 8002e54:	d108      	bne.n	8002e68 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002e5c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002e5e:	683b      	ldr	r3, [r7, #0]
 8002e60:	68db      	ldr	r3, [r3, #12]
 8002e62:	68fa      	ldr	r2, [r7, #12]
 8002e64:	4313      	orrs	r3, r2
 8002e66:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002e6e:	683b      	ldr	r3, [r7, #0]
 8002e70:	695b      	ldr	r3, [r3, #20]
 8002e72:	4313      	orrs	r3, r2
 8002e74:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	68fa      	ldr	r2, [r7, #12]
 8002e7a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002e7c:	683b      	ldr	r3, [r7, #0]
 8002e7e:	689a      	ldr	r2, [r3, #8]
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002e84:	683b      	ldr	r3, [r7, #0]
 8002e86:	681a      	ldr	r2, [r3, #0]
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	4a08      	ldr	r2, [pc, #32]	; (8002eb0 <TIM_Base_SetConfig+0xe4>)
 8002e90:	4293      	cmp	r3, r2
 8002e92:	d103      	bne.n	8002e9c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002e94:	683b      	ldr	r3, [r7, #0]
 8002e96:	691a      	ldr	r2, [r3, #16]
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	2201      	movs	r2, #1
 8002ea0:	615a      	str	r2, [r3, #20]
}
 8002ea2:	bf00      	nop
 8002ea4:	3714      	adds	r7, #20
 8002ea6:	46bd      	mov	sp, r7
 8002ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eac:	4770      	bx	lr
 8002eae:	bf00      	nop
 8002eb0:	40010000 	.word	0x40010000
 8002eb4:	40000400 	.word	0x40000400
 8002eb8:	40000800 	.word	0x40000800
 8002ebc:	40000c00 	.word	0x40000c00
 8002ec0:	40014000 	.word	0x40014000
 8002ec4:	40014400 	.word	0x40014400
 8002ec8:	40014800 	.word	0x40014800

08002ecc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002ecc:	b480      	push	{r7}
 8002ece:	b087      	sub	sp, #28
 8002ed0:	af00      	add	r7, sp, #0
 8002ed2:	60f8      	str	r0, [r7, #12]
 8002ed4:	60b9      	str	r1, [r7, #8]
 8002ed6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	6a1b      	ldr	r3, [r3, #32]
 8002edc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	6a1b      	ldr	r3, [r3, #32]
 8002ee2:	f023 0201 	bic.w	r2, r3, #1
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	699b      	ldr	r3, [r3, #24]
 8002eee:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002ef0:	693b      	ldr	r3, [r7, #16]
 8002ef2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002ef6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	011b      	lsls	r3, r3, #4
 8002efc:	693a      	ldr	r2, [r7, #16]
 8002efe:	4313      	orrs	r3, r2
 8002f00:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002f02:	697b      	ldr	r3, [r7, #20]
 8002f04:	f023 030a 	bic.w	r3, r3, #10
 8002f08:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002f0a:	697a      	ldr	r2, [r7, #20]
 8002f0c:	68bb      	ldr	r3, [r7, #8]
 8002f0e:	4313      	orrs	r3, r2
 8002f10:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	693a      	ldr	r2, [r7, #16]
 8002f16:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	697a      	ldr	r2, [r7, #20]
 8002f1c:	621a      	str	r2, [r3, #32]
}
 8002f1e:	bf00      	nop
 8002f20:	371c      	adds	r7, #28
 8002f22:	46bd      	mov	sp, r7
 8002f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f28:	4770      	bx	lr

08002f2a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002f2a:	b480      	push	{r7}
 8002f2c:	b087      	sub	sp, #28
 8002f2e:	af00      	add	r7, sp, #0
 8002f30:	60f8      	str	r0, [r7, #12]
 8002f32:	60b9      	str	r1, [r7, #8]
 8002f34:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	6a1b      	ldr	r3, [r3, #32]
 8002f3a:	f023 0210 	bic.w	r2, r3, #16
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	699b      	ldr	r3, [r3, #24]
 8002f46:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	6a1b      	ldr	r3, [r3, #32]
 8002f4c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002f4e:	697b      	ldr	r3, [r7, #20]
 8002f50:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002f54:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	031b      	lsls	r3, r3, #12
 8002f5a:	697a      	ldr	r2, [r7, #20]
 8002f5c:	4313      	orrs	r3, r2
 8002f5e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002f60:	693b      	ldr	r3, [r7, #16]
 8002f62:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002f66:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002f68:	68bb      	ldr	r3, [r7, #8]
 8002f6a:	011b      	lsls	r3, r3, #4
 8002f6c:	693a      	ldr	r2, [r7, #16]
 8002f6e:	4313      	orrs	r3, r2
 8002f70:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	697a      	ldr	r2, [r7, #20]
 8002f76:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	693a      	ldr	r2, [r7, #16]
 8002f7c:	621a      	str	r2, [r3, #32]
}
 8002f7e:	bf00      	nop
 8002f80:	371c      	adds	r7, #28
 8002f82:	46bd      	mov	sp, r7
 8002f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f88:	4770      	bx	lr

08002f8a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002f8a:	b480      	push	{r7}
 8002f8c:	b085      	sub	sp, #20
 8002f8e:	af00      	add	r7, sp, #0
 8002f90:	6078      	str	r0, [r7, #4]
 8002f92:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	689b      	ldr	r3, [r3, #8]
 8002f98:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002fa0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002fa2:	683a      	ldr	r2, [r7, #0]
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	4313      	orrs	r3, r2
 8002fa8:	f043 0307 	orr.w	r3, r3, #7
 8002fac:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	68fa      	ldr	r2, [r7, #12]
 8002fb2:	609a      	str	r2, [r3, #8]
}
 8002fb4:	bf00      	nop
 8002fb6:	3714      	adds	r7, #20
 8002fb8:	46bd      	mov	sp, r7
 8002fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fbe:	4770      	bx	lr

08002fc0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002fc0:	b480      	push	{r7}
 8002fc2:	b087      	sub	sp, #28
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	60f8      	str	r0, [r7, #12]
 8002fc8:	60b9      	str	r1, [r7, #8]
 8002fca:	607a      	str	r2, [r7, #4]
 8002fcc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	689b      	ldr	r3, [r3, #8]
 8002fd2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002fd4:	697b      	ldr	r3, [r7, #20]
 8002fd6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002fda:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002fdc:	683b      	ldr	r3, [r7, #0]
 8002fde:	021a      	lsls	r2, r3, #8
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	431a      	orrs	r2, r3
 8002fe4:	68bb      	ldr	r3, [r7, #8]
 8002fe6:	4313      	orrs	r3, r2
 8002fe8:	697a      	ldr	r2, [r7, #20]
 8002fea:	4313      	orrs	r3, r2
 8002fec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	697a      	ldr	r2, [r7, #20]
 8002ff2:	609a      	str	r2, [r3, #8]
}
 8002ff4:	bf00      	nop
 8002ff6:	371c      	adds	r7, #28
 8002ff8:	46bd      	mov	sp, r7
 8002ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ffe:	4770      	bx	lr

08003000 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003000:	b480      	push	{r7}
 8003002:	b085      	sub	sp, #20
 8003004:	af00      	add	r7, sp, #0
 8003006:	6078      	str	r0, [r7, #4]
 8003008:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003010:	2b01      	cmp	r3, #1
 8003012:	d101      	bne.n	8003018 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003014:	2302      	movs	r3, #2
 8003016:	e050      	b.n	80030ba <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	2201      	movs	r2, #1
 800301c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	2202      	movs	r2, #2
 8003024:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	685b      	ldr	r3, [r3, #4]
 800302e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	689b      	ldr	r3, [r3, #8]
 8003036:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800303e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003040:	683b      	ldr	r3, [r7, #0]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	68fa      	ldr	r2, [r7, #12]
 8003046:	4313      	orrs	r3, r2
 8003048:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	68fa      	ldr	r2, [r7, #12]
 8003050:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	4a1c      	ldr	r2, [pc, #112]	; (80030c8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8003058:	4293      	cmp	r3, r2
 800305a:	d018      	beq.n	800308e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003064:	d013      	beq.n	800308e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	4a18      	ldr	r2, [pc, #96]	; (80030cc <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800306c:	4293      	cmp	r3, r2
 800306e:	d00e      	beq.n	800308e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	4a16      	ldr	r2, [pc, #88]	; (80030d0 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8003076:	4293      	cmp	r3, r2
 8003078:	d009      	beq.n	800308e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	4a15      	ldr	r2, [pc, #84]	; (80030d4 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8003080:	4293      	cmp	r3, r2
 8003082:	d004      	beq.n	800308e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	4a13      	ldr	r2, [pc, #76]	; (80030d8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800308a:	4293      	cmp	r3, r2
 800308c:	d10c      	bne.n	80030a8 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800308e:	68bb      	ldr	r3, [r7, #8]
 8003090:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003094:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003096:	683b      	ldr	r3, [r7, #0]
 8003098:	685b      	ldr	r3, [r3, #4]
 800309a:	68ba      	ldr	r2, [r7, #8]
 800309c:	4313      	orrs	r3, r2
 800309e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	68ba      	ldr	r2, [r7, #8]
 80030a6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	2201      	movs	r2, #1
 80030ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	2200      	movs	r2, #0
 80030b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80030b8:	2300      	movs	r3, #0
}
 80030ba:	4618      	mov	r0, r3
 80030bc:	3714      	adds	r7, #20
 80030be:	46bd      	mov	sp, r7
 80030c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c4:	4770      	bx	lr
 80030c6:	bf00      	nop
 80030c8:	40010000 	.word	0x40010000
 80030cc:	40000400 	.word	0x40000400
 80030d0:	40000800 	.word	0x40000800
 80030d4:	40000c00 	.word	0x40000c00
 80030d8:	40014000 	.word	0x40014000

080030dc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80030dc:	b480      	push	{r7}
 80030de:	b083      	sub	sp, #12
 80030e0:	af00      	add	r7, sp, #0
 80030e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80030e4:	bf00      	nop
 80030e6:	370c      	adds	r7, #12
 80030e8:	46bd      	mov	sp, r7
 80030ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ee:	4770      	bx	lr

080030f0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80030f0:	b480      	push	{r7}
 80030f2:	b083      	sub	sp, #12
 80030f4:	af00      	add	r7, sp, #0
 80030f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80030f8:	bf00      	nop
 80030fa:	370c      	adds	r7, #12
 80030fc:	46bd      	mov	sp, r7
 80030fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003102:	4770      	bx	lr

08003104 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003104:	b580      	push	{r7, lr}
 8003106:	b082      	sub	sp, #8
 8003108:	af00      	add	r7, sp, #0
 800310a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	2b00      	cmp	r3, #0
 8003110:	d101      	bne.n	8003116 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003112:	2301      	movs	r3, #1
 8003114:	e03f      	b.n	8003196 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800311c:	b2db      	uxtb	r3, r3
 800311e:	2b00      	cmp	r3, #0
 8003120:	d106      	bne.n	8003130 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	2200      	movs	r2, #0
 8003126:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800312a:	6878      	ldr	r0, [r7, #4]
 800312c:	f7fe fb82 	bl	8001834 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	2224      	movs	r2, #36	; 0x24
 8003134:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	68da      	ldr	r2, [r3, #12]
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003146:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003148:	6878      	ldr	r0, [r7, #4]
 800314a:	f000 fb97 	bl	800387c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	691a      	ldr	r2, [r3, #16]
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800315c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	695a      	ldr	r2, [r3, #20]
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800316c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	68da      	ldr	r2, [r3, #12]
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800317c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	2200      	movs	r2, #0
 8003182:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	2220      	movs	r2, #32
 8003188:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	2220      	movs	r2, #32
 8003190:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8003194:	2300      	movs	r3, #0
}
 8003196:	4618      	mov	r0, r3
 8003198:	3708      	adds	r7, #8
 800319a:	46bd      	mov	sp, r7
 800319c:	bd80      	pop	{r7, pc}

0800319e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800319e:	b580      	push	{r7, lr}
 80031a0:	b088      	sub	sp, #32
 80031a2:	af02      	add	r7, sp, #8
 80031a4:	60f8      	str	r0, [r7, #12]
 80031a6:	60b9      	str	r1, [r7, #8]
 80031a8:	603b      	str	r3, [r7, #0]
 80031aa:	4613      	mov	r3, r2
 80031ac:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 80031ae:	2300      	movs	r3, #0
 80031b0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80031b8:	b2db      	uxtb	r3, r3
 80031ba:	2b20      	cmp	r3, #32
 80031bc:	f040 8083 	bne.w	80032c6 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 80031c0:	68bb      	ldr	r3, [r7, #8]
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d002      	beq.n	80031cc <HAL_UART_Transmit+0x2e>
 80031c6:	88fb      	ldrh	r3, [r7, #6]
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d101      	bne.n	80031d0 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 80031cc:	2301      	movs	r3, #1
 80031ce:	e07b      	b.n	80032c8 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80031d6:	2b01      	cmp	r3, #1
 80031d8:	d101      	bne.n	80031de <HAL_UART_Transmit+0x40>
 80031da:	2302      	movs	r3, #2
 80031dc:	e074      	b.n	80032c8 <HAL_UART_Transmit+0x12a>
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	2201      	movs	r2, #1
 80031e2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	2200      	movs	r2, #0
 80031ea:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	2221      	movs	r2, #33	; 0x21
 80031f0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 80031f4:	f7fe fc82 	bl	8001afc <HAL_GetTick>
 80031f8:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	88fa      	ldrh	r2, [r7, #6]
 80031fe:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	88fa      	ldrh	r2, [r7, #6]
 8003204:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	2200      	movs	r2, #0
 800320a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 800320e:	e042      	b.n	8003296 <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003214:	b29b      	uxth	r3, r3
 8003216:	3b01      	subs	r3, #1
 8003218:	b29a      	uxth	r2, r3
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	689b      	ldr	r3, [r3, #8]
 8003222:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003226:	d122      	bne.n	800326e <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003228:	683b      	ldr	r3, [r7, #0]
 800322a:	9300      	str	r3, [sp, #0]
 800322c:	697b      	ldr	r3, [r7, #20]
 800322e:	2200      	movs	r2, #0
 8003230:	2180      	movs	r1, #128	; 0x80
 8003232:	68f8      	ldr	r0, [r7, #12]
 8003234:	f000 f9b6 	bl	80035a4 <UART_WaitOnFlagUntilTimeout>
 8003238:	4603      	mov	r3, r0
 800323a:	2b00      	cmp	r3, #0
 800323c:	d001      	beq.n	8003242 <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 800323e:	2303      	movs	r3, #3
 8003240:	e042      	b.n	80032c8 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8003242:	68bb      	ldr	r3, [r7, #8]
 8003244:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8003246:	693b      	ldr	r3, [r7, #16]
 8003248:	881b      	ldrh	r3, [r3, #0]
 800324a:	461a      	mov	r2, r3
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003254:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	691b      	ldr	r3, [r3, #16]
 800325a:	2b00      	cmp	r3, #0
 800325c:	d103      	bne.n	8003266 <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 800325e:	68bb      	ldr	r3, [r7, #8]
 8003260:	3302      	adds	r3, #2
 8003262:	60bb      	str	r3, [r7, #8]
 8003264:	e017      	b.n	8003296 <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 8003266:	68bb      	ldr	r3, [r7, #8]
 8003268:	3301      	adds	r3, #1
 800326a:	60bb      	str	r3, [r7, #8]
 800326c:	e013      	b.n	8003296 <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800326e:	683b      	ldr	r3, [r7, #0]
 8003270:	9300      	str	r3, [sp, #0]
 8003272:	697b      	ldr	r3, [r7, #20]
 8003274:	2200      	movs	r2, #0
 8003276:	2180      	movs	r1, #128	; 0x80
 8003278:	68f8      	ldr	r0, [r7, #12]
 800327a:	f000 f993 	bl	80035a4 <UART_WaitOnFlagUntilTimeout>
 800327e:	4603      	mov	r3, r0
 8003280:	2b00      	cmp	r3, #0
 8003282:	d001      	beq.n	8003288 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8003284:	2303      	movs	r3, #3
 8003286:	e01f      	b.n	80032c8 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8003288:	68bb      	ldr	r3, [r7, #8]
 800328a:	1c5a      	adds	r2, r3, #1
 800328c:	60ba      	str	r2, [r7, #8]
 800328e:	781a      	ldrb	r2, [r3, #0]
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800329a:	b29b      	uxth	r3, r3
 800329c:	2b00      	cmp	r3, #0
 800329e:	d1b7      	bne.n	8003210 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80032a0:	683b      	ldr	r3, [r7, #0]
 80032a2:	9300      	str	r3, [sp, #0]
 80032a4:	697b      	ldr	r3, [r7, #20]
 80032a6:	2200      	movs	r2, #0
 80032a8:	2140      	movs	r1, #64	; 0x40
 80032aa:	68f8      	ldr	r0, [r7, #12]
 80032ac:	f000 f97a 	bl	80035a4 <UART_WaitOnFlagUntilTimeout>
 80032b0:	4603      	mov	r3, r0
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d001      	beq.n	80032ba <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 80032b6:	2303      	movs	r3, #3
 80032b8:	e006      	b.n	80032c8 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	2220      	movs	r2, #32
 80032be:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 80032c2:	2300      	movs	r3, #0
 80032c4:	e000      	b.n	80032c8 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 80032c6:	2302      	movs	r3, #2
  }
}
 80032c8:	4618      	mov	r0, r3
 80032ca:	3718      	adds	r7, #24
 80032cc:	46bd      	mov	sp, r7
 80032ce:	bd80      	pop	{r7, pc}

080032d0 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80032d0:	b480      	push	{r7}
 80032d2:	b085      	sub	sp, #20
 80032d4:	af00      	add	r7, sp, #0
 80032d6:	60f8      	str	r0, [r7, #12]
 80032d8:	60b9      	str	r1, [r7, #8]
 80032da:	4613      	mov	r3, r2
 80032dc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80032e4:	b2db      	uxtb	r3, r3
 80032e6:	2b20      	cmp	r3, #32
 80032e8:	d140      	bne.n	800336c <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 80032ea:	68bb      	ldr	r3, [r7, #8]
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d002      	beq.n	80032f6 <HAL_UART_Receive_IT+0x26>
 80032f0:	88fb      	ldrh	r3, [r7, #6]
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d101      	bne.n	80032fa <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80032f6:	2301      	movs	r3, #1
 80032f8:	e039      	b.n	800336e <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003300:	2b01      	cmp	r3, #1
 8003302:	d101      	bne.n	8003308 <HAL_UART_Receive_IT+0x38>
 8003304:	2302      	movs	r3, #2
 8003306:	e032      	b.n	800336e <HAL_UART_Receive_IT+0x9e>
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	2201      	movs	r2, #1
 800330c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	68ba      	ldr	r2, [r7, #8]
 8003314:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	88fa      	ldrh	r2, [r7, #6]
 800331a:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	88fa      	ldrh	r2, [r7, #6]
 8003320:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	2200      	movs	r2, #0
 8003326:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	2222      	movs	r2, #34	; 0x22
 800332c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	2200      	movs	r2, #0
 8003334:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	68da      	ldr	r2, [r3, #12]
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003346:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	695a      	ldr	r2, [r3, #20]
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	f042 0201 	orr.w	r2, r2, #1
 8003356:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	68da      	ldr	r2, [r3, #12]
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	f042 0220 	orr.w	r2, r2, #32
 8003366:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8003368:	2300      	movs	r3, #0
 800336a:	e000      	b.n	800336e <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 800336c:	2302      	movs	r3, #2
  }
}
 800336e:	4618      	mov	r0, r3
 8003370:	3714      	adds	r7, #20
 8003372:	46bd      	mov	sp, r7
 8003374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003378:	4770      	bx	lr
	...

0800337c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800337c:	b580      	push	{r7, lr}
 800337e:	b088      	sub	sp, #32
 8003380:	af00      	add	r7, sp, #0
 8003382:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	68db      	ldr	r3, [r3, #12]
 8003392:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	695b      	ldr	r3, [r3, #20]
 800339a:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 800339c:	2300      	movs	r3, #0
 800339e:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 80033a0:	2300      	movs	r3, #0
 80033a2:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80033a4:	69fb      	ldr	r3, [r7, #28]
 80033a6:	f003 030f 	and.w	r3, r3, #15
 80033aa:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 80033ac:	693b      	ldr	r3, [r7, #16]
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d10d      	bne.n	80033ce <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80033b2:	69fb      	ldr	r3, [r7, #28]
 80033b4:	f003 0320 	and.w	r3, r3, #32
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d008      	beq.n	80033ce <HAL_UART_IRQHandler+0x52>
 80033bc:	69bb      	ldr	r3, [r7, #24]
 80033be:	f003 0320 	and.w	r3, r3, #32
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d003      	beq.n	80033ce <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80033c6:	6878      	ldr	r0, [r7, #4]
 80033c8:	f000 f9d6 	bl	8003778 <UART_Receive_IT>
      return;
 80033cc:	e0d1      	b.n	8003572 <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80033ce:	693b      	ldr	r3, [r7, #16]
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	f000 80b0 	beq.w	8003536 <HAL_UART_IRQHandler+0x1ba>
 80033d6:	697b      	ldr	r3, [r7, #20]
 80033d8:	f003 0301 	and.w	r3, r3, #1
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d105      	bne.n	80033ec <HAL_UART_IRQHandler+0x70>
 80033e0:	69bb      	ldr	r3, [r7, #24]
 80033e2:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	f000 80a5 	beq.w	8003536 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80033ec:	69fb      	ldr	r3, [r7, #28]
 80033ee:	f003 0301 	and.w	r3, r3, #1
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d00a      	beq.n	800340c <HAL_UART_IRQHandler+0x90>
 80033f6:	69bb      	ldr	r3, [r7, #24]
 80033f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d005      	beq.n	800340c <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003404:	f043 0201 	orr.w	r2, r3, #1
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800340c:	69fb      	ldr	r3, [r7, #28]
 800340e:	f003 0304 	and.w	r3, r3, #4
 8003412:	2b00      	cmp	r3, #0
 8003414:	d00a      	beq.n	800342c <HAL_UART_IRQHandler+0xb0>
 8003416:	697b      	ldr	r3, [r7, #20]
 8003418:	f003 0301 	and.w	r3, r3, #1
 800341c:	2b00      	cmp	r3, #0
 800341e:	d005      	beq.n	800342c <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003424:	f043 0202 	orr.w	r2, r3, #2
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800342c:	69fb      	ldr	r3, [r7, #28]
 800342e:	f003 0302 	and.w	r3, r3, #2
 8003432:	2b00      	cmp	r3, #0
 8003434:	d00a      	beq.n	800344c <HAL_UART_IRQHandler+0xd0>
 8003436:	697b      	ldr	r3, [r7, #20]
 8003438:	f003 0301 	and.w	r3, r3, #1
 800343c:	2b00      	cmp	r3, #0
 800343e:	d005      	beq.n	800344c <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003444:	f043 0204 	orr.w	r2, r3, #4
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 800344c:	69fb      	ldr	r3, [r7, #28]
 800344e:	f003 0308 	and.w	r3, r3, #8
 8003452:	2b00      	cmp	r3, #0
 8003454:	d00f      	beq.n	8003476 <HAL_UART_IRQHandler+0xfa>
 8003456:	69bb      	ldr	r3, [r7, #24]
 8003458:	f003 0320 	and.w	r3, r3, #32
 800345c:	2b00      	cmp	r3, #0
 800345e:	d104      	bne.n	800346a <HAL_UART_IRQHandler+0xee>
 8003460:	697b      	ldr	r3, [r7, #20]
 8003462:	f003 0301 	and.w	r3, r3, #1
 8003466:	2b00      	cmp	r3, #0
 8003468:	d005      	beq.n	8003476 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800346e:	f043 0208 	orr.w	r2, r3, #8
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800347a:	2b00      	cmp	r3, #0
 800347c:	d078      	beq.n	8003570 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800347e:	69fb      	ldr	r3, [r7, #28]
 8003480:	f003 0320 	and.w	r3, r3, #32
 8003484:	2b00      	cmp	r3, #0
 8003486:	d007      	beq.n	8003498 <HAL_UART_IRQHandler+0x11c>
 8003488:	69bb      	ldr	r3, [r7, #24]
 800348a:	f003 0320 	and.w	r3, r3, #32
 800348e:	2b00      	cmp	r3, #0
 8003490:	d002      	beq.n	8003498 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8003492:	6878      	ldr	r0, [r7, #4]
 8003494:	f000 f970 	bl	8003778 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	695b      	ldr	r3, [r3, #20]
 800349e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034a2:	2b40      	cmp	r3, #64	; 0x40
 80034a4:	bf0c      	ite	eq
 80034a6:	2301      	moveq	r3, #1
 80034a8:	2300      	movne	r3, #0
 80034aa:	b2db      	uxtb	r3, r3
 80034ac:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034b2:	f003 0308 	and.w	r3, r3, #8
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d102      	bne.n	80034c0 <HAL_UART_IRQHandler+0x144>
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d031      	beq.n	8003524 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80034c0:	6878      	ldr	r0, [r7, #4]
 80034c2:	f000 f8b9 	bl	8003638 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	695b      	ldr	r3, [r3, #20]
 80034cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034d0:	2b40      	cmp	r3, #64	; 0x40
 80034d2:	d123      	bne.n	800351c <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	695a      	ldr	r2, [r3, #20]
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80034e2:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d013      	beq.n	8003514 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80034f0:	4a21      	ldr	r2, [pc, #132]	; (8003578 <HAL_UART_IRQHandler+0x1fc>)
 80034f2:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80034f8:	4618      	mov	r0, r3
 80034fa:	f7fe fc1c 	bl	8001d36 <HAL_DMA_Abort_IT>
 80034fe:	4603      	mov	r3, r0
 8003500:	2b00      	cmp	r3, #0
 8003502:	d016      	beq.n	8003532 <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003508:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800350a:	687a      	ldr	r2, [r7, #4]
 800350c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800350e:	4610      	mov	r0, r2
 8003510:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003512:	e00e      	b.n	8003532 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003514:	6878      	ldr	r0, [r7, #4]
 8003516:	f000 f83b 	bl	8003590 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800351a:	e00a      	b.n	8003532 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800351c:	6878      	ldr	r0, [r7, #4]
 800351e:	f000 f837 	bl	8003590 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003522:	e006      	b.n	8003532 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003524:	6878      	ldr	r0, [r7, #4]
 8003526:	f000 f833 	bl	8003590 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	2200      	movs	r2, #0
 800352e:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8003530:	e01e      	b.n	8003570 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003532:	bf00      	nop
    return;
 8003534:	e01c      	b.n	8003570 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003536:	69fb      	ldr	r3, [r7, #28]
 8003538:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800353c:	2b00      	cmp	r3, #0
 800353e:	d008      	beq.n	8003552 <HAL_UART_IRQHandler+0x1d6>
 8003540:	69bb      	ldr	r3, [r7, #24]
 8003542:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003546:	2b00      	cmp	r3, #0
 8003548:	d003      	beq.n	8003552 <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 800354a:	6878      	ldr	r0, [r7, #4]
 800354c:	f000 f8a6 	bl	800369c <UART_Transmit_IT>
    return;
 8003550:	e00f      	b.n	8003572 <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003552:	69fb      	ldr	r3, [r7, #28]
 8003554:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003558:	2b00      	cmp	r3, #0
 800355a:	d00a      	beq.n	8003572 <HAL_UART_IRQHandler+0x1f6>
 800355c:	69bb      	ldr	r3, [r7, #24]
 800355e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003562:	2b00      	cmp	r3, #0
 8003564:	d005      	beq.n	8003572 <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 8003566:	6878      	ldr	r0, [r7, #4]
 8003568:	f000 f8ee 	bl	8003748 <UART_EndTransmit_IT>
    return;
 800356c:	bf00      	nop
 800356e:	e000      	b.n	8003572 <HAL_UART_IRQHandler+0x1f6>
    return;
 8003570:	bf00      	nop
  }
}
 8003572:	3720      	adds	r7, #32
 8003574:	46bd      	mov	sp, r7
 8003576:	bd80      	pop	{r7, pc}
 8003578:	08003675 	.word	0x08003675

0800357c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800357c:	b480      	push	{r7}
 800357e:	b083      	sub	sp, #12
 8003580:	af00      	add	r7, sp, #0
 8003582:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003584:	bf00      	nop
 8003586:	370c      	adds	r7, #12
 8003588:	46bd      	mov	sp, r7
 800358a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800358e:	4770      	bx	lr

08003590 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003590:	b480      	push	{r7}
 8003592:	b083      	sub	sp, #12
 8003594:	af00      	add	r7, sp, #0
 8003596:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003598:	bf00      	nop
 800359a:	370c      	adds	r7, #12
 800359c:	46bd      	mov	sp, r7
 800359e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a2:	4770      	bx	lr

080035a4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80035a4:	b580      	push	{r7, lr}
 80035a6:	b084      	sub	sp, #16
 80035a8:	af00      	add	r7, sp, #0
 80035aa:	60f8      	str	r0, [r7, #12]
 80035ac:	60b9      	str	r1, [r7, #8]
 80035ae:	603b      	str	r3, [r7, #0]
 80035b0:	4613      	mov	r3, r2
 80035b2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80035b4:	e02c      	b.n	8003610 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80035b6:	69bb      	ldr	r3, [r7, #24]
 80035b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035bc:	d028      	beq.n	8003610 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80035be:	69bb      	ldr	r3, [r7, #24]
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d007      	beq.n	80035d4 <UART_WaitOnFlagUntilTimeout+0x30>
 80035c4:	f7fe fa9a 	bl	8001afc <HAL_GetTick>
 80035c8:	4602      	mov	r2, r0
 80035ca:	683b      	ldr	r3, [r7, #0]
 80035cc:	1ad3      	subs	r3, r2, r3
 80035ce:	69ba      	ldr	r2, [r7, #24]
 80035d0:	429a      	cmp	r2, r3
 80035d2:	d21d      	bcs.n	8003610 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	68da      	ldr	r2, [r3, #12]
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80035e2:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	695a      	ldr	r2, [r3, #20]
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	f022 0201 	bic.w	r2, r2, #1
 80035f2:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	2220      	movs	r2, #32
 80035f8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	2220      	movs	r2, #32
 8003600:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	2200      	movs	r2, #0
 8003608:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 800360c:	2303      	movs	r3, #3
 800360e:	e00f      	b.n	8003630 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	681a      	ldr	r2, [r3, #0]
 8003616:	68bb      	ldr	r3, [r7, #8]
 8003618:	4013      	ands	r3, r2
 800361a:	68ba      	ldr	r2, [r7, #8]
 800361c:	429a      	cmp	r2, r3
 800361e:	bf0c      	ite	eq
 8003620:	2301      	moveq	r3, #1
 8003622:	2300      	movne	r3, #0
 8003624:	b2db      	uxtb	r3, r3
 8003626:	461a      	mov	r2, r3
 8003628:	79fb      	ldrb	r3, [r7, #7]
 800362a:	429a      	cmp	r2, r3
 800362c:	d0c3      	beq.n	80035b6 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800362e:	2300      	movs	r3, #0
}
 8003630:	4618      	mov	r0, r3
 8003632:	3710      	adds	r7, #16
 8003634:	46bd      	mov	sp, r7
 8003636:	bd80      	pop	{r7, pc}

08003638 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003638:	b480      	push	{r7}
 800363a:	b083      	sub	sp, #12
 800363c:	af00      	add	r7, sp, #0
 800363e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	68da      	ldr	r2, [r3, #12]
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800364e:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	695a      	ldr	r2, [r3, #20]
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	f022 0201 	bic.w	r2, r2, #1
 800365e:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	2220      	movs	r2, #32
 8003664:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8003668:	bf00      	nop
 800366a:	370c      	adds	r7, #12
 800366c:	46bd      	mov	sp, r7
 800366e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003672:	4770      	bx	lr

08003674 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003674:	b580      	push	{r7, lr}
 8003676:	b084      	sub	sp, #16
 8003678:	af00      	add	r7, sp, #0
 800367a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003680:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	2200      	movs	r2, #0
 8003686:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	2200      	movs	r2, #0
 800368c:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800368e:	68f8      	ldr	r0, [r7, #12]
 8003690:	f7ff ff7e 	bl	8003590 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003694:	bf00      	nop
 8003696:	3710      	adds	r7, #16
 8003698:	46bd      	mov	sp, r7
 800369a:	bd80      	pop	{r7, pc}

0800369c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800369c:	b480      	push	{r7}
 800369e:	b085      	sub	sp, #20
 80036a0:	af00      	add	r7, sp, #0
 80036a2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80036aa:	b2db      	uxtb	r3, r3
 80036ac:	2b21      	cmp	r3, #33	; 0x21
 80036ae:	d144      	bne.n	800373a <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	689b      	ldr	r3, [r3, #8]
 80036b4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80036b8:	d11a      	bne.n	80036f0 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	6a1b      	ldr	r3, [r3, #32]
 80036be:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	881b      	ldrh	r3, [r3, #0]
 80036c4:	461a      	mov	r2, r3
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80036ce:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	691b      	ldr	r3, [r3, #16]
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d105      	bne.n	80036e4 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	6a1b      	ldr	r3, [r3, #32]
 80036dc:	1c9a      	adds	r2, r3, #2
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	621a      	str	r2, [r3, #32]
 80036e2:	e00e      	b.n	8003702 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	6a1b      	ldr	r3, [r3, #32]
 80036e8:	1c5a      	adds	r2, r3, #1
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	621a      	str	r2, [r3, #32]
 80036ee:	e008      	b.n	8003702 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	6a1b      	ldr	r3, [r3, #32]
 80036f4:	1c59      	adds	r1, r3, #1
 80036f6:	687a      	ldr	r2, [r7, #4]
 80036f8:	6211      	str	r1, [r2, #32]
 80036fa:	781a      	ldrb	r2, [r3, #0]
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003706:	b29b      	uxth	r3, r3
 8003708:	3b01      	subs	r3, #1
 800370a:	b29b      	uxth	r3, r3
 800370c:	687a      	ldr	r2, [r7, #4]
 800370e:	4619      	mov	r1, r3
 8003710:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003712:	2b00      	cmp	r3, #0
 8003714:	d10f      	bne.n	8003736 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	68da      	ldr	r2, [r3, #12]
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003724:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	68da      	ldr	r2, [r3, #12]
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003734:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003736:	2300      	movs	r3, #0
 8003738:	e000      	b.n	800373c <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800373a:	2302      	movs	r3, #2
  }
}
 800373c:	4618      	mov	r0, r3
 800373e:	3714      	adds	r7, #20
 8003740:	46bd      	mov	sp, r7
 8003742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003746:	4770      	bx	lr

08003748 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003748:	b580      	push	{r7, lr}
 800374a:	b082      	sub	sp, #8
 800374c:	af00      	add	r7, sp, #0
 800374e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	68da      	ldr	r2, [r3, #12]
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800375e:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	2220      	movs	r2, #32
 8003764:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003768:	6878      	ldr	r0, [r7, #4]
 800376a:	f7ff ff07 	bl	800357c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800376e:	2300      	movs	r3, #0
}
 8003770:	4618      	mov	r0, r3
 8003772:	3708      	adds	r7, #8
 8003774:	46bd      	mov	sp, r7
 8003776:	bd80      	pop	{r7, pc}

08003778 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003778:	b580      	push	{r7, lr}
 800377a:	b084      	sub	sp, #16
 800377c:	af00      	add	r7, sp, #0
 800377e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8003786:	b2db      	uxtb	r3, r3
 8003788:	2b22      	cmp	r3, #34	; 0x22
 800378a:	d171      	bne.n	8003870 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	689b      	ldr	r3, [r3, #8]
 8003790:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003794:	d123      	bne.n	80037de <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800379a:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	691b      	ldr	r3, [r3, #16]
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d10e      	bne.n	80037c2 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	685b      	ldr	r3, [r3, #4]
 80037aa:	b29b      	uxth	r3, r3
 80037ac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80037b0:	b29a      	uxth	r2, r3
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037ba:	1c9a      	adds	r2, r3, #2
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	629a      	str	r2, [r3, #40]	; 0x28
 80037c0:	e029      	b.n	8003816 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	685b      	ldr	r3, [r3, #4]
 80037c8:	b29b      	uxth	r3, r3
 80037ca:	b2db      	uxtb	r3, r3
 80037cc:	b29a      	uxth	r2, r3
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037d6:	1c5a      	adds	r2, r3, #1
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	629a      	str	r2, [r3, #40]	; 0x28
 80037dc:	e01b      	b.n	8003816 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	691b      	ldr	r3, [r3, #16]
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d10a      	bne.n	80037fc <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	6858      	ldr	r0, [r3, #4]
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037f0:	1c59      	adds	r1, r3, #1
 80037f2:	687a      	ldr	r2, [r7, #4]
 80037f4:	6291      	str	r1, [r2, #40]	; 0x28
 80037f6:	b2c2      	uxtb	r2, r0
 80037f8:	701a      	strb	r2, [r3, #0]
 80037fa:	e00c      	b.n	8003816 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	685b      	ldr	r3, [r3, #4]
 8003802:	b2da      	uxtb	r2, r3
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003808:	1c58      	adds	r0, r3, #1
 800380a:	6879      	ldr	r1, [r7, #4]
 800380c:	6288      	str	r0, [r1, #40]	; 0x28
 800380e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003812:	b2d2      	uxtb	r2, r2
 8003814:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800381a:	b29b      	uxth	r3, r3
 800381c:	3b01      	subs	r3, #1
 800381e:	b29b      	uxth	r3, r3
 8003820:	687a      	ldr	r2, [r7, #4]
 8003822:	4619      	mov	r1, r3
 8003824:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003826:	2b00      	cmp	r3, #0
 8003828:	d120      	bne.n	800386c <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	68da      	ldr	r2, [r3, #12]
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	f022 0220 	bic.w	r2, r2, #32
 8003838:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	68da      	ldr	r2, [r3, #12]
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003848:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	695a      	ldr	r2, [r3, #20]
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	f022 0201 	bic.w	r2, r2, #1
 8003858:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	2220      	movs	r2, #32
 800385e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8003862:	6878      	ldr	r0, [r7, #4]
 8003864:	f7fd ff00 	bl	8001668 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8003868:	2300      	movs	r3, #0
 800386a:	e002      	b.n	8003872 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 800386c:	2300      	movs	r3, #0
 800386e:	e000      	b.n	8003872 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8003870:	2302      	movs	r3, #2
  }
}
 8003872:	4618      	mov	r0, r3
 8003874:	3710      	adds	r7, #16
 8003876:	46bd      	mov	sp, r7
 8003878:	bd80      	pop	{r7, pc}
	...

0800387c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800387c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003880:	b085      	sub	sp, #20
 8003882:	af00      	add	r7, sp, #0
 8003884:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	691b      	ldr	r3, [r3, #16]
 800388c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	68da      	ldr	r2, [r3, #12]
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	430a      	orrs	r2, r1
 800389a:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	689a      	ldr	r2, [r3, #8]
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	691b      	ldr	r3, [r3, #16]
 80038a4:	431a      	orrs	r2, r3
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	695b      	ldr	r3, [r3, #20]
 80038aa:	431a      	orrs	r2, r3
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	69db      	ldr	r3, [r3, #28]
 80038b0:	4313      	orrs	r3, r2
 80038b2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	68db      	ldr	r3, [r3, #12]
 80038ba:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80038be:	f023 030c 	bic.w	r3, r3, #12
 80038c2:	687a      	ldr	r2, [r7, #4]
 80038c4:	6812      	ldr	r2, [r2, #0]
 80038c6:	68f9      	ldr	r1, [r7, #12]
 80038c8:	430b      	orrs	r3, r1
 80038ca:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	695b      	ldr	r3, [r3, #20]
 80038d2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	699a      	ldr	r2, [r3, #24]
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	430a      	orrs	r2, r1
 80038e0:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	69db      	ldr	r3, [r3, #28]
 80038e6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80038ea:	f040 818b 	bne.w	8003c04 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	4ac1      	ldr	r2, [pc, #772]	; (8003bf8 <UART_SetConfig+0x37c>)
 80038f4:	4293      	cmp	r3, r2
 80038f6:	d005      	beq.n	8003904 <UART_SetConfig+0x88>
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	4abf      	ldr	r2, [pc, #764]	; (8003bfc <UART_SetConfig+0x380>)
 80038fe:	4293      	cmp	r3, r2
 8003900:	f040 80bd 	bne.w	8003a7e <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003904:	f7ff f818 	bl	8002938 <HAL_RCC_GetPCLK2Freq>
 8003908:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800390a:	68bb      	ldr	r3, [r7, #8]
 800390c:	461d      	mov	r5, r3
 800390e:	f04f 0600 	mov.w	r6, #0
 8003912:	46a8      	mov	r8, r5
 8003914:	46b1      	mov	r9, r6
 8003916:	eb18 0308 	adds.w	r3, r8, r8
 800391a:	eb49 0409 	adc.w	r4, r9, r9
 800391e:	4698      	mov	r8, r3
 8003920:	46a1      	mov	r9, r4
 8003922:	eb18 0805 	adds.w	r8, r8, r5
 8003926:	eb49 0906 	adc.w	r9, r9, r6
 800392a:	f04f 0100 	mov.w	r1, #0
 800392e:	f04f 0200 	mov.w	r2, #0
 8003932:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003936:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800393a:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800393e:	4688      	mov	r8, r1
 8003940:	4691      	mov	r9, r2
 8003942:	eb18 0005 	adds.w	r0, r8, r5
 8003946:	eb49 0106 	adc.w	r1, r9, r6
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	685b      	ldr	r3, [r3, #4]
 800394e:	461d      	mov	r5, r3
 8003950:	f04f 0600 	mov.w	r6, #0
 8003954:	196b      	adds	r3, r5, r5
 8003956:	eb46 0406 	adc.w	r4, r6, r6
 800395a:	461a      	mov	r2, r3
 800395c:	4623      	mov	r3, r4
 800395e:	f7fc fc3b 	bl	80001d8 <__aeabi_uldivmod>
 8003962:	4603      	mov	r3, r0
 8003964:	460c      	mov	r4, r1
 8003966:	461a      	mov	r2, r3
 8003968:	4ba5      	ldr	r3, [pc, #660]	; (8003c00 <UART_SetConfig+0x384>)
 800396a:	fba3 2302 	umull	r2, r3, r3, r2
 800396e:	095b      	lsrs	r3, r3, #5
 8003970:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003974:	68bb      	ldr	r3, [r7, #8]
 8003976:	461d      	mov	r5, r3
 8003978:	f04f 0600 	mov.w	r6, #0
 800397c:	46a9      	mov	r9, r5
 800397e:	46b2      	mov	sl, r6
 8003980:	eb19 0309 	adds.w	r3, r9, r9
 8003984:	eb4a 040a 	adc.w	r4, sl, sl
 8003988:	4699      	mov	r9, r3
 800398a:	46a2      	mov	sl, r4
 800398c:	eb19 0905 	adds.w	r9, r9, r5
 8003990:	eb4a 0a06 	adc.w	sl, sl, r6
 8003994:	f04f 0100 	mov.w	r1, #0
 8003998:	f04f 0200 	mov.w	r2, #0
 800399c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80039a0:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80039a4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80039a8:	4689      	mov	r9, r1
 80039aa:	4692      	mov	sl, r2
 80039ac:	eb19 0005 	adds.w	r0, r9, r5
 80039b0:	eb4a 0106 	adc.w	r1, sl, r6
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	685b      	ldr	r3, [r3, #4]
 80039b8:	461d      	mov	r5, r3
 80039ba:	f04f 0600 	mov.w	r6, #0
 80039be:	196b      	adds	r3, r5, r5
 80039c0:	eb46 0406 	adc.w	r4, r6, r6
 80039c4:	461a      	mov	r2, r3
 80039c6:	4623      	mov	r3, r4
 80039c8:	f7fc fc06 	bl	80001d8 <__aeabi_uldivmod>
 80039cc:	4603      	mov	r3, r0
 80039ce:	460c      	mov	r4, r1
 80039d0:	461a      	mov	r2, r3
 80039d2:	4b8b      	ldr	r3, [pc, #556]	; (8003c00 <UART_SetConfig+0x384>)
 80039d4:	fba3 1302 	umull	r1, r3, r3, r2
 80039d8:	095b      	lsrs	r3, r3, #5
 80039da:	2164      	movs	r1, #100	; 0x64
 80039dc:	fb01 f303 	mul.w	r3, r1, r3
 80039e0:	1ad3      	subs	r3, r2, r3
 80039e2:	00db      	lsls	r3, r3, #3
 80039e4:	3332      	adds	r3, #50	; 0x32
 80039e6:	4a86      	ldr	r2, [pc, #536]	; (8003c00 <UART_SetConfig+0x384>)
 80039e8:	fba2 2303 	umull	r2, r3, r2, r3
 80039ec:	095b      	lsrs	r3, r3, #5
 80039ee:	005b      	lsls	r3, r3, #1
 80039f0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80039f4:	4498      	add	r8, r3
 80039f6:	68bb      	ldr	r3, [r7, #8]
 80039f8:	461d      	mov	r5, r3
 80039fa:	f04f 0600 	mov.w	r6, #0
 80039fe:	46a9      	mov	r9, r5
 8003a00:	46b2      	mov	sl, r6
 8003a02:	eb19 0309 	adds.w	r3, r9, r9
 8003a06:	eb4a 040a 	adc.w	r4, sl, sl
 8003a0a:	4699      	mov	r9, r3
 8003a0c:	46a2      	mov	sl, r4
 8003a0e:	eb19 0905 	adds.w	r9, r9, r5
 8003a12:	eb4a 0a06 	adc.w	sl, sl, r6
 8003a16:	f04f 0100 	mov.w	r1, #0
 8003a1a:	f04f 0200 	mov.w	r2, #0
 8003a1e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003a22:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003a26:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003a2a:	4689      	mov	r9, r1
 8003a2c:	4692      	mov	sl, r2
 8003a2e:	eb19 0005 	adds.w	r0, r9, r5
 8003a32:	eb4a 0106 	adc.w	r1, sl, r6
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	685b      	ldr	r3, [r3, #4]
 8003a3a:	461d      	mov	r5, r3
 8003a3c:	f04f 0600 	mov.w	r6, #0
 8003a40:	196b      	adds	r3, r5, r5
 8003a42:	eb46 0406 	adc.w	r4, r6, r6
 8003a46:	461a      	mov	r2, r3
 8003a48:	4623      	mov	r3, r4
 8003a4a:	f7fc fbc5 	bl	80001d8 <__aeabi_uldivmod>
 8003a4e:	4603      	mov	r3, r0
 8003a50:	460c      	mov	r4, r1
 8003a52:	461a      	mov	r2, r3
 8003a54:	4b6a      	ldr	r3, [pc, #424]	; (8003c00 <UART_SetConfig+0x384>)
 8003a56:	fba3 1302 	umull	r1, r3, r3, r2
 8003a5a:	095b      	lsrs	r3, r3, #5
 8003a5c:	2164      	movs	r1, #100	; 0x64
 8003a5e:	fb01 f303 	mul.w	r3, r1, r3
 8003a62:	1ad3      	subs	r3, r2, r3
 8003a64:	00db      	lsls	r3, r3, #3
 8003a66:	3332      	adds	r3, #50	; 0x32
 8003a68:	4a65      	ldr	r2, [pc, #404]	; (8003c00 <UART_SetConfig+0x384>)
 8003a6a:	fba2 2303 	umull	r2, r3, r2, r3
 8003a6e:	095b      	lsrs	r3, r3, #5
 8003a70:	f003 0207 	and.w	r2, r3, #7
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	4442      	add	r2, r8
 8003a7a:	609a      	str	r2, [r3, #8]
 8003a7c:	e26f      	b.n	8003f5e <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003a7e:	f7fe ff47 	bl	8002910 <HAL_RCC_GetPCLK1Freq>
 8003a82:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003a84:	68bb      	ldr	r3, [r7, #8]
 8003a86:	461d      	mov	r5, r3
 8003a88:	f04f 0600 	mov.w	r6, #0
 8003a8c:	46a8      	mov	r8, r5
 8003a8e:	46b1      	mov	r9, r6
 8003a90:	eb18 0308 	adds.w	r3, r8, r8
 8003a94:	eb49 0409 	adc.w	r4, r9, r9
 8003a98:	4698      	mov	r8, r3
 8003a9a:	46a1      	mov	r9, r4
 8003a9c:	eb18 0805 	adds.w	r8, r8, r5
 8003aa0:	eb49 0906 	adc.w	r9, r9, r6
 8003aa4:	f04f 0100 	mov.w	r1, #0
 8003aa8:	f04f 0200 	mov.w	r2, #0
 8003aac:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003ab0:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003ab4:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003ab8:	4688      	mov	r8, r1
 8003aba:	4691      	mov	r9, r2
 8003abc:	eb18 0005 	adds.w	r0, r8, r5
 8003ac0:	eb49 0106 	adc.w	r1, r9, r6
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	685b      	ldr	r3, [r3, #4]
 8003ac8:	461d      	mov	r5, r3
 8003aca:	f04f 0600 	mov.w	r6, #0
 8003ace:	196b      	adds	r3, r5, r5
 8003ad0:	eb46 0406 	adc.w	r4, r6, r6
 8003ad4:	461a      	mov	r2, r3
 8003ad6:	4623      	mov	r3, r4
 8003ad8:	f7fc fb7e 	bl	80001d8 <__aeabi_uldivmod>
 8003adc:	4603      	mov	r3, r0
 8003ade:	460c      	mov	r4, r1
 8003ae0:	461a      	mov	r2, r3
 8003ae2:	4b47      	ldr	r3, [pc, #284]	; (8003c00 <UART_SetConfig+0x384>)
 8003ae4:	fba3 2302 	umull	r2, r3, r3, r2
 8003ae8:	095b      	lsrs	r3, r3, #5
 8003aea:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003aee:	68bb      	ldr	r3, [r7, #8]
 8003af0:	461d      	mov	r5, r3
 8003af2:	f04f 0600 	mov.w	r6, #0
 8003af6:	46a9      	mov	r9, r5
 8003af8:	46b2      	mov	sl, r6
 8003afa:	eb19 0309 	adds.w	r3, r9, r9
 8003afe:	eb4a 040a 	adc.w	r4, sl, sl
 8003b02:	4699      	mov	r9, r3
 8003b04:	46a2      	mov	sl, r4
 8003b06:	eb19 0905 	adds.w	r9, r9, r5
 8003b0a:	eb4a 0a06 	adc.w	sl, sl, r6
 8003b0e:	f04f 0100 	mov.w	r1, #0
 8003b12:	f04f 0200 	mov.w	r2, #0
 8003b16:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003b1a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003b1e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003b22:	4689      	mov	r9, r1
 8003b24:	4692      	mov	sl, r2
 8003b26:	eb19 0005 	adds.w	r0, r9, r5
 8003b2a:	eb4a 0106 	adc.w	r1, sl, r6
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	685b      	ldr	r3, [r3, #4]
 8003b32:	461d      	mov	r5, r3
 8003b34:	f04f 0600 	mov.w	r6, #0
 8003b38:	196b      	adds	r3, r5, r5
 8003b3a:	eb46 0406 	adc.w	r4, r6, r6
 8003b3e:	461a      	mov	r2, r3
 8003b40:	4623      	mov	r3, r4
 8003b42:	f7fc fb49 	bl	80001d8 <__aeabi_uldivmod>
 8003b46:	4603      	mov	r3, r0
 8003b48:	460c      	mov	r4, r1
 8003b4a:	461a      	mov	r2, r3
 8003b4c:	4b2c      	ldr	r3, [pc, #176]	; (8003c00 <UART_SetConfig+0x384>)
 8003b4e:	fba3 1302 	umull	r1, r3, r3, r2
 8003b52:	095b      	lsrs	r3, r3, #5
 8003b54:	2164      	movs	r1, #100	; 0x64
 8003b56:	fb01 f303 	mul.w	r3, r1, r3
 8003b5a:	1ad3      	subs	r3, r2, r3
 8003b5c:	00db      	lsls	r3, r3, #3
 8003b5e:	3332      	adds	r3, #50	; 0x32
 8003b60:	4a27      	ldr	r2, [pc, #156]	; (8003c00 <UART_SetConfig+0x384>)
 8003b62:	fba2 2303 	umull	r2, r3, r2, r3
 8003b66:	095b      	lsrs	r3, r3, #5
 8003b68:	005b      	lsls	r3, r3, #1
 8003b6a:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003b6e:	4498      	add	r8, r3
 8003b70:	68bb      	ldr	r3, [r7, #8]
 8003b72:	461d      	mov	r5, r3
 8003b74:	f04f 0600 	mov.w	r6, #0
 8003b78:	46a9      	mov	r9, r5
 8003b7a:	46b2      	mov	sl, r6
 8003b7c:	eb19 0309 	adds.w	r3, r9, r9
 8003b80:	eb4a 040a 	adc.w	r4, sl, sl
 8003b84:	4699      	mov	r9, r3
 8003b86:	46a2      	mov	sl, r4
 8003b88:	eb19 0905 	adds.w	r9, r9, r5
 8003b8c:	eb4a 0a06 	adc.w	sl, sl, r6
 8003b90:	f04f 0100 	mov.w	r1, #0
 8003b94:	f04f 0200 	mov.w	r2, #0
 8003b98:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003b9c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003ba0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003ba4:	4689      	mov	r9, r1
 8003ba6:	4692      	mov	sl, r2
 8003ba8:	eb19 0005 	adds.w	r0, r9, r5
 8003bac:	eb4a 0106 	adc.w	r1, sl, r6
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	685b      	ldr	r3, [r3, #4]
 8003bb4:	461d      	mov	r5, r3
 8003bb6:	f04f 0600 	mov.w	r6, #0
 8003bba:	196b      	adds	r3, r5, r5
 8003bbc:	eb46 0406 	adc.w	r4, r6, r6
 8003bc0:	461a      	mov	r2, r3
 8003bc2:	4623      	mov	r3, r4
 8003bc4:	f7fc fb08 	bl	80001d8 <__aeabi_uldivmod>
 8003bc8:	4603      	mov	r3, r0
 8003bca:	460c      	mov	r4, r1
 8003bcc:	461a      	mov	r2, r3
 8003bce:	4b0c      	ldr	r3, [pc, #48]	; (8003c00 <UART_SetConfig+0x384>)
 8003bd0:	fba3 1302 	umull	r1, r3, r3, r2
 8003bd4:	095b      	lsrs	r3, r3, #5
 8003bd6:	2164      	movs	r1, #100	; 0x64
 8003bd8:	fb01 f303 	mul.w	r3, r1, r3
 8003bdc:	1ad3      	subs	r3, r2, r3
 8003bde:	00db      	lsls	r3, r3, #3
 8003be0:	3332      	adds	r3, #50	; 0x32
 8003be2:	4a07      	ldr	r2, [pc, #28]	; (8003c00 <UART_SetConfig+0x384>)
 8003be4:	fba2 2303 	umull	r2, r3, r2, r3
 8003be8:	095b      	lsrs	r3, r3, #5
 8003bea:	f003 0207 	and.w	r2, r3, #7
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	4442      	add	r2, r8
 8003bf4:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8003bf6:	e1b2      	b.n	8003f5e <UART_SetConfig+0x6e2>
 8003bf8:	40011000 	.word	0x40011000
 8003bfc:	40011400 	.word	0x40011400
 8003c00:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	4ad7      	ldr	r2, [pc, #860]	; (8003f68 <UART_SetConfig+0x6ec>)
 8003c0a:	4293      	cmp	r3, r2
 8003c0c:	d005      	beq.n	8003c1a <UART_SetConfig+0x39e>
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	4ad6      	ldr	r2, [pc, #856]	; (8003f6c <UART_SetConfig+0x6f0>)
 8003c14:	4293      	cmp	r3, r2
 8003c16:	f040 80d1 	bne.w	8003dbc <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8003c1a:	f7fe fe8d 	bl	8002938 <HAL_RCC_GetPCLK2Freq>
 8003c1e:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003c20:	68bb      	ldr	r3, [r7, #8]
 8003c22:	469a      	mov	sl, r3
 8003c24:	f04f 0b00 	mov.w	fp, #0
 8003c28:	46d0      	mov	r8, sl
 8003c2a:	46d9      	mov	r9, fp
 8003c2c:	eb18 0308 	adds.w	r3, r8, r8
 8003c30:	eb49 0409 	adc.w	r4, r9, r9
 8003c34:	4698      	mov	r8, r3
 8003c36:	46a1      	mov	r9, r4
 8003c38:	eb18 080a 	adds.w	r8, r8, sl
 8003c3c:	eb49 090b 	adc.w	r9, r9, fp
 8003c40:	f04f 0100 	mov.w	r1, #0
 8003c44:	f04f 0200 	mov.w	r2, #0
 8003c48:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003c4c:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003c50:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003c54:	4688      	mov	r8, r1
 8003c56:	4691      	mov	r9, r2
 8003c58:	eb1a 0508 	adds.w	r5, sl, r8
 8003c5c:	eb4b 0609 	adc.w	r6, fp, r9
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	685b      	ldr	r3, [r3, #4]
 8003c64:	4619      	mov	r1, r3
 8003c66:	f04f 0200 	mov.w	r2, #0
 8003c6a:	f04f 0300 	mov.w	r3, #0
 8003c6e:	f04f 0400 	mov.w	r4, #0
 8003c72:	0094      	lsls	r4, r2, #2
 8003c74:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003c78:	008b      	lsls	r3, r1, #2
 8003c7a:	461a      	mov	r2, r3
 8003c7c:	4623      	mov	r3, r4
 8003c7e:	4628      	mov	r0, r5
 8003c80:	4631      	mov	r1, r6
 8003c82:	f7fc faa9 	bl	80001d8 <__aeabi_uldivmod>
 8003c86:	4603      	mov	r3, r0
 8003c88:	460c      	mov	r4, r1
 8003c8a:	461a      	mov	r2, r3
 8003c8c:	4bb8      	ldr	r3, [pc, #736]	; (8003f70 <UART_SetConfig+0x6f4>)
 8003c8e:	fba3 2302 	umull	r2, r3, r3, r2
 8003c92:	095b      	lsrs	r3, r3, #5
 8003c94:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003c98:	68bb      	ldr	r3, [r7, #8]
 8003c9a:	469b      	mov	fp, r3
 8003c9c:	f04f 0c00 	mov.w	ip, #0
 8003ca0:	46d9      	mov	r9, fp
 8003ca2:	46e2      	mov	sl, ip
 8003ca4:	eb19 0309 	adds.w	r3, r9, r9
 8003ca8:	eb4a 040a 	adc.w	r4, sl, sl
 8003cac:	4699      	mov	r9, r3
 8003cae:	46a2      	mov	sl, r4
 8003cb0:	eb19 090b 	adds.w	r9, r9, fp
 8003cb4:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003cb8:	f04f 0100 	mov.w	r1, #0
 8003cbc:	f04f 0200 	mov.w	r2, #0
 8003cc0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003cc4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003cc8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003ccc:	4689      	mov	r9, r1
 8003cce:	4692      	mov	sl, r2
 8003cd0:	eb1b 0509 	adds.w	r5, fp, r9
 8003cd4:	eb4c 060a 	adc.w	r6, ip, sl
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	685b      	ldr	r3, [r3, #4]
 8003cdc:	4619      	mov	r1, r3
 8003cde:	f04f 0200 	mov.w	r2, #0
 8003ce2:	f04f 0300 	mov.w	r3, #0
 8003ce6:	f04f 0400 	mov.w	r4, #0
 8003cea:	0094      	lsls	r4, r2, #2
 8003cec:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003cf0:	008b      	lsls	r3, r1, #2
 8003cf2:	461a      	mov	r2, r3
 8003cf4:	4623      	mov	r3, r4
 8003cf6:	4628      	mov	r0, r5
 8003cf8:	4631      	mov	r1, r6
 8003cfa:	f7fc fa6d 	bl	80001d8 <__aeabi_uldivmod>
 8003cfe:	4603      	mov	r3, r0
 8003d00:	460c      	mov	r4, r1
 8003d02:	461a      	mov	r2, r3
 8003d04:	4b9a      	ldr	r3, [pc, #616]	; (8003f70 <UART_SetConfig+0x6f4>)
 8003d06:	fba3 1302 	umull	r1, r3, r3, r2
 8003d0a:	095b      	lsrs	r3, r3, #5
 8003d0c:	2164      	movs	r1, #100	; 0x64
 8003d0e:	fb01 f303 	mul.w	r3, r1, r3
 8003d12:	1ad3      	subs	r3, r2, r3
 8003d14:	011b      	lsls	r3, r3, #4
 8003d16:	3332      	adds	r3, #50	; 0x32
 8003d18:	4a95      	ldr	r2, [pc, #596]	; (8003f70 <UART_SetConfig+0x6f4>)
 8003d1a:	fba2 2303 	umull	r2, r3, r2, r3
 8003d1e:	095b      	lsrs	r3, r3, #5
 8003d20:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003d24:	4498      	add	r8, r3
 8003d26:	68bb      	ldr	r3, [r7, #8]
 8003d28:	469b      	mov	fp, r3
 8003d2a:	f04f 0c00 	mov.w	ip, #0
 8003d2e:	46d9      	mov	r9, fp
 8003d30:	46e2      	mov	sl, ip
 8003d32:	eb19 0309 	adds.w	r3, r9, r9
 8003d36:	eb4a 040a 	adc.w	r4, sl, sl
 8003d3a:	4699      	mov	r9, r3
 8003d3c:	46a2      	mov	sl, r4
 8003d3e:	eb19 090b 	adds.w	r9, r9, fp
 8003d42:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003d46:	f04f 0100 	mov.w	r1, #0
 8003d4a:	f04f 0200 	mov.w	r2, #0
 8003d4e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003d52:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003d56:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003d5a:	4689      	mov	r9, r1
 8003d5c:	4692      	mov	sl, r2
 8003d5e:	eb1b 0509 	adds.w	r5, fp, r9
 8003d62:	eb4c 060a 	adc.w	r6, ip, sl
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	685b      	ldr	r3, [r3, #4]
 8003d6a:	4619      	mov	r1, r3
 8003d6c:	f04f 0200 	mov.w	r2, #0
 8003d70:	f04f 0300 	mov.w	r3, #0
 8003d74:	f04f 0400 	mov.w	r4, #0
 8003d78:	0094      	lsls	r4, r2, #2
 8003d7a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003d7e:	008b      	lsls	r3, r1, #2
 8003d80:	461a      	mov	r2, r3
 8003d82:	4623      	mov	r3, r4
 8003d84:	4628      	mov	r0, r5
 8003d86:	4631      	mov	r1, r6
 8003d88:	f7fc fa26 	bl	80001d8 <__aeabi_uldivmod>
 8003d8c:	4603      	mov	r3, r0
 8003d8e:	460c      	mov	r4, r1
 8003d90:	461a      	mov	r2, r3
 8003d92:	4b77      	ldr	r3, [pc, #476]	; (8003f70 <UART_SetConfig+0x6f4>)
 8003d94:	fba3 1302 	umull	r1, r3, r3, r2
 8003d98:	095b      	lsrs	r3, r3, #5
 8003d9a:	2164      	movs	r1, #100	; 0x64
 8003d9c:	fb01 f303 	mul.w	r3, r1, r3
 8003da0:	1ad3      	subs	r3, r2, r3
 8003da2:	011b      	lsls	r3, r3, #4
 8003da4:	3332      	adds	r3, #50	; 0x32
 8003da6:	4a72      	ldr	r2, [pc, #456]	; (8003f70 <UART_SetConfig+0x6f4>)
 8003da8:	fba2 2303 	umull	r2, r3, r2, r3
 8003dac:	095b      	lsrs	r3, r3, #5
 8003dae:	f003 020f 	and.w	r2, r3, #15
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	4442      	add	r2, r8
 8003db8:	609a      	str	r2, [r3, #8]
 8003dba:	e0d0      	b.n	8003f5e <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8003dbc:	f7fe fda8 	bl	8002910 <HAL_RCC_GetPCLK1Freq>
 8003dc0:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003dc2:	68bb      	ldr	r3, [r7, #8]
 8003dc4:	469a      	mov	sl, r3
 8003dc6:	f04f 0b00 	mov.w	fp, #0
 8003dca:	46d0      	mov	r8, sl
 8003dcc:	46d9      	mov	r9, fp
 8003dce:	eb18 0308 	adds.w	r3, r8, r8
 8003dd2:	eb49 0409 	adc.w	r4, r9, r9
 8003dd6:	4698      	mov	r8, r3
 8003dd8:	46a1      	mov	r9, r4
 8003dda:	eb18 080a 	adds.w	r8, r8, sl
 8003dde:	eb49 090b 	adc.w	r9, r9, fp
 8003de2:	f04f 0100 	mov.w	r1, #0
 8003de6:	f04f 0200 	mov.w	r2, #0
 8003dea:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003dee:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003df2:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003df6:	4688      	mov	r8, r1
 8003df8:	4691      	mov	r9, r2
 8003dfa:	eb1a 0508 	adds.w	r5, sl, r8
 8003dfe:	eb4b 0609 	adc.w	r6, fp, r9
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	685b      	ldr	r3, [r3, #4]
 8003e06:	4619      	mov	r1, r3
 8003e08:	f04f 0200 	mov.w	r2, #0
 8003e0c:	f04f 0300 	mov.w	r3, #0
 8003e10:	f04f 0400 	mov.w	r4, #0
 8003e14:	0094      	lsls	r4, r2, #2
 8003e16:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003e1a:	008b      	lsls	r3, r1, #2
 8003e1c:	461a      	mov	r2, r3
 8003e1e:	4623      	mov	r3, r4
 8003e20:	4628      	mov	r0, r5
 8003e22:	4631      	mov	r1, r6
 8003e24:	f7fc f9d8 	bl	80001d8 <__aeabi_uldivmod>
 8003e28:	4603      	mov	r3, r0
 8003e2a:	460c      	mov	r4, r1
 8003e2c:	461a      	mov	r2, r3
 8003e2e:	4b50      	ldr	r3, [pc, #320]	; (8003f70 <UART_SetConfig+0x6f4>)
 8003e30:	fba3 2302 	umull	r2, r3, r3, r2
 8003e34:	095b      	lsrs	r3, r3, #5
 8003e36:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003e3a:	68bb      	ldr	r3, [r7, #8]
 8003e3c:	469b      	mov	fp, r3
 8003e3e:	f04f 0c00 	mov.w	ip, #0
 8003e42:	46d9      	mov	r9, fp
 8003e44:	46e2      	mov	sl, ip
 8003e46:	eb19 0309 	adds.w	r3, r9, r9
 8003e4a:	eb4a 040a 	adc.w	r4, sl, sl
 8003e4e:	4699      	mov	r9, r3
 8003e50:	46a2      	mov	sl, r4
 8003e52:	eb19 090b 	adds.w	r9, r9, fp
 8003e56:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003e5a:	f04f 0100 	mov.w	r1, #0
 8003e5e:	f04f 0200 	mov.w	r2, #0
 8003e62:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003e66:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003e6a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003e6e:	4689      	mov	r9, r1
 8003e70:	4692      	mov	sl, r2
 8003e72:	eb1b 0509 	adds.w	r5, fp, r9
 8003e76:	eb4c 060a 	adc.w	r6, ip, sl
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	685b      	ldr	r3, [r3, #4]
 8003e7e:	4619      	mov	r1, r3
 8003e80:	f04f 0200 	mov.w	r2, #0
 8003e84:	f04f 0300 	mov.w	r3, #0
 8003e88:	f04f 0400 	mov.w	r4, #0
 8003e8c:	0094      	lsls	r4, r2, #2
 8003e8e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003e92:	008b      	lsls	r3, r1, #2
 8003e94:	461a      	mov	r2, r3
 8003e96:	4623      	mov	r3, r4
 8003e98:	4628      	mov	r0, r5
 8003e9a:	4631      	mov	r1, r6
 8003e9c:	f7fc f99c 	bl	80001d8 <__aeabi_uldivmod>
 8003ea0:	4603      	mov	r3, r0
 8003ea2:	460c      	mov	r4, r1
 8003ea4:	461a      	mov	r2, r3
 8003ea6:	4b32      	ldr	r3, [pc, #200]	; (8003f70 <UART_SetConfig+0x6f4>)
 8003ea8:	fba3 1302 	umull	r1, r3, r3, r2
 8003eac:	095b      	lsrs	r3, r3, #5
 8003eae:	2164      	movs	r1, #100	; 0x64
 8003eb0:	fb01 f303 	mul.w	r3, r1, r3
 8003eb4:	1ad3      	subs	r3, r2, r3
 8003eb6:	011b      	lsls	r3, r3, #4
 8003eb8:	3332      	adds	r3, #50	; 0x32
 8003eba:	4a2d      	ldr	r2, [pc, #180]	; (8003f70 <UART_SetConfig+0x6f4>)
 8003ebc:	fba2 2303 	umull	r2, r3, r2, r3
 8003ec0:	095b      	lsrs	r3, r3, #5
 8003ec2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003ec6:	4498      	add	r8, r3
 8003ec8:	68bb      	ldr	r3, [r7, #8]
 8003eca:	469b      	mov	fp, r3
 8003ecc:	f04f 0c00 	mov.w	ip, #0
 8003ed0:	46d9      	mov	r9, fp
 8003ed2:	46e2      	mov	sl, ip
 8003ed4:	eb19 0309 	adds.w	r3, r9, r9
 8003ed8:	eb4a 040a 	adc.w	r4, sl, sl
 8003edc:	4699      	mov	r9, r3
 8003ede:	46a2      	mov	sl, r4
 8003ee0:	eb19 090b 	adds.w	r9, r9, fp
 8003ee4:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003ee8:	f04f 0100 	mov.w	r1, #0
 8003eec:	f04f 0200 	mov.w	r2, #0
 8003ef0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003ef4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003ef8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003efc:	4689      	mov	r9, r1
 8003efe:	4692      	mov	sl, r2
 8003f00:	eb1b 0509 	adds.w	r5, fp, r9
 8003f04:	eb4c 060a 	adc.w	r6, ip, sl
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	685b      	ldr	r3, [r3, #4]
 8003f0c:	4619      	mov	r1, r3
 8003f0e:	f04f 0200 	mov.w	r2, #0
 8003f12:	f04f 0300 	mov.w	r3, #0
 8003f16:	f04f 0400 	mov.w	r4, #0
 8003f1a:	0094      	lsls	r4, r2, #2
 8003f1c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003f20:	008b      	lsls	r3, r1, #2
 8003f22:	461a      	mov	r2, r3
 8003f24:	4623      	mov	r3, r4
 8003f26:	4628      	mov	r0, r5
 8003f28:	4631      	mov	r1, r6
 8003f2a:	f7fc f955 	bl	80001d8 <__aeabi_uldivmod>
 8003f2e:	4603      	mov	r3, r0
 8003f30:	460c      	mov	r4, r1
 8003f32:	461a      	mov	r2, r3
 8003f34:	4b0e      	ldr	r3, [pc, #56]	; (8003f70 <UART_SetConfig+0x6f4>)
 8003f36:	fba3 1302 	umull	r1, r3, r3, r2
 8003f3a:	095b      	lsrs	r3, r3, #5
 8003f3c:	2164      	movs	r1, #100	; 0x64
 8003f3e:	fb01 f303 	mul.w	r3, r1, r3
 8003f42:	1ad3      	subs	r3, r2, r3
 8003f44:	011b      	lsls	r3, r3, #4
 8003f46:	3332      	adds	r3, #50	; 0x32
 8003f48:	4a09      	ldr	r2, [pc, #36]	; (8003f70 <UART_SetConfig+0x6f4>)
 8003f4a:	fba2 2303 	umull	r2, r3, r2, r3
 8003f4e:	095b      	lsrs	r3, r3, #5
 8003f50:	f003 020f 	and.w	r2, r3, #15
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	4442      	add	r2, r8
 8003f5a:	609a      	str	r2, [r3, #8]
}
 8003f5c:	e7ff      	b.n	8003f5e <UART_SetConfig+0x6e2>
 8003f5e:	bf00      	nop
 8003f60:	3714      	adds	r7, #20
 8003f62:	46bd      	mov	sp, r7
 8003f64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003f68:	40011000 	.word	0x40011000
 8003f6c:	40011400 	.word	0x40011400
 8003f70:	51eb851f 	.word	0x51eb851f

08003f74 <__errno>:
 8003f74:	4b01      	ldr	r3, [pc, #4]	; (8003f7c <__errno+0x8>)
 8003f76:	6818      	ldr	r0, [r3, #0]
 8003f78:	4770      	bx	lr
 8003f7a:	bf00      	nop
 8003f7c:	200000c4 	.word	0x200000c4

08003f80 <__libc_init_array>:
 8003f80:	b570      	push	{r4, r5, r6, lr}
 8003f82:	4e0d      	ldr	r6, [pc, #52]	; (8003fb8 <__libc_init_array+0x38>)
 8003f84:	4c0d      	ldr	r4, [pc, #52]	; (8003fbc <__libc_init_array+0x3c>)
 8003f86:	1ba4      	subs	r4, r4, r6
 8003f88:	10a4      	asrs	r4, r4, #2
 8003f8a:	2500      	movs	r5, #0
 8003f8c:	42a5      	cmp	r5, r4
 8003f8e:	d109      	bne.n	8003fa4 <__libc_init_array+0x24>
 8003f90:	4e0b      	ldr	r6, [pc, #44]	; (8003fc0 <__libc_init_array+0x40>)
 8003f92:	4c0c      	ldr	r4, [pc, #48]	; (8003fc4 <__libc_init_array+0x44>)
 8003f94:	f000 f8d4 	bl	8004140 <_init>
 8003f98:	1ba4      	subs	r4, r4, r6
 8003f9a:	10a4      	asrs	r4, r4, #2
 8003f9c:	2500      	movs	r5, #0
 8003f9e:	42a5      	cmp	r5, r4
 8003fa0:	d105      	bne.n	8003fae <__libc_init_array+0x2e>
 8003fa2:	bd70      	pop	{r4, r5, r6, pc}
 8003fa4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003fa8:	4798      	blx	r3
 8003faa:	3501      	adds	r5, #1
 8003fac:	e7ee      	b.n	8003f8c <__libc_init_array+0xc>
 8003fae:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003fb2:	4798      	blx	r3
 8003fb4:	3501      	adds	r5, #1
 8003fb6:	e7f2      	b.n	8003f9e <__libc_init_array+0x1e>
 8003fb8:	08004440 	.word	0x08004440
 8003fbc:	08004440 	.word	0x08004440
 8003fc0:	08004440 	.word	0x08004440
 8003fc4:	08004444 	.word	0x08004444

08003fc8 <memcpy>:
 8003fc8:	b510      	push	{r4, lr}
 8003fca:	1e43      	subs	r3, r0, #1
 8003fcc:	440a      	add	r2, r1
 8003fce:	4291      	cmp	r1, r2
 8003fd0:	d100      	bne.n	8003fd4 <memcpy+0xc>
 8003fd2:	bd10      	pop	{r4, pc}
 8003fd4:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003fd8:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003fdc:	e7f7      	b.n	8003fce <memcpy+0x6>

08003fde <memset>:
 8003fde:	4402      	add	r2, r0
 8003fe0:	4603      	mov	r3, r0
 8003fe2:	4293      	cmp	r3, r2
 8003fe4:	d100      	bne.n	8003fe8 <memset+0xa>
 8003fe6:	4770      	bx	lr
 8003fe8:	f803 1b01 	strb.w	r1, [r3], #1
 8003fec:	e7f9      	b.n	8003fe2 <memset+0x4>
	...

08003ff0 <rand>:
 8003ff0:	b538      	push	{r3, r4, r5, lr}
 8003ff2:	4b13      	ldr	r3, [pc, #76]	; (8004040 <rand+0x50>)
 8003ff4:	681c      	ldr	r4, [r3, #0]
 8003ff6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003ff8:	b97b      	cbnz	r3, 800401a <rand+0x2a>
 8003ffa:	2018      	movs	r0, #24
 8003ffc:	f000 f82c 	bl	8004058 <malloc>
 8004000:	4a10      	ldr	r2, [pc, #64]	; (8004044 <rand+0x54>)
 8004002:	4b11      	ldr	r3, [pc, #68]	; (8004048 <rand+0x58>)
 8004004:	63a0      	str	r0, [r4, #56]	; 0x38
 8004006:	e9c0 2300 	strd	r2, r3, [r0]
 800400a:	4b10      	ldr	r3, [pc, #64]	; (800404c <rand+0x5c>)
 800400c:	6083      	str	r3, [r0, #8]
 800400e:	230b      	movs	r3, #11
 8004010:	8183      	strh	r3, [r0, #12]
 8004012:	2201      	movs	r2, #1
 8004014:	2300      	movs	r3, #0
 8004016:	e9c0 2304 	strd	r2, r3, [r0, #16]
 800401a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800401c:	480c      	ldr	r0, [pc, #48]	; (8004050 <rand+0x60>)
 800401e:	690a      	ldr	r2, [r1, #16]
 8004020:	694b      	ldr	r3, [r1, #20]
 8004022:	4c0c      	ldr	r4, [pc, #48]	; (8004054 <rand+0x64>)
 8004024:	4350      	muls	r0, r2
 8004026:	fb04 0003 	mla	r0, r4, r3, r0
 800402a:	fba2 2304 	umull	r2, r3, r2, r4
 800402e:	4403      	add	r3, r0
 8004030:	1c54      	adds	r4, r2, #1
 8004032:	f143 0500 	adc.w	r5, r3, #0
 8004036:	e9c1 4504 	strd	r4, r5, [r1, #16]
 800403a:	f025 4000 	bic.w	r0, r5, #2147483648	; 0x80000000
 800403e:	bd38      	pop	{r3, r4, r5, pc}
 8004040:	200000c4 	.word	0x200000c4
 8004044:	abcd330e 	.word	0xabcd330e
 8004048:	e66d1234 	.word	0xe66d1234
 800404c:	0005deec 	.word	0x0005deec
 8004050:	5851f42d 	.word	0x5851f42d
 8004054:	4c957f2d 	.word	0x4c957f2d

08004058 <malloc>:
 8004058:	4b02      	ldr	r3, [pc, #8]	; (8004064 <malloc+0xc>)
 800405a:	4601      	mov	r1, r0
 800405c:	6818      	ldr	r0, [r3, #0]
 800405e:	f000 b803 	b.w	8004068 <_malloc_r>
 8004062:	bf00      	nop
 8004064:	200000c4 	.word	0x200000c4

08004068 <_malloc_r>:
 8004068:	b570      	push	{r4, r5, r6, lr}
 800406a:	1ccd      	adds	r5, r1, #3
 800406c:	f025 0503 	bic.w	r5, r5, #3
 8004070:	3508      	adds	r5, #8
 8004072:	2d0c      	cmp	r5, #12
 8004074:	bf38      	it	cc
 8004076:	250c      	movcc	r5, #12
 8004078:	2d00      	cmp	r5, #0
 800407a:	4606      	mov	r6, r0
 800407c:	db01      	blt.n	8004082 <_malloc_r+0x1a>
 800407e:	42a9      	cmp	r1, r5
 8004080:	d903      	bls.n	800408a <_malloc_r+0x22>
 8004082:	230c      	movs	r3, #12
 8004084:	6033      	str	r3, [r6, #0]
 8004086:	2000      	movs	r0, #0
 8004088:	bd70      	pop	{r4, r5, r6, pc}
 800408a:	f000 f857 	bl	800413c <__malloc_lock>
 800408e:	4a21      	ldr	r2, [pc, #132]	; (8004114 <_malloc_r+0xac>)
 8004090:	6814      	ldr	r4, [r2, #0]
 8004092:	4621      	mov	r1, r4
 8004094:	b991      	cbnz	r1, 80040bc <_malloc_r+0x54>
 8004096:	4c20      	ldr	r4, [pc, #128]	; (8004118 <_malloc_r+0xb0>)
 8004098:	6823      	ldr	r3, [r4, #0]
 800409a:	b91b      	cbnz	r3, 80040a4 <_malloc_r+0x3c>
 800409c:	4630      	mov	r0, r6
 800409e:	f000 f83d 	bl	800411c <_sbrk_r>
 80040a2:	6020      	str	r0, [r4, #0]
 80040a4:	4629      	mov	r1, r5
 80040a6:	4630      	mov	r0, r6
 80040a8:	f000 f838 	bl	800411c <_sbrk_r>
 80040ac:	1c43      	adds	r3, r0, #1
 80040ae:	d124      	bne.n	80040fa <_malloc_r+0x92>
 80040b0:	230c      	movs	r3, #12
 80040b2:	6033      	str	r3, [r6, #0]
 80040b4:	4630      	mov	r0, r6
 80040b6:	f000 f842 	bl	800413e <__malloc_unlock>
 80040ba:	e7e4      	b.n	8004086 <_malloc_r+0x1e>
 80040bc:	680b      	ldr	r3, [r1, #0]
 80040be:	1b5b      	subs	r3, r3, r5
 80040c0:	d418      	bmi.n	80040f4 <_malloc_r+0x8c>
 80040c2:	2b0b      	cmp	r3, #11
 80040c4:	d90f      	bls.n	80040e6 <_malloc_r+0x7e>
 80040c6:	600b      	str	r3, [r1, #0]
 80040c8:	50cd      	str	r5, [r1, r3]
 80040ca:	18cc      	adds	r4, r1, r3
 80040cc:	4630      	mov	r0, r6
 80040ce:	f000 f836 	bl	800413e <__malloc_unlock>
 80040d2:	f104 000b 	add.w	r0, r4, #11
 80040d6:	1d23      	adds	r3, r4, #4
 80040d8:	f020 0007 	bic.w	r0, r0, #7
 80040dc:	1ac3      	subs	r3, r0, r3
 80040de:	d0d3      	beq.n	8004088 <_malloc_r+0x20>
 80040e0:	425a      	negs	r2, r3
 80040e2:	50e2      	str	r2, [r4, r3]
 80040e4:	e7d0      	b.n	8004088 <_malloc_r+0x20>
 80040e6:	428c      	cmp	r4, r1
 80040e8:	684b      	ldr	r3, [r1, #4]
 80040ea:	bf16      	itet	ne
 80040ec:	6063      	strne	r3, [r4, #4]
 80040ee:	6013      	streq	r3, [r2, #0]
 80040f0:	460c      	movne	r4, r1
 80040f2:	e7eb      	b.n	80040cc <_malloc_r+0x64>
 80040f4:	460c      	mov	r4, r1
 80040f6:	6849      	ldr	r1, [r1, #4]
 80040f8:	e7cc      	b.n	8004094 <_malloc_r+0x2c>
 80040fa:	1cc4      	adds	r4, r0, #3
 80040fc:	f024 0403 	bic.w	r4, r4, #3
 8004100:	42a0      	cmp	r0, r4
 8004102:	d005      	beq.n	8004110 <_malloc_r+0xa8>
 8004104:	1a21      	subs	r1, r4, r0
 8004106:	4630      	mov	r0, r6
 8004108:	f000 f808 	bl	800411c <_sbrk_r>
 800410c:	3001      	adds	r0, #1
 800410e:	d0cf      	beq.n	80040b0 <_malloc_r+0x48>
 8004110:	6025      	str	r5, [r4, #0]
 8004112:	e7db      	b.n	80040cc <_malloc_r+0x64>
 8004114:	20000150 	.word	0x20000150
 8004118:	20000154 	.word	0x20000154

0800411c <_sbrk_r>:
 800411c:	b538      	push	{r3, r4, r5, lr}
 800411e:	4c06      	ldr	r4, [pc, #24]	; (8004138 <_sbrk_r+0x1c>)
 8004120:	2300      	movs	r3, #0
 8004122:	4605      	mov	r5, r0
 8004124:	4608      	mov	r0, r1
 8004126:	6023      	str	r3, [r4, #0]
 8004128:	f7fd fc16 	bl	8001958 <_sbrk>
 800412c:	1c43      	adds	r3, r0, #1
 800412e:	d102      	bne.n	8004136 <_sbrk_r+0x1a>
 8004130:	6823      	ldr	r3, [r4, #0]
 8004132:	b103      	cbz	r3, 8004136 <_sbrk_r+0x1a>
 8004134:	602b      	str	r3, [r5, #0]
 8004136:	bd38      	pop	{r3, r4, r5, pc}
 8004138:	20000750 	.word	0x20000750

0800413c <__malloc_lock>:
 800413c:	4770      	bx	lr

0800413e <__malloc_unlock>:
 800413e:	4770      	bx	lr

08004140 <_init>:
 8004140:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004142:	bf00      	nop
 8004144:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004146:	bc08      	pop	{r3}
 8004148:	469e      	mov	lr, r3
 800414a:	4770      	bx	lr

0800414c <_fini>:
 800414c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800414e:	bf00      	nop
 8004150:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004152:	bc08      	pop	{r3}
 8004154:	469e      	mov	lr, r3
 8004156:	4770      	bx	lr
