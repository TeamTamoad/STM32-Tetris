
Final.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003b20  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c8  08003cb8  08003cb8  00013cb8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003d80  08003d80  00020114  2**0
                  CONTENTS
  4 .ARM          00000008  08003d80  08003d80  00013d80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003d88  08003d88  00020114  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003d88  08003d88  00013d88  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003d8c  08003d8c  00013d8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000114  20000000  08003d90  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000041c  20000114  08003ea4  00020114  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000530  08003ea4  00020530  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020114  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000bb86  00000000  00000000  00020144  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001b09  00000000  00000000  0002bcca  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000c08  00000000  00000000  0002d7d8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000b30  00000000  00000000  0002e3e0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000160d7  00000000  00000000  0002ef10  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00009059  00000000  00000000  00044fe7  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0008cc54  00000000  00000000  0004e040  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000dac94  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003410  00000000  00000000  000dad10  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000114 	.word	0x20000114
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08003ca0 	.word	0x08003ca0

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000118 	.word	0x20000118
 80001d4:	08003ca0 	.word	0x08003ca0

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b972 	b.w	80004d4 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9e08      	ldr	r6, [sp, #32]
 800020e:	4604      	mov	r4, r0
 8000210:	4688      	mov	r8, r1
 8000212:	2b00      	cmp	r3, #0
 8000214:	d14b      	bne.n	80002ae <__udivmoddi4+0xa6>
 8000216:	428a      	cmp	r2, r1
 8000218:	4615      	mov	r5, r2
 800021a:	d967      	bls.n	80002ec <__udivmoddi4+0xe4>
 800021c:	fab2 f282 	clz	r2, r2
 8000220:	b14a      	cbz	r2, 8000236 <__udivmoddi4+0x2e>
 8000222:	f1c2 0720 	rsb	r7, r2, #32
 8000226:	fa01 f302 	lsl.w	r3, r1, r2
 800022a:	fa20 f707 	lsr.w	r7, r0, r7
 800022e:	4095      	lsls	r5, r2
 8000230:	ea47 0803 	orr.w	r8, r7, r3
 8000234:	4094      	lsls	r4, r2
 8000236:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800023a:	0c23      	lsrs	r3, r4, #16
 800023c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000240:	fa1f fc85 	uxth.w	ip, r5
 8000244:	fb0e 8817 	mls	r8, lr, r7, r8
 8000248:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800024c:	fb07 f10c 	mul.w	r1, r7, ip
 8000250:	4299      	cmp	r1, r3
 8000252:	d909      	bls.n	8000268 <__udivmoddi4+0x60>
 8000254:	18eb      	adds	r3, r5, r3
 8000256:	f107 30ff 	add.w	r0, r7, #4294967295
 800025a:	f080 811b 	bcs.w	8000494 <__udivmoddi4+0x28c>
 800025e:	4299      	cmp	r1, r3
 8000260:	f240 8118 	bls.w	8000494 <__udivmoddi4+0x28c>
 8000264:	3f02      	subs	r7, #2
 8000266:	442b      	add	r3, r5
 8000268:	1a5b      	subs	r3, r3, r1
 800026a:	b2a4      	uxth	r4, r4
 800026c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000270:	fb0e 3310 	mls	r3, lr, r0, r3
 8000274:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000278:	fb00 fc0c 	mul.w	ip, r0, ip
 800027c:	45a4      	cmp	ip, r4
 800027e:	d909      	bls.n	8000294 <__udivmoddi4+0x8c>
 8000280:	192c      	adds	r4, r5, r4
 8000282:	f100 33ff 	add.w	r3, r0, #4294967295
 8000286:	f080 8107 	bcs.w	8000498 <__udivmoddi4+0x290>
 800028a:	45a4      	cmp	ip, r4
 800028c:	f240 8104 	bls.w	8000498 <__udivmoddi4+0x290>
 8000290:	3802      	subs	r0, #2
 8000292:	442c      	add	r4, r5
 8000294:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000298:	eba4 040c 	sub.w	r4, r4, ip
 800029c:	2700      	movs	r7, #0
 800029e:	b11e      	cbz	r6, 80002a8 <__udivmoddi4+0xa0>
 80002a0:	40d4      	lsrs	r4, r2
 80002a2:	2300      	movs	r3, #0
 80002a4:	e9c6 4300 	strd	r4, r3, [r6]
 80002a8:	4639      	mov	r1, r7
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d909      	bls.n	80002c6 <__udivmoddi4+0xbe>
 80002b2:	2e00      	cmp	r6, #0
 80002b4:	f000 80eb 	beq.w	800048e <__udivmoddi4+0x286>
 80002b8:	2700      	movs	r7, #0
 80002ba:	e9c6 0100 	strd	r0, r1, [r6]
 80002be:	4638      	mov	r0, r7
 80002c0:	4639      	mov	r1, r7
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	fab3 f783 	clz	r7, r3
 80002ca:	2f00      	cmp	r7, #0
 80002cc:	d147      	bne.n	800035e <__udivmoddi4+0x156>
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d302      	bcc.n	80002d8 <__udivmoddi4+0xd0>
 80002d2:	4282      	cmp	r2, r0
 80002d4:	f200 80fa 	bhi.w	80004cc <__udivmoddi4+0x2c4>
 80002d8:	1a84      	subs	r4, r0, r2
 80002da:	eb61 0303 	sbc.w	r3, r1, r3
 80002de:	2001      	movs	r0, #1
 80002e0:	4698      	mov	r8, r3
 80002e2:	2e00      	cmp	r6, #0
 80002e4:	d0e0      	beq.n	80002a8 <__udivmoddi4+0xa0>
 80002e6:	e9c6 4800 	strd	r4, r8, [r6]
 80002ea:	e7dd      	b.n	80002a8 <__udivmoddi4+0xa0>
 80002ec:	b902      	cbnz	r2, 80002f0 <__udivmoddi4+0xe8>
 80002ee:	deff      	udf	#255	; 0xff
 80002f0:	fab2 f282 	clz	r2, r2
 80002f4:	2a00      	cmp	r2, #0
 80002f6:	f040 808f 	bne.w	8000418 <__udivmoddi4+0x210>
 80002fa:	1b49      	subs	r1, r1, r5
 80002fc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000300:	fa1f f885 	uxth.w	r8, r5
 8000304:	2701      	movs	r7, #1
 8000306:	fbb1 fcfe 	udiv	ip, r1, lr
 800030a:	0c23      	lsrs	r3, r4, #16
 800030c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000310:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000314:	fb08 f10c 	mul.w	r1, r8, ip
 8000318:	4299      	cmp	r1, r3
 800031a:	d907      	bls.n	800032c <__udivmoddi4+0x124>
 800031c:	18eb      	adds	r3, r5, r3
 800031e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x122>
 8000324:	4299      	cmp	r1, r3
 8000326:	f200 80cd 	bhi.w	80004c4 <__udivmoddi4+0x2bc>
 800032a:	4684      	mov	ip, r0
 800032c:	1a59      	subs	r1, r3, r1
 800032e:	b2a3      	uxth	r3, r4
 8000330:	fbb1 f0fe 	udiv	r0, r1, lr
 8000334:	fb0e 1410 	mls	r4, lr, r0, r1
 8000338:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800033c:	fb08 f800 	mul.w	r8, r8, r0
 8000340:	45a0      	cmp	r8, r4
 8000342:	d907      	bls.n	8000354 <__udivmoddi4+0x14c>
 8000344:	192c      	adds	r4, r5, r4
 8000346:	f100 33ff 	add.w	r3, r0, #4294967295
 800034a:	d202      	bcs.n	8000352 <__udivmoddi4+0x14a>
 800034c:	45a0      	cmp	r8, r4
 800034e:	f200 80b6 	bhi.w	80004be <__udivmoddi4+0x2b6>
 8000352:	4618      	mov	r0, r3
 8000354:	eba4 0408 	sub.w	r4, r4, r8
 8000358:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800035c:	e79f      	b.n	800029e <__udivmoddi4+0x96>
 800035e:	f1c7 0c20 	rsb	ip, r7, #32
 8000362:	40bb      	lsls	r3, r7
 8000364:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000368:	ea4e 0e03 	orr.w	lr, lr, r3
 800036c:	fa01 f407 	lsl.w	r4, r1, r7
 8000370:	fa20 f50c 	lsr.w	r5, r0, ip
 8000374:	fa21 f30c 	lsr.w	r3, r1, ip
 8000378:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800037c:	4325      	orrs	r5, r4
 800037e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000382:	0c2c      	lsrs	r4, r5, #16
 8000384:	fb08 3319 	mls	r3, r8, r9, r3
 8000388:	fa1f fa8e 	uxth.w	sl, lr
 800038c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000390:	fb09 f40a 	mul.w	r4, r9, sl
 8000394:	429c      	cmp	r4, r3
 8000396:	fa02 f207 	lsl.w	r2, r2, r7
 800039a:	fa00 f107 	lsl.w	r1, r0, r7
 800039e:	d90b      	bls.n	80003b8 <__udivmoddi4+0x1b0>
 80003a0:	eb1e 0303 	adds.w	r3, lr, r3
 80003a4:	f109 30ff 	add.w	r0, r9, #4294967295
 80003a8:	f080 8087 	bcs.w	80004ba <__udivmoddi4+0x2b2>
 80003ac:	429c      	cmp	r4, r3
 80003ae:	f240 8084 	bls.w	80004ba <__udivmoddi4+0x2b2>
 80003b2:	f1a9 0902 	sub.w	r9, r9, #2
 80003b6:	4473      	add	r3, lr
 80003b8:	1b1b      	subs	r3, r3, r4
 80003ba:	b2ad      	uxth	r5, r5
 80003bc:	fbb3 f0f8 	udiv	r0, r3, r8
 80003c0:	fb08 3310 	mls	r3, r8, r0, r3
 80003c4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003c8:	fb00 fa0a 	mul.w	sl, r0, sl
 80003cc:	45a2      	cmp	sl, r4
 80003ce:	d908      	bls.n	80003e2 <__udivmoddi4+0x1da>
 80003d0:	eb1e 0404 	adds.w	r4, lr, r4
 80003d4:	f100 33ff 	add.w	r3, r0, #4294967295
 80003d8:	d26b      	bcs.n	80004b2 <__udivmoddi4+0x2aa>
 80003da:	45a2      	cmp	sl, r4
 80003dc:	d969      	bls.n	80004b2 <__udivmoddi4+0x2aa>
 80003de:	3802      	subs	r0, #2
 80003e0:	4474      	add	r4, lr
 80003e2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003e6:	fba0 8902 	umull	r8, r9, r0, r2
 80003ea:	eba4 040a 	sub.w	r4, r4, sl
 80003ee:	454c      	cmp	r4, r9
 80003f0:	46c2      	mov	sl, r8
 80003f2:	464b      	mov	r3, r9
 80003f4:	d354      	bcc.n	80004a0 <__udivmoddi4+0x298>
 80003f6:	d051      	beq.n	800049c <__udivmoddi4+0x294>
 80003f8:	2e00      	cmp	r6, #0
 80003fa:	d069      	beq.n	80004d0 <__udivmoddi4+0x2c8>
 80003fc:	ebb1 050a 	subs.w	r5, r1, sl
 8000400:	eb64 0403 	sbc.w	r4, r4, r3
 8000404:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000408:	40fd      	lsrs	r5, r7
 800040a:	40fc      	lsrs	r4, r7
 800040c:	ea4c 0505 	orr.w	r5, ip, r5
 8000410:	e9c6 5400 	strd	r5, r4, [r6]
 8000414:	2700      	movs	r7, #0
 8000416:	e747      	b.n	80002a8 <__udivmoddi4+0xa0>
 8000418:	f1c2 0320 	rsb	r3, r2, #32
 800041c:	fa20 f703 	lsr.w	r7, r0, r3
 8000420:	4095      	lsls	r5, r2
 8000422:	fa01 f002 	lsl.w	r0, r1, r2
 8000426:	fa21 f303 	lsr.w	r3, r1, r3
 800042a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800042e:	4338      	orrs	r0, r7
 8000430:	0c01      	lsrs	r1, r0, #16
 8000432:	fbb3 f7fe 	udiv	r7, r3, lr
 8000436:	fa1f f885 	uxth.w	r8, r5
 800043a:	fb0e 3317 	mls	r3, lr, r7, r3
 800043e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000442:	fb07 f308 	mul.w	r3, r7, r8
 8000446:	428b      	cmp	r3, r1
 8000448:	fa04 f402 	lsl.w	r4, r4, r2
 800044c:	d907      	bls.n	800045e <__udivmoddi4+0x256>
 800044e:	1869      	adds	r1, r5, r1
 8000450:	f107 3cff 	add.w	ip, r7, #4294967295
 8000454:	d22f      	bcs.n	80004b6 <__udivmoddi4+0x2ae>
 8000456:	428b      	cmp	r3, r1
 8000458:	d92d      	bls.n	80004b6 <__udivmoddi4+0x2ae>
 800045a:	3f02      	subs	r7, #2
 800045c:	4429      	add	r1, r5
 800045e:	1acb      	subs	r3, r1, r3
 8000460:	b281      	uxth	r1, r0
 8000462:	fbb3 f0fe 	udiv	r0, r3, lr
 8000466:	fb0e 3310 	mls	r3, lr, r0, r3
 800046a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046e:	fb00 f308 	mul.w	r3, r0, r8
 8000472:	428b      	cmp	r3, r1
 8000474:	d907      	bls.n	8000486 <__udivmoddi4+0x27e>
 8000476:	1869      	adds	r1, r5, r1
 8000478:	f100 3cff 	add.w	ip, r0, #4294967295
 800047c:	d217      	bcs.n	80004ae <__udivmoddi4+0x2a6>
 800047e:	428b      	cmp	r3, r1
 8000480:	d915      	bls.n	80004ae <__udivmoddi4+0x2a6>
 8000482:	3802      	subs	r0, #2
 8000484:	4429      	add	r1, r5
 8000486:	1ac9      	subs	r1, r1, r3
 8000488:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800048c:	e73b      	b.n	8000306 <__udivmoddi4+0xfe>
 800048e:	4637      	mov	r7, r6
 8000490:	4630      	mov	r0, r6
 8000492:	e709      	b.n	80002a8 <__udivmoddi4+0xa0>
 8000494:	4607      	mov	r7, r0
 8000496:	e6e7      	b.n	8000268 <__udivmoddi4+0x60>
 8000498:	4618      	mov	r0, r3
 800049a:	e6fb      	b.n	8000294 <__udivmoddi4+0x8c>
 800049c:	4541      	cmp	r1, r8
 800049e:	d2ab      	bcs.n	80003f8 <__udivmoddi4+0x1f0>
 80004a0:	ebb8 0a02 	subs.w	sl, r8, r2
 80004a4:	eb69 020e 	sbc.w	r2, r9, lr
 80004a8:	3801      	subs	r0, #1
 80004aa:	4613      	mov	r3, r2
 80004ac:	e7a4      	b.n	80003f8 <__udivmoddi4+0x1f0>
 80004ae:	4660      	mov	r0, ip
 80004b0:	e7e9      	b.n	8000486 <__udivmoddi4+0x27e>
 80004b2:	4618      	mov	r0, r3
 80004b4:	e795      	b.n	80003e2 <__udivmoddi4+0x1da>
 80004b6:	4667      	mov	r7, ip
 80004b8:	e7d1      	b.n	800045e <__udivmoddi4+0x256>
 80004ba:	4681      	mov	r9, r0
 80004bc:	e77c      	b.n	80003b8 <__udivmoddi4+0x1b0>
 80004be:	3802      	subs	r0, #2
 80004c0:	442c      	add	r4, r5
 80004c2:	e747      	b.n	8000354 <__udivmoddi4+0x14c>
 80004c4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004c8:	442b      	add	r3, r5
 80004ca:	e72f      	b.n	800032c <__udivmoddi4+0x124>
 80004cc:	4638      	mov	r0, r7
 80004ce:	e708      	b.n	80002e2 <__udivmoddi4+0xda>
 80004d0:	4637      	mov	r7, r6
 80004d2:	e6e9      	b.n	80002a8 <__udivmoddi4+0xa0>

080004d4 <__aeabi_idiv0>:
 80004d4:	4770      	bx	lr
 80004d6:	bf00      	nop

080004d8 <clearScreen>:
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_TIM4_Init(void);
static void MX_USART2_UART_Init(void);
/* USER CODE BEGIN PFP */
void clearScreen() {
 80004d8:	b580      	push	{r7, lr}
 80004da:	af00      	add	r7, sp, #0
	HAL_UART_Transmit(&huart2, clrScreen, sizeof(clrScreen), 50);
 80004dc:	2332      	movs	r3, #50	; 0x32
 80004de:	2205      	movs	r2, #5
 80004e0:	4905      	ldr	r1, [pc, #20]	; (80004f8 <clearScreen+0x20>)
 80004e2:	4806      	ldr	r0, [pc, #24]	; (80004fc <clearScreen+0x24>)
 80004e4:	f002 fc0b 	bl	8002cfe <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, resetCursor, sizeof(resetCursor), 50);
 80004e8:	2332      	movs	r3, #50	; 0x32
 80004ea:	2207      	movs	r2, #7
 80004ec:	4904      	ldr	r1, [pc, #16]	; (8000500 <clearScreen+0x28>)
 80004ee:	4803      	ldr	r0, [pc, #12]	; (80004fc <clearScreen+0x24>)
 80004f0:	f002 fc05 	bl	8002cfe <HAL_UART_Transmit>
}
 80004f4:	bf00      	nop
 80004f6:	bd80      	pop	{r7, pc}
 80004f8:	20000000 	.word	0x20000000
 80004fc:	20000478 	.word	0x20000478
 8000500:	20000008 	.word	0x20000008

08000504 <display>:

void display() { //Display field + current Tetromino
 8000504:	b580      	push	{r7, lr}
 8000506:	b0e6      	sub	sp, #408	; 0x198
 8000508:	af00      	add	r7, sp, #0
	uint8_t temp[fieldWidth*fieldHeight];
	memcpy(temp, field, fieldWidth*fieldHeight);
 800050a:	f107 0310 	add.w	r3, r7, #16
 800050e:	4a55      	ldr	r2, [pc, #340]	; (8000664 <display+0x160>)
 8000510:	4618      	mov	r0, r3
 8000512:	4611      	mov	r1, r2
 8000514:	f240 1377 	movw	r3, #375	; 0x177
 8000518:	461a      	mov	r2, r3
 800051a:	f003 fb05 	bl	8003b28 <memcpy>
	for(int i=0; i<4; i++) {
 800051e:	2300      	movs	r3, #0
 8000520:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
 8000524:	e036      	b.n	8000594 <display+0x90>
		for (int j=0; j<4; j++) {
 8000526:	2300      	movs	r3, #0
 8000528:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
 800052c:	e029      	b.n	8000582 <display+0x7e>
			if (curTeTro[i*4 + j] != '.') {
 800052e:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8000532:	009a      	lsls	r2, r3, #2
 8000534:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8000538:	4413      	add	r3, r2
 800053a:	4a4b      	ldr	r2, [pc, #300]	; (8000668 <display+0x164>)
 800053c:	5cd3      	ldrb	r3, [r2, r3]
 800053e:	2b2e      	cmp	r3, #46	; 0x2e
 8000540:	d01a      	beq.n	8000578 <display+0x74>
				temp[(curY+i)*fieldWidth + (curX+j)] = curTeTro[i*4 + j];
 8000542:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8000546:	009a      	lsls	r2, r3, #2
 8000548:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 800054c:	18d1      	adds	r1, r2, r3
 800054e:	4b47      	ldr	r3, [pc, #284]	; (800066c <display+0x168>)
 8000550:	881b      	ldrh	r3, [r3, #0]
 8000552:	461a      	mov	r2, r3
 8000554:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8000558:	441a      	add	r2, r3
 800055a:	4613      	mov	r3, r2
 800055c:	011b      	lsls	r3, r3, #4
 800055e:	1a9a      	subs	r2, r3, r2
 8000560:	4b43      	ldr	r3, [pc, #268]	; (8000670 <display+0x16c>)
 8000562:	881b      	ldrh	r3, [r3, #0]
 8000564:	4618      	mov	r0, r3
 8000566:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 800056a:	4403      	add	r3, r0
 800056c:	4413      	add	r3, r2
 800056e:	4a3e      	ldr	r2, [pc, #248]	; (8000668 <display+0x164>)
 8000570:	5c51      	ldrb	r1, [r2, r1]
 8000572:	f107 0210 	add.w	r2, r7, #16
 8000576:	54d1      	strb	r1, [r2, r3]
		for (int j=0; j<4; j++) {
 8000578:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 800057c:	3301      	adds	r3, #1
 800057e:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
 8000582:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8000586:	2b03      	cmp	r3, #3
 8000588:	ddd1      	ble.n	800052e <display+0x2a>
	for(int i=0; i<4; i++) {
 800058a:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 800058e:	3301      	adds	r3, #1
 8000590:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
 8000594:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8000598:	2b03      	cmp	r3, #3
 800059a:	ddc4      	ble.n	8000526 <display+0x22>
			}
		}
	}
	HAL_UART_Transmit(&huart2, newLine, sizeof(newLine), 50);
 800059c:	2332      	movs	r3, #50	; 0x32
 800059e:	2203      	movs	r2, #3
 80005a0:	4934      	ldr	r1, [pc, #208]	; (8000674 <display+0x170>)
 80005a2:	4835      	ldr	r0, [pc, #212]	; (8000678 <display+0x174>)
 80005a4:	f002 fbab 	bl	8002cfe <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, leftSpace, sizeof(leftSpace), 50);
 80005a8:	2332      	movs	r3, #50	; 0x32
 80005aa:	2205      	movs	r2, #5
 80005ac:	4933      	ldr	r1, [pc, #204]	; (800067c <display+0x178>)
 80005ae:	4832      	ldr	r0, [pc, #200]	; (8000678 <display+0x174>)
 80005b0:	f002 fba5 	bl	8002cfe <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, infoText, sizeof(infoText), 50);
 80005b4:	2332      	movs	r3, #50	; 0x32
 80005b6:	2222      	movs	r2, #34	; 0x22
 80005b8:	4931      	ldr	r1, [pc, #196]	; (8000680 <display+0x17c>)
 80005ba:	482f      	ldr	r0, [pc, #188]	; (8000678 <display+0x174>)
 80005bc:	f002 fb9f 	bl	8002cfe <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, scoreText, sizeof(scoreText), 50);
 80005c0:	2332      	movs	r3, #50	; 0x32
 80005c2:	2206      	movs	r2, #6
 80005c4:	492f      	ldr	r1, [pc, #188]	; (8000684 <display+0x180>)
 80005c6:	482c      	ldr	r0, [pc, #176]	; (8000678 <display+0x174>)
 80005c8:	f002 fb99 	bl	8002cfe <HAL_UART_Transmit>
	for(uint8_t i=0; i<fieldHeight; i++) {
 80005cc:	2300      	movs	r3, #0
 80005ce:	f887 318f 	strb.w	r3, [r7, #399]	; 0x18f
 80005d2:	e03e      	b.n	8000652 <display+0x14e>
		uint8_t line[fieldWidth];
		for(int j=0; j<fieldWidth; j++) {
 80005d4:	2300      	movs	r3, #0
 80005d6:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 80005da:	e015      	b.n	8000608 <display+0x104>
			line[j] = temp[fieldWidth*i + j];
 80005dc:	f897 218f 	ldrb.w	r2, [r7, #399]	; 0x18f
 80005e0:	4613      	mov	r3, r2
 80005e2:	011b      	lsls	r3, r3, #4
 80005e4:	1a9a      	subs	r2, r3, r2
 80005e6:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 80005ea:	4413      	add	r3, r2
 80005ec:	f107 0210 	add.w	r2, r7, #16
 80005f0:	5cd1      	ldrb	r1, [r2, r3]
 80005f2:	463a      	mov	r2, r7
 80005f4:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 80005f8:	4413      	add	r3, r2
 80005fa:	460a      	mov	r2, r1
 80005fc:	701a      	strb	r2, [r3, #0]
		for(int j=0; j<fieldWidth; j++) {
 80005fe:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8000602:	3301      	adds	r3, #1
 8000604:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 8000608:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 800060c:	2b0e      	cmp	r3, #14
 800060e:	dde5      	ble.n	80005dc <display+0xd8>
		}
		HAL_UART_Transmit(&huart2, leftSpace, sizeof(leftSpace), 50);
 8000610:	2332      	movs	r3, #50	; 0x32
 8000612:	2205      	movs	r2, #5
 8000614:	4919      	ldr	r1, [pc, #100]	; (800067c <display+0x178>)
 8000616:	4818      	ldr	r0, [pc, #96]	; (8000678 <display+0x174>)
 8000618:	f002 fb71 	bl	8002cfe <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart2, line, sizeof(line), 50);
 800061c:	4639      	mov	r1, r7
 800061e:	2332      	movs	r3, #50	; 0x32
 8000620:	220f      	movs	r2, #15
 8000622:	4815      	ldr	r0, [pc, #84]	; (8000678 <display+0x174>)
 8000624:	f002 fb6b 	bl	8002cfe <HAL_UART_Transmit>
		if (i==0) HAL_UART_Transmit(&huart2, guideText[0], sizeof(guideText[0]), 50);
 8000628:	f897 318f 	ldrb.w	r3, [r7, #399]	; 0x18f
 800062c:	2b00      	cmp	r3, #0
 800062e:	d105      	bne.n	800063c <display+0x138>
 8000630:	2332      	movs	r3, #50	; 0x32
 8000632:	2223      	movs	r2, #35	; 0x23
 8000634:	4914      	ldr	r1, [pc, #80]	; (8000688 <display+0x184>)
 8000636:	4810      	ldr	r0, [pc, #64]	; (8000678 <display+0x174>)
 8000638:	f002 fb61 	bl	8002cfe <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart2, newLine, sizeof(newLine), 50);
 800063c:	2332      	movs	r3, #50	; 0x32
 800063e:	2203      	movs	r2, #3
 8000640:	490c      	ldr	r1, [pc, #48]	; (8000674 <display+0x170>)
 8000642:	480d      	ldr	r0, [pc, #52]	; (8000678 <display+0x174>)
 8000644:	f002 fb5b 	bl	8002cfe <HAL_UART_Transmit>
	for(uint8_t i=0; i<fieldHeight; i++) {
 8000648:	f897 318f 	ldrb.w	r3, [r7, #399]	; 0x18f
 800064c:	3301      	adds	r3, #1
 800064e:	f887 318f 	strb.w	r3, [r7, #399]	; 0x18f
 8000652:	f897 318f 	ldrb.w	r3, [r7, #399]	; 0x18f
 8000656:	2b18      	cmp	r3, #24
 8000658:	d9bc      	bls.n	80005d4 <display+0xd0>
	}
}
 800065a:	bf00      	nop
 800065c:	f507 77cc 	add.w	r7, r7, #408	; 0x198
 8000660:	46bd      	mov	sp, r7
 8000662:	bd80      	pop	{r7, pc}
 8000664:	20000300 	.word	0x20000300
 8000668:	200002f0 	.word	0x200002f0
 800066c:	20000134 	.word	0x20000134
 8000670:	2000009e 	.word	0x2000009e
 8000674:	20000010 	.word	0x20000010
 8000678:	20000478 	.word	0x20000478
 800067c:	20000098 	.word	0x20000098
 8000680:	20000014 	.word	0x20000014
 8000684:	200002e8 	.word	0x200002e8
 8000688:	20000188 	.word	0x20000188

0800068c <rotate>:

void rotate(uint8_t tetro[16], uint8_t clockwise) {
 800068c:	b4b0      	push	{r4, r5, r7}
 800068e:	b08b      	sub	sp, #44	; 0x2c
 8000690:	af00      	add	r7, sp, #0
 8000692:	6078      	str	r0, [r7, #4]
 8000694:	460b      	mov	r3, r1
 8000696:	70fb      	strb	r3, [r7, #3]
	uint8_t newTetro[16];
	if (clockwise == 1) {
 8000698:	78fb      	ldrb	r3, [r7, #3]
 800069a:	2b01      	cmp	r3, #1
 800069c:	d124      	bne.n	80006e8 <rotate+0x5c>
		for (int i=0; i<4; i++) {
 800069e:	2300      	movs	r3, #0
 80006a0:	627b      	str	r3, [r7, #36]	; 0x24
 80006a2:	e01d      	b.n	80006e0 <rotate+0x54>
			for (int j=0; j<4; j++) {
 80006a4:	2300      	movs	r3, #0
 80006a6:	623b      	str	r3, [r7, #32]
 80006a8:	e014      	b.n	80006d4 <rotate+0x48>
				//ni = j, nj = 3-i;
				newTetro[j*4 + 3 - i] = tetro[i*4 + j];
 80006aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006ac:	009a      	lsls	r2, r3, #2
 80006ae:	6a3b      	ldr	r3, [r7, #32]
 80006b0:	4413      	add	r3, r2
 80006b2:	461a      	mov	r2, r3
 80006b4:	687b      	ldr	r3, [r7, #4]
 80006b6:	441a      	add	r2, r3
 80006b8:	6a3b      	ldr	r3, [r7, #32]
 80006ba:	009b      	lsls	r3, r3, #2
 80006bc:	1cd9      	adds	r1, r3, #3
 80006be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006c0:	1acb      	subs	r3, r1, r3
 80006c2:	7812      	ldrb	r2, [r2, #0]
 80006c4:	f107 0128 	add.w	r1, r7, #40	; 0x28
 80006c8:	440b      	add	r3, r1
 80006ca:	f803 2c20 	strb.w	r2, [r3, #-32]
			for (int j=0; j<4; j++) {
 80006ce:	6a3b      	ldr	r3, [r7, #32]
 80006d0:	3301      	adds	r3, #1
 80006d2:	623b      	str	r3, [r7, #32]
 80006d4:	6a3b      	ldr	r3, [r7, #32]
 80006d6:	2b03      	cmp	r3, #3
 80006d8:	dde7      	ble.n	80006aa <rotate+0x1e>
		for (int i=0; i<4; i++) {
 80006da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006dc:	3301      	adds	r3, #1
 80006de:	627b      	str	r3, [r7, #36]	; 0x24
 80006e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006e2:	2b03      	cmp	r3, #3
 80006e4:	ddde      	ble.n	80006a4 <rotate+0x18>
 80006e6:	e024      	b.n	8000732 <rotate+0xa6>
			}
		}
	} else {
		for (int i=0; i<4; i++) {
 80006e8:	2300      	movs	r3, #0
 80006ea:	61fb      	str	r3, [r7, #28]
 80006ec:	e01e      	b.n	800072c <rotate+0xa0>
			for (int j=0; j<4; j++) {
 80006ee:	2300      	movs	r3, #0
 80006f0:	61bb      	str	r3, [r7, #24]
 80006f2:	e015      	b.n	8000720 <rotate+0x94>
				newTetro[i + 12 - 4*j] = tetro[i*4 + j];
 80006f4:	69fb      	ldr	r3, [r7, #28]
 80006f6:	009a      	lsls	r2, r3, #2
 80006f8:	69bb      	ldr	r3, [r7, #24]
 80006fa:	4413      	add	r3, r2
 80006fc:	461a      	mov	r2, r3
 80006fe:	687b      	ldr	r3, [r7, #4]
 8000700:	441a      	add	r2, r3
 8000702:	69fb      	ldr	r3, [r7, #28]
 8000704:	f103 010c 	add.w	r1, r3, #12
 8000708:	69bb      	ldr	r3, [r7, #24]
 800070a:	009b      	lsls	r3, r3, #2
 800070c:	1acb      	subs	r3, r1, r3
 800070e:	7812      	ldrb	r2, [r2, #0]
 8000710:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8000714:	440b      	add	r3, r1
 8000716:	f803 2c20 	strb.w	r2, [r3, #-32]
			for (int j=0; j<4; j++) {
 800071a:	69bb      	ldr	r3, [r7, #24]
 800071c:	3301      	adds	r3, #1
 800071e:	61bb      	str	r3, [r7, #24]
 8000720:	69bb      	ldr	r3, [r7, #24]
 8000722:	2b03      	cmp	r3, #3
 8000724:	dde6      	ble.n	80006f4 <rotate+0x68>
		for (int i=0; i<4; i++) {
 8000726:	69fb      	ldr	r3, [r7, #28]
 8000728:	3301      	adds	r3, #1
 800072a:	61fb      	str	r3, [r7, #28]
 800072c:	69fb      	ldr	r3, [r7, #28]
 800072e:	2b03      	cmp	r3, #3
 8000730:	dddd      	ble.n	80006ee <rotate+0x62>
			}
		}
	}
	memcpy(tetro, newTetro, 16);
 8000732:	687b      	ldr	r3, [r7, #4]
 8000734:	461d      	mov	r5, r3
 8000736:	f107 0408 	add.w	r4, r7, #8
 800073a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800073c:	6028      	str	r0, [r5, #0]
 800073e:	6069      	str	r1, [r5, #4]
 8000740:	60aa      	str	r2, [r5, #8]
 8000742:	60eb      	str	r3, [r5, #12]
}
 8000744:	bf00      	nop
 8000746:	372c      	adds	r7, #44	; 0x2c
 8000748:	46bd      	mov	sp, r7
 800074a:	bcb0      	pop	{r4, r5, r7}
 800074c:	4770      	bx	lr
	...

08000750 <canMove>:

uint8_t canMove(int direction) {
 8000750:	b480      	push	{r7}
 8000752:	b089      	sub	sp, #36	; 0x24
 8000754:	af00      	add	r7, sp, #0
 8000756:	6078      	str	r0, [r7, #4]
	//Check move down
	if (direction == 0) {
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	2b00      	cmp	r3, #0
 800075c:	d12e      	bne.n	80007bc <canMove+0x6c>
		for (int i=0; i<4; i++) {
 800075e:	2300      	movs	r3, #0
 8000760:	61fb      	str	r3, [r7, #28]
 8000762:	e027      	b.n	80007b4 <canMove+0x64>
			for (int j=0; j<4; j++) {
 8000764:	2300      	movs	r3, #0
 8000766:	61bb      	str	r3, [r7, #24]
 8000768:	e01e      	b.n	80007a8 <canMove+0x58>
				if (curTeTro[i*4 + j] != '.' && field[fieldWidth*(curY+i+1) + curX + j] != '.') return 0;
 800076a:	69fb      	ldr	r3, [r7, #28]
 800076c:	009a      	lsls	r2, r3, #2
 800076e:	69bb      	ldr	r3, [r7, #24]
 8000770:	4413      	add	r3, r2
 8000772:	4a47      	ldr	r2, [pc, #284]	; (8000890 <canMove+0x140>)
 8000774:	5cd3      	ldrb	r3, [r2, r3]
 8000776:	2b2e      	cmp	r3, #46	; 0x2e
 8000778:	d013      	beq.n	80007a2 <canMove+0x52>
 800077a:	4b46      	ldr	r3, [pc, #280]	; (8000894 <canMove+0x144>)
 800077c:	881b      	ldrh	r3, [r3, #0]
 800077e:	461a      	mov	r2, r3
 8000780:	69fb      	ldr	r3, [r7, #28]
 8000782:	4413      	add	r3, r2
 8000784:	1c5a      	adds	r2, r3, #1
 8000786:	4613      	mov	r3, r2
 8000788:	011b      	lsls	r3, r3, #4
 800078a:	1a9b      	subs	r3, r3, r2
 800078c:	4a42      	ldr	r2, [pc, #264]	; (8000898 <canMove+0x148>)
 800078e:	8812      	ldrh	r2, [r2, #0]
 8000790:	441a      	add	r2, r3
 8000792:	69bb      	ldr	r3, [r7, #24]
 8000794:	4413      	add	r3, r2
 8000796:	4a41      	ldr	r2, [pc, #260]	; (800089c <canMove+0x14c>)
 8000798:	5cd3      	ldrb	r3, [r2, r3]
 800079a:	2b2e      	cmp	r3, #46	; 0x2e
 800079c:	d001      	beq.n	80007a2 <canMove+0x52>
 800079e:	2300      	movs	r3, #0
 80007a0:	e070      	b.n	8000884 <canMove+0x134>
			for (int j=0; j<4; j++) {
 80007a2:	69bb      	ldr	r3, [r7, #24]
 80007a4:	3301      	adds	r3, #1
 80007a6:	61bb      	str	r3, [r7, #24]
 80007a8:	69bb      	ldr	r3, [r7, #24]
 80007aa:	2b03      	cmp	r3, #3
 80007ac:	dddd      	ble.n	800076a <canMove+0x1a>
		for (int i=0; i<4; i++) {
 80007ae:	69fb      	ldr	r3, [r7, #28]
 80007b0:	3301      	adds	r3, #1
 80007b2:	61fb      	str	r3, [r7, #28]
 80007b4:	69fb      	ldr	r3, [r7, #28]
 80007b6:	2b03      	cmp	r3, #3
 80007b8:	ddd4      	ble.n	8000764 <canMove+0x14>
 80007ba:	e062      	b.n	8000882 <canMove+0x132>
			}
		}
	//Check move right
	} else if (direction == 1) {
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	2b01      	cmp	r3, #1
 80007c0:	d12e      	bne.n	8000820 <canMove+0xd0>
		for (int i=0; i<4; i++) {
 80007c2:	2300      	movs	r3, #0
 80007c4:	617b      	str	r3, [r7, #20]
 80007c6:	e027      	b.n	8000818 <canMove+0xc8>
			for (int j=0; j<4; j++) {
 80007c8:	2300      	movs	r3, #0
 80007ca:	613b      	str	r3, [r7, #16]
 80007cc:	e01e      	b.n	800080c <canMove+0xbc>
				if (curTeTro[i*4 + j] != '.' && field[fieldWidth*(curY+i) + curX + j + 1] != '.') return 0;
 80007ce:	697b      	ldr	r3, [r7, #20]
 80007d0:	009a      	lsls	r2, r3, #2
 80007d2:	693b      	ldr	r3, [r7, #16]
 80007d4:	4413      	add	r3, r2
 80007d6:	4a2e      	ldr	r2, [pc, #184]	; (8000890 <canMove+0x140>)
 80007d8:	5cd3      	ldrb	r3, [r2, r3]
 80007da:	2b2e      	cmp	r3, #46	; 0x2e
 80007dc:	d013      	beq.n	8000806 <canMove+0xb6>
 80007de:	4b2d      	ldr	r3, [pc, #180]	; (8000894 <canMove+0x144>)
 80007e0:	881b      	ldrh	r3, [r3, #0]
 80007e2:	461a      	mov	r2, r3
 80007e4:	697b      	ldr	r3, [r7, #20]
 80007e6:	441a      	add	r2, r3
 80007e8:	4613      	mov	r3, r2
 80007ea:	011b      	lsls	r3, r3, #4
 80007ec:	1a9b      	subs	r3, r3, r2
 80007ee:	4a2a      	ldr	r2, [pc, #168]	; (8000898 <canMove+0x148>)
 80007f0:	8812      	ldrh	r2, [r2, #0]
 80007f2:	441a      	add	r2, r3
 80007f4:	693b      	ldr	r3, [r7, #16]
 80007f6:	4413      	add	r3, r2
 80007f8:	3301      	adds	r3, #1
 80007fa:	4a28      	ldr	r2, [pc, #160]	; (800089c <canMove+0x14c>)
 80007fc:	5cd3      	ldrb	r3, [r2, r3]
 80007fe:	2b2e      	cmp	r3, #46	; 0x2e
 8000800:	d001      	beq.n	8000806 <canMove+0xb6>
 8000802:	2300      	movs	r3, #0
 8000804:	e03e      	b.n	8000884 <canMove+0x134>
			for (int j=0; j<4; j++) {
 8000806:	693b      	ldr	r3, [r7, #16]
 8000808:	3301      	adds	r3, #1
 800080a:	613b      	str	r3, [r7, #16]
 800080c:	693b      	ldr	r3, [r7, #16]
 800080e:	2b03      	cmp	r3, #3
 8000810:	dddd      	ble.n	80007ce <canMove+0x7e>
		for (int i=0; i<4; i++) {
 8000812:	697b      	ldr	r3, [r7, #20]
 8000814:	3301      	adds	r3, #1
 8000816:	617b      	str	r3, [r7, #20]
 8000818:	697b      	ldr	r3, [r7, #20]
 800081a:	2b03      	cmp	r3, #3
 800081c:	ddd4      	ble.n	80007c8 <canMove+0x78>
 800081e:	e030      	b.n	8000882 <canMove+0x132>
			}
		}
	//Check move left
	} else if (direction == 2){
 8000820:	687b      	ldr	r3, [r7, #4]
 8000822:	2b02      	cmp	r3, #2
 8000824:	d12d      	bne.n	8000882 <canMove+0x132>
		for (int i=0; i<4; i++) {
 8000826:	2300      	movs	r3, #0
 8000828:	60fb      	str	r3, [r7, #12]
 800082a:	e027      	b.n	800087c <canMove+0x12c>
			for (int j=0; j<4; j++) {
 800082c:	2300      	movs	r3, #0
 800082e:	60bb      	str	r3, [r7, #8]
 8000830:	e01e      	b.n	8000870 <canMove+0x120>
				if (curTeTro[i*4 + j] != '.' && field[fieldWidth*(curY+i) + curX + j - 1] != '.') return 0;
 8000832:	68fb      	ldr	r3, [r7, #12]
 8000834:	009a      	lsls	r2, r3, #2
 8000836:	68bb      	ldr	r3, [r7, #8]
 8000838:	4413      	add	r3, r2
 800083a:	4a15      	ldr	r2, [pc, #84]	; (8000890 <canMove+0x140>)
 800083c:	5cd3      	ldrb	r3, [r2, r3]
 800083e:	2b2e      	cmp	r3, #46	; 0x2e
 8000840:	d013      	beq.n	800086a <canMove+0x11a>
 8000842:	4b14      	ldr	r3, [pc, #80]	; (8000894 <canMove+0x144>)
 8000844:	881b      	ldrh	r3, [r3, #0]
 8000846:	461a      	mov	r2, r3
 8000848:	68fb      	ldr	r3, [r7, #12]
 800084a:	441a      	add	r2, r3
 800084c:	4613      	mov	r3, r2
 800084e:	011b      	lsls	r3, r3, #4
 8000850:	1a9b      	subs	r3, r3, r2
 8000852:	4a11      	ldr	r2, [pc, #68]	; (8000898 <canMove+0x148>)
 8000854:	8812      	ldrh	r2, [r2, #0]
 8000856:	441a      	add	r2, r3
 8000858:	68bb      	ldr	r3, [r7, #8]
 800085a:	4413      	add	r3, r2
 800085c:	3b01      	subs	r3, #1
 800085e:	4a0f      	ldr	r2, [pc, #60]	; (800089c <canMove+0x14c>)
 8000860:	5cd3      	ldrb	r3, [r2, r3]
 8000862:	2b2e      	cmp	r3, #46	; 0x2e
 8000864:	d001      	beq.n	800086a <canMove+0x11a>
 8000866:	2300      	movs	r3, #0
 8000868:	e00c      	b.n	8000884 <canMove+0x134>
			for (int j=0; j<4; j++) {
 800086a:	68bb      	ldr	r3, [r7, #8]
 800086c:	3301      	adds	r3, #1
 800086e:	60bb      	str	r3, [r7, #8]
 8000870:	68bb      	ldr	r3, [r7, #8]
 8000872:	2b03      	cmp	r3, #3
 8000874:	dddd      	ble.n	8000832 <canMove+0xe2>
		for (int i=0; i<4; i++) {
 8000876:	68fb      	ldr	r3, [r7, #12]
 8000878:	3301      	adds	r3, #1
 800087a:	60fb      	str	r3, [r7, #12]
 800087c:	68fb      	ldr	r3, [r7, #12]
 800087e:	2b03      	cmp	r3, #3
 8000880:	ddd4      	ble.n	800082c <canMove+0xdc>
			}
		}
	}
	return 1;
 8000882:	2301      	movs	r3, #1
}
 8000884:	4618      	mov	r0, r3
 8000886:	3724      	adds	r7, #36	; 0x24
 8000888:	46bd      	mov	sp, r7
 800088a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800088e:	4770      	bx	lr
 8000890:	200002f0 	.word	0x200002f0
 8000894:	20000134 	.word	0x20000134
 8000898:	2000009e 	.word	0x2000009e
 800089c:	20000300 	.word	0x20000300

080008a0 <canRotate>:

uint8_t canRotate(int direction) {
 80008a0:	b480      	push	{r7}
 80008a2:	b087      	sub	sp, #28
 80008a4:	af00      	add	r7, sp, #0
 80008a6:	6078      	str	r0, [r7, #4]
	//Check clockwise
	if (direction == 1) {
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	2b01      	cmp	r3, #1
 80008ac:	d12e      	bne.n	800090c <canRotate+0x6c>
		for (int i=0; i<4; i++) {
 80008ae:	2300      	movs	r3, #0
 80008b0:	617b      	str	r3, [r7, #20]
 80008b2:	e027      	b.n	8000904 <canRotate+0x64>
			for (int j=0; j<4; j++) {
 80008b4:	2300      	movs	r3, #0
 80008b6:	613b      	str	r3, [r7, #16]
 80008b8:	e01e      	b.n	80008f8 <canRotate+0x58>
				//ni = j, nj = 3-i;
				if(curTeTro[i*4 + j] != '.' && field[(curY+j)*fieldWidth + (curX+3-i)] != '.') return 0;
 80008ba:	697b      	ldr	r3, [r7, #20]
 80008bc:	009a      	lsls	r2, r3, #2
 80008be:	693b      	ldr	r3, [r7, #16]
 80008c0:	4413      	add	r3, r2
 80008c2:	4a2d      	ldr	r2, [pc, #180]	; (8000978 <canRotate+0xd8>)
 80008c4:	5cd3      	ldrb	r3, [r2, r3]
 80008c6:	2b2e      	cmp	r3, #46	; 0x2e
 80008c8:	d013      	beq.n	80008f2 <canRotate+0x52>
 80008ca:	4b2c      	ldr	r3, [pc, #176]	; (800097c <canRotate+0xdc>)
 80008cc:	881b      	ldrh	r3, [r3, #0]
 80008ce:	461a      	mov	r2, r3
 80008d0:	693b      	ldr	r3, [r7, #16]
 80008d2:	441a      	add	r2, r3
 80008d4:	4613      	mov	r3, r2
 80008d6:	011b      	lsls	r3, r3, #4
 80008d8:	1a9a      	subs	r2, r3, r2
 80008da:	4b29      	ldr	r3, [pc, #164]	; (8000980 <canRotate+0xe0>)
 80008dc:	881b      	ldrh	r3, [r3, #0]
 80008de:	1cd9      	adds	r1, r3, #3
 80008e0:	697b      	ldr	r3, [r7, #20]
 80008e2:	1acb      	subs	r3, r1, r3
 80008e4:	4413      	add	r3, r2
 80008e6:	4a27      	ldr	r2, [pc, #156]	; (8000984 <canRotate+0xe4>)
 80008e8:	5cd3      	ldrb	r3, [r2, r3]
 80008ea:	2b2e      	cmp	r3, #46	; 0x2e
 80008ec:	d001      	beq.n	80008f2 <canRotate+0x52>
 80008ee:	2300      	movs	r3, #0
 80008f0:	e03c      	b.n	800096c <canRotate+0xcc>
			for (int j=0; j<4; j++) {
 80008f2:	693b      	ldr	r3, [r7, #16]
 80008f4:	3301      	adds	r3, #1
 80008f6:	613b      	str	r3, [r7, #16]
 80008f8:	693b      	ldr	r3, [r7, #16]
 80008fa:	2b03      	cmp	r3, #3
 80008fc:	dddd      	ble.n	80008ba <canRotate+0x1a>
		for (int i=0; i<4; i++) {
 80008fe:	697b      	ldr	r3, [r7, #20]
 8000900:	3301      	adds	r3, #1
 8000902:	617b      	str	r3, [r7, #20]
 8000904:	697b      	ldr	r3, [r7, #20]
 8000906:	2b03      	cmp	r3, #3
 8000908:	ddd4      	ble.n	80008b4 <canRotate+0x14>
 800090a:	e02e      	b.n	800096a <canRotate+0xca>
			}
		}
	//Check counter-clockwise
	} else {
		for (int i=0; i<4; i++) {
 800090c:	2300      	movs	r3, #0
 800090e:	60fb      	str	r3, [r7, #12]
 8000910:	e028      	b.n	8000964 <canRotate+0xc4>
			for (int j=0; j<4; j++) {
 8000912:	2300      	movs	r3, #0
 8000914:	60bb      	str	r3, [r7, #8]
 8000916:	e01f      	b.n	8000958 <canRotate+0xb8>
				//ni = 3-j, nj = i
				if(curTeTro[i*4 + j] != '.' && field[(3-j+curY)*fieldWidth + (curX+i)] != '.') return 0;
 8000918:	68fb      	ldr	r3, [r7, #12]
 800091a:	009a      	lsls	r2, r3, #2
 800091c:	68bb      	ldr	r3, [r7, #8]
 800091e:	4413      	add	r3, r2
 8000920:	4a15      	ldr	r2, [pc, #84]	; (8000978 <canRotate+0xd8>)
 8000922:	5cd3      	ldrb	r3, [r2, r3]
 8000924:	2b2e      	cmp	r3, #46	; 0x2e
 8000926:	d014      	beq.n	8000952 <canRotate+0xb2>
 8000928:	68bb      	ldr	r3, [r7, #8]
 800092a:	f1c3 0303 	rsb	r3, r3, #3
 800092e:	4a13      	ldr	r2, [pc, #76]	; (800097c <canRotate+0xdc>)
 8000930:	8812      	ldrh	r2, [r2, #0]
 8000932:	441a      	add	r2, r3
 8000934:	4613      	mov	r3, r2
 8000936:	011b      	lsls	r3, r3, #4
 8000938:	1a9a      	subs	r2, r3, r2
 800093a:	4b11      	ldr	r3, [pc, #68]	; (8000980 <canRotate+0xe0>)
 800093c:	881b      	ldrh	r3, [r3, #0]
 800093e:	4619      	mov	r1, r3
 8000940:	68fb      	ldr	r3, [r7, #12]
 8000942:	440b      	add	r3, r1
 8000944:	4413      	add	r3, r2
 8000946:	4a0f      	ldr	r2, [pc, #60]	; (8000984 <canRotate+0xe4>)
 8000948:	5cd3      	ldrb	r3, [r2, r3]
 800094a:	2b2e      	cmp	r3, #46	; 0x2e
 800094c:	d001      	beq.n	8000952 <canRotate+0xb2>
 800094e:	2300      	movs	r3, #0
 8000950:	e00c      	b.n	800096c <canRotate+0xcc>
			for (int j=0; j<4; j++) {
 8000952:	68bb      	ldr	r3, [r7, #8]
 8000954:	3301      	adds	r3, #1
 8000956:	60bb      	str	r3, [r7, #8]
 8000958:	68bb      	ldr	r3, [r7, #8]
 800095a:	2b03      	cmp	r3, #3
 800095c:	dddc      	ble.n	8000918 <canRotate+0x78>
		for (int i=0; i<4; i++) {
 800095e:	68fb      	ldr	r3, [r7, #12]
 8000960:	3301      	adds	r3, #1
 8000962:	60fb      	str	r3, [r7, #12]
 8000964:	68fb      	ldr	r3, [r7, #12]
 8000966:	2b03      	cmp	r3, #3
 8000968:	ddd3      	ble.n	8000912 <canRotate+0x72>
			}
		}
	}
	return 1;
 800096a:	2301      	movs	r3, #1
}
 800096c:	4618      	mov	r0, r3
 800096e:	371c      	adds	r7, #28
 8000970:	46bd      	mov	sp, r7
 8000972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000976:	4770      	bx	lr
 8000978:	200002f0 	.word	0x200002f0
 800097c:	20000134 	.word	0x20000134
 8000980:	2000009e 	.word	0x2000009e
 8000984:	20000300 	.word	0x20000300

08000988 <gotLine>:

uint8_t gotLine(uint8_t y) {
 8000988:	b480      	push	{r7}
 800098a:	b085      	sub	sp, #20
 800098c:	af00      	add	r7, sp, #0
 800098e:	4603      	mov	r3, r0
 8000990:	71fb      	strb	r3, [r7, #7]
	uint8_t line = 1;
 8000992:	2301      	movs	r3, #1
 8000994:	73fb      	strb	r3, [r7, #15]
	for (int i=1; i<fieldWidth-1; i++) {
 8000996:	2301      	movs	r3, #1
 8000998:	60bb      	str	r3, [r7, #8]
 800099a:	e00f      	b.n	80009bc <gotLine+0x34>
		if (field[y*fieldWidth + i] == '.') {
 800099c:	79fa      	ldrb	r2, [r7, #7]
 800099e:	4613      	mov	r3, r2
 80009a0:	011b      	lsls	r3, r3, #4
 80009a2:	1a9a      	subs	r2, r3, r2
 80009a4:	68bb      	ldr	r3, [r7, #8]
 80009a6:	4413      	add	r3, r2
 80009a8:	4a09      	ldr	r2, [pc, #36]	; (80009d0 <gotLine+0x48>)
 80009aa:	5cd3      	ldrb	r3, [r2, r3]
 80009ac:	2b2e      	cmp	r3, #46	; 0x2e
 80009ae:	d102      	bne.n	80009b6 <gotLine+0x2e>
			line = 0;
 80009b0:	2300      	movs	r3, #0
 80009b2:	73fb      	strb	r3, [r7, #15]
			break;
 80009b4:	e005      	b.n	80009c2 <gotLine+0x3a>
	for (int i=1; i<fieldWidth-1; i++) {
 80009b6:	68bb      	ldr	r3, [r7, #8]
 80009b8:	3301      	adds	r3, #1
 80009ba:	60bb      	str	r3, [r7, #8]
 80009bc:	68bb      	ldr	r3, [r7, #8]
 80009be:	2b0d      	cmp	r3, #13
 80009c0:	ddec      	ble.n	800099c <gotLine+0x14>
		}
	}
	return line;
 80009c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80009c4:	4618      	mov	r0, r3
 80009c6:	3714      	adds	r7, #20
 80009c8:	46bd      	mov	sp, r7
 80009ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ce:	4770      	bx	lr
 80009d0:	20000300 	.word	0x20000300

080009d4 <pushAboveDown>:

void pushAboveDown(uint8_t y) {
 80009d4:	b480      	push	{r7}
 80009d6:	b087      	sub	sp, #28
 80009d8:	af00      	add	r7, sp, #0
 80009da:	4603      	mov	r3, r0
 80009dc:	71fb      	strb	r3, [r7, #7]
	for(int i=y; i>= 1; i--) {
 80009de:	79fb      	ldrb	r3, [r7, #7]
 80009e0:	617b      	str	r3, [r7, #20]
 80009e2:	e01c      	b.n	8000a1e <pushAboveDown+0x4a>
		for (int j=1; j<fieldWidth-1; j++) {
 80009e4:	2301      	movs	r3, #1
 80009e6:	613b      	str	r3, [r7, #16]
 80009e8:	e013      	b.n	8000a12 <pushAboveDown+0x3e>
			field[i*fieldWidth + j] = field[(i-1)*fieldWidth + j];
 80009ea:	697b      	ldr	r3, [r7, #20]
 80009ec:	1e5a      	subs	r2, r3, #1
 80009ee:	4613      	mov	r3, r2
 80009f0:	011b      	lsls	r3, r3, #4
 80009f2:	1a9a      	subs	r2, r3, r2
 80009f4:	693b      	ldr	r3, [r7, #16]
 80009f6:	18d1      	adds	r1, r2, r3
 80009f8:	697a      	ldr	r2, [r7, #20]
 80009fa:	4613      	mov	r3, r2
 80009fc:	011b      	lsls	r3, r3, #4
 80009fe:	1a9a      	subs	r2, r3, r2
 8000a00:	693b      	ldr	r3, [r7, #16]
 8000a02:	4413      	add	r3, r2
 8000a04:	4a11      	ldr	r2, [pc, #68]	; (8000a4c <pushAboveDown+0x78>)
 8000a06:	5c51      	ldrb	r1, [r2, r1]
 8000a08:	4a10      	ldr	r2, [pc, #64]	; (8000a4c <pushAboveDown+0x78>)
 8000a0a:	54d1      	strb	r1, [r2, r3]
		for (int j=1; j<fieldWidth-1; j++) {
 8000a0c:	693b      	ldr	r3, [r7, #16]
 8000a0e:	3301      	adds	r3, #1
 8000a10:	613b      	str	r3, [r7, #16]
 8000a12:	693b      	ldr	r3, [r7, #16]
 8000a14:	2b0d      	cmp	r3, #13
 8000a16:	dde8      	ble.n	80009ea <pushAboveDown+0x16>
	for(int i=y; i>= 1; i--) {
 8000a18:	697b      	ldr	r3, [r7, #20]
 8000a1a:	3b01      	subs	r3, #1
 8000a1c:	617b      	str	r3, [r7, #20]
 8000a1e:	697b      	ldr	r3, [r7, #20]
 8000a20:	2b00      	cmp	r3, #0
 8000a22:	dcdf      	bgt.n	80009e4 <pushAboveDown+0x10>
		}
	}
	for (int i=1; i<fieldWidth-1; i++) {
 8000a24:	2301      	movs	r3, #1
 8000a26:	60fb      	str	r3, [r7, #12]
 8000a28:	e007      	b.n	8000a3a <pushAboveDown+0x66>
		field[i] = '.';
 8000a2a:	4a08      	ldr	r2, [pc, #32]	; (8000a4c <pushAboveDown+0x78>)
 8000a2c:	68fb      	ldr	r3, [r7, #12]
 8000a2e:	4413      	add	r3, r2
 8000a30:	222e      	movs	r2, #46	; 0x2e
 8000a32:	701a      	strb	r2, [r3, #0]
	for (int i=1; i<fieldWidth-1; i++) {
 8000a34:	68fb      	ldr	r3, [r7, #12]
 8000a36:	3301      	adds	r3, #1
 8000a38:	60fb      	str	r3, [r7, #12]
 8000a3a:	68fb      	ldr	r3, [r7, #12]
 8000a3c:	2b0d      	cmp	r3, #13
 8000a3e:	ddf4      	ble.n	8000a2a <pushAboveDown+0x56>
	}
}
 8000a40:	bf00      	nop
 8000a42:	371c      	adds	r7, #28
 8000a44:	46bd      	mov	sp, r7
 8000a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a4a:	4770      	bx	lr
 8000a4c:	20000300 	.word	0x20000300

08000a50 <isGameOver>:

uint8_t isGameOver() {
 8000a50:	b480      	push	{r7}
 8000a52:	b083      	sub	sp, #12
 8000a54:	af00      	add	r7, sp, #0
	for (int i=0; i<4; i++) {
 8000a56:	2300      	movs	r3, #0
 8000a58:	607b      	str	r3, [r7, #4]
 8000a5a:	e027      	b.n	8000aac <isGameOver+0x5c>
		for (int j=0; j<4; j++) {
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	603b      	str	r3, [r7, #0]
 8000a60:	e01e      	b.n	8000aa0 <isGameOver+0x50>
			if (curTeTro[i*4 + j] != '.' && field[fieldWidth*(curY+i) + curX + j - 1] != '.') return 1;
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	009a      	lsls	r2, r3, #2
 8000a66:	683b      	ldr	r3, [r7, #0]
 8000a68:	4413      	add	r3, r2
 8000a6a:	4a15      	ldr	r2, [pc, #84]	; (8000ac0 <isGameOver+0x70>)
 8000a6c:	5cd3      	ldrb	r3, [r2, r3]
 8000a6e:	2b2e      	cmp	r3, #46	; 0x2e
 8000a70:	d013      	beq.n	8000a9a <isGameOver+0x4a>
 8000a72:	4b14      	ldr	r3, [pc, #80]	; (8000ac4 <isGameOver+0x74>)
 8000a74:	881b      	ldrh	r3, [r3, #0]
 8000a76:	461a      	mov	r2, r3
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	441a      	add	r2, r3
 8000a7c:	4613      	mov	r3, r2
 8000a7e:	011b      	lsls	r3, r3, #4
 8000a80:	1a9b      	subs	r3, r3, r2
 8000a82:	4a11      	ldr	r2, [pc, #68]	; (8000ac8 <isGameOver+0x78>)
 8000a84:	8812      	ldrh	r2, [r2, #0]
 8000a86:	441a      	add	r2, r3
 8000a88:	683b      	ldr	r3, [r7, #0]
 8000a8a:	4413      	add	r3, r2
 8000a8c:	3b01      	subs	r3, #1
 8000a8e:	4a0f      	ldr	r2, [pc, #60]	; (8000acc <isGameOver+0x7c>)
 8000a90:	5cd3      	ldrb	r3, [r2, r3]
 8000a92:	2b2e      	cmp	r3, #46	; 0x2e
 8000a94:	d001      	beq.n	8000a9a <isGameOver+0x4a>
 8000a96:	2301      	movs	r3, #1
 8000a98:	e00c      	b.n	8000ab4 <isGameOver+0x64>
		for (int j=0; j<4; j++) {
 8000a9a:	683b      	ldr	r3, [r7, #0]
 8000a9c:	3301      	adds	r3, #1
 8000a9e:	603b      	str	r3, [r7, #0]
 8000aa0:	683b      	ldr	r3, [r7, #0]
 8000aa2:	2b03      	cmp	r3, #3
 8000aa4:	dddd      	ble.n	8000a62 <isGameOver+0x12>
	for (int i=0; i<4; i++) {
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	3301      	adds	r3, #1
 8000aaa:	607b      	str	r3, [r7, #4]
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	2b03      	cmp	r3, #3
 8000ab0:	ddd4      	ble.n	8000a5c <isGameOver+0xc>
		}
	}
	return 0;
 8000ab2:	2300      	movs	r3, #0
}
 8000ab4:	4618      	mov	r0, r3
 8000ab6:	370c      	adds	r7, #12
 8000ab8:	46bd      	mov	sp, r7
 8000aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000abe:	4770      	bx	lr
 8000ac0:	200002f0 	.word	0x200002f0
 8000ac4:	20000134 	.word	0x20000134
 8000ac8:	2000009e 	.word	0x2000009e
 8000acc:	20000300 	.word	0x20000300

08000ad0 <setScoreText>:

void setScoreText() {
 8000ad0:	b480      	push	{r7}
 8000ad2:	af00      	add	r7, sp, #0
	scoreText[0] = numText[(score/1000)%10];
 8000ad4:	4b2e      	ldr	r3, [pc, #184]	; (8000b90 <setScoreText+0xc0>)
 8000ad6:	881b      	ldrh	r3, [r3, #0]
 8000ad8:	4a2e      	ldr	r2, [pc, #184]	; (8000b94 <setScoreText+0xc4>)
 8000ada:	fba2 2303 	umull	r2, r3, r2, r3
 8000ade:	099b      	lsrs	r3, r3, #6
 8000ae0:	b29a      	uxth	r2, r3
 8000ae2:	4b2d      	ldr	r3, [pc, #180]	; (8000b98 <setScoreText+0xc8>)
 8000ae4:	fba3 1302 	umull	r1, r3, r3, r2
 8000ae8:	08d9      	lsrs	r1, r3, #3
 8000aea:	460b      	mov	r3, r1
 8000aec:	009b      	lsls	r3, r3, #2
 8000aee:	440b      	add	r3, r1
 8000af0:	005b      	lsls	r3, r3, #1
 8000af2:	1ad3      	subs	r3, r2, r3
 8000af4:	b29b      	uxth	r3, r3
 8000af6:	461a      	mov	r2, r3
 8000af8:	4b28      	ldr	r3, [pc, #160]	; (8000b9c <setScoreText+0xcc>)
 8000afa:	5c9a      	ldrb	r2, [r3, r2]
 8000afc:	4b28      	ldr	r3, [pc, #160]	; (8000ba0 <setScoreText+0xd0>)
 8000afe:	701a      	strb	r2, [r3, #0]
	scoreText[1] = numText[(score/100)%10];
 8000b00:	4b23      	ldr	r3, [pc, #140]	; (8000b90 <setScoreText+0xc0>)
 8000b02:	881b      	ldrh	r3, [r3, #0]
 8000b04:	4a27      	ldr	r2, [pc, #156]	; (8000ba4 <setScoreText+0xd4>)
 8000b06:	fba2 2303 	umull	r2, r3, r2, r3
 8000b0a:	095b      	lsrs	r3, r3, #5
 8000b0c:	b29a      	uxth	r2, r3
 8000b0e:	4b22      	ldr	r3, [pc, #136]	; (8000b98 <setScoreText+0xc8>)
 8000b10:	fba3 1302 	umull	r1, r3, r3, r2
 8000b14:	08d9      	lsrs	r1, r3, #3
 8000b16:	460b      	mov	r3, r1
 8000b18:	009b      	lsls	r3, r3, #2
 8000b1a:	440b      	add	r3, r1
 8000b1c:	005b      	lsls	r3, r3, #1
 8000b1e:	1ad3      	subs	r3, r2, r3
 8000b20:	b29b      	uxth	r3, r3
 8000b22:	461a      	mov	r2, r3
 8000b24:	4b1d      	ldr	r3, [pc, #116]	; (8000b9c <setScoreText+0xcc>)
 8000b26:	5c9a      	ldrb	r2, [r3, r2]
 8000b28:	4b1d      	ldr	r3, [pc, #116]	; (8000ba0 <setScoreText+0xd0>)
 8000b2a:	705a      	strb	r2, [r3, #1]
	scoreText[2] = numText[(score/10)%10];
 8000b2c:	4b18      	ldr	r3, [pc, #96]	; (8000b90 <setScoreText+0xc0>)
 8000b2e:	881b      	ldrh	r3, [r3, #0]
 8000b30:	4a19      	ldr	r2, [pc, #100]	; (8000b98 <setScoreText+0xc8>)
 8000b32:	fba2 2303 	umull	r2, r3, r2, r3
 8000b36:	08db      	lsrs	r3, r3, #3
 8000b38:	b29a      	uxth	r2, r3
 8000b3a:	4b17      	ldr	r3, [pc, #92]	; (8000b98 <setScoreText+0xc8>)
 8000b3c:	fba3 1302 	umull	r1, r3, r3, r2
 8000b40:	08d9      	lsrs	r1, r3, #3
 8000b42:	460b      	mov	r3, r1
 8000b44:	009b      	lsls	r3, r3, #2
 8000b46:	440b      	add	r3, r1
 8000b48:	005b      	lsls	r3, r3, #1
 8000b4a:	1ad3      	subs	r3, r2, r3
 8000b4c:	b29b      	uxth	r3, r3
 8000b4e:	461a      	mov	r2, r3
 8000b50:	4b12      	ldr	r3, [pc, #72]	; (8000b9c <setScoreText+0xcc>)
 8000b52:	5c9a      	ldrb	r2, [r3, r2]
 8000b54:	4b12      	ldr	r3, [pc, #72]	; (8000ba0 <setScoreText+0xd0>)
 8000b56:	709a      	strb	r2, [r3, #2]
	scoreText[3] = numText[score%10];
 8000b58:	4b0d      	ldr	r3, [pc, #52]	; (8000b90 <setScoreText+0xc0>)
 8000b5a:	881a      	ldrh	r2, [r3, #0]
 8000b5c:	4b0e      	ldr	r3, [pc, #56]	; (8000b98 <setScoreText+0xc8>)
 8000b5e:	fba3 1302 	umull	r1, r3, r3, r2
 8000b62:	08d9      	lsrs	r1, r3, #3
 8000b64:	460b      	mov	r3, r1
 8000b66:	009b      	lsls	r3, r3, #2
 8000b68:	440b      	add	r3, r1
 8000b6a:	005b      	lsls	r3, r3, #1
 8000b6c:	1ad3      	subs	r3, r2, r3
 8000b6e:	b29b      	uxth	r3, r3
 8000b70:	461a      	mov	r2, r3
 8000b72:	4b0a      	ldr	r3, [pc, #40]	; (8000b9c <setScoreText+0xcc>)
 8000b74:	5c9a      	ldrb	r2, [r3, r2]
 8000b76:	4b0a      	ldr	r3, [pc, #40]	; (8000ba0 <setScoreText+0xd0>)
 8000b78:	70da      	strb	r2, [r3, #3]
	scoreText[4] = '\r';
 8000b7a:	4b09      	ldr	r3, [pc, #36]	; (8000ba0 <setScoreText+0xd0>)
 8000b7c:	220d      	movs	r2, #13
 8000b7e:	711a      	strb	r2, [r3, #4]
	scoreText[5] = '\n';
 8000b80:	4b07      	ldr	r3, [pc, #28]	; (8000ba0 <setScoreText+0xd0>)
 8000b82:	220a      	movs	r2, #10
 8000b84:	715a      	strb	r2, [r3, #5]
}
 8000b86:	bf00      	nop
 8000b88:	46bd      	mov	sp, r7
 8000b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b8e:	4770      	bx	lr
 8000b90:	20000130 	.word	0x20000130
 8000b94:	10624dd3 	.word	0x10624dd3
 8000b98:	cccccccd 	.word	0xcccccccd
 8000b9c:	2000008c 	.word	0x2000008c
 8000ba0:	200002e8 	.word	0x200002e8
 8000ba4:	51eb851f 	.word	0x51eb851f

08000ba8 <initGame>:

void initGame() {
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b082      	sub	sp, #8
 8000bac:	af00      	add	r7, sp, #0
	for (int i=0; i<fieldWidth*fieldHeight; i++) {
 8000bae:	2300      	movs	r3, #0
 8000bb0:	607b      	str	r3, [r7, #4]
 8000bb2:	e035      	b.n	8000c20 <initGame+0x78>
		if (i%fieldWidth == 0 || (i-fieldWidth+1)%fieldWidth == 0) {
 8000bb4:	687a      	ldr	r2, [r7, #4]
 8000bb6:	4b2a      	ldr	r3, [pc, #168]	; (8000c60 <initGame+0xb8>)
 8000bb8:	fb83 1302 	smull	r1, r3, r3, r2
 8000bbc:	4413      	add	r3, r2
 8000bbe:	10d9      	asrs	r1, r3, #3
 8000bc0:	17d3      	asrs	r3, r2, #31
 8000bc2:	1ac9      	subs	r1, r1, r3
 8000bc4:	460b      	mov	r3, r1
 8000bc6:	011b      	lsls	r3, r3, #4
 8000bc8:	1a5b      	subs	r3, r3, r1
 8000bca:	1ad1      	subs	r1, r2, r3
 8000bcc:	2900      	cmp	r1, #0
 8000bce:	d00f      	beq.n	8000bf0 <initGame+0x48>
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	f1a3 020e 	sub.w	r2, r3, #14
 8000bd6:	4b22      	ldr	r3, [pc, #136]	; (8000c60 <initGame+0xb8>)
 8000bd8:	fb83 1302 	smull	r1, r3, r3, r2
 8000bdc:	4413      	add	r3, r2
 8000bde:	10d9      	asrs	r1, r3, #3
 8000be0:	17d3      	asrs	r3, r2, #31
 8000be2:	1ac9      	subs	r1, r1, r3
 8000be4:	460b      	mov	r3, r1
 8000be6:	011b      	lsls	r3, r3, #4
 8000be8:	1a5b      	subs	r3, r3, r1
 8000bea:	1ad1      	subs	r1, r2, r3
 8000bec:	2900      	cmp	r1, #0
 8000bee:	d105      	bne.n	8000bfc <initGame+0x54>
			field[i] = '|';
 8000bf0:	4a1c      	ldr	r2, [pc, #112]	; (8000c64 <initGame+0xbc>)
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	4413      	add	r3, r2
 8000bf6:	227c      	movs	r2, #124	; 0x7c
 8000bf8:	701a      	strb	r2, [r3, #0]
 8000bfa:	e00e      	b.n	8000c1a <initGame+0x72>
		} else if (i >= (fieldHeight-1)*fieldWidth) {
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	f5b3 7fb4 	cmp.w	r3, #360	; 0x168
 8000c02:	db05      	blt.n	8000c10 <initGame+0x68>
			field[i] = '#';
 8000c04:	4a17      	ldr	r2, [pc, #92]	; (8000c64 <initGame+0xbc>)
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	4413      	add	r3, r2
 8000c0a:	2223      	movs	r2, #35	; 0x23
 8000c0c:	701a      	strb	r2, [r3, #0]
 8000c0e:	e004      	b.n	8000c1a <initGame+0x72>
		} else {
			field[i] = '.';
 8000c10:	4a14      	ldr	r2, [pc, #80]	; (8000c64 <initGame+0xbc>)
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	4413      	add	r3, r2
 8000c16:	222e      	movs	r2, #46	; 0x2e
 8000c18:	701a      	strb	r2, [r3, #0]
	for (int i=0; i<fieldWidth*fieldHeight; i++) {
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	3301      	adds	r3, #1
 8000c1e:	607b      	str	r3, [r7, #4]
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	f5b3 7fbb 	cmp.w	r3, #374	; 0x176
 8000c26:	ddc5      	ble.n	8000bb4 <initGame+0xc>
		}
	}
	score = 0;
 8000c28:	4b0f      	ldr	r3, [pc, #60]	; (8000c68 <initGame+0xc0>)
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	801a      	strh	r2, [r3, #0]
	setScoreText();
 8000c2e:	f7ff ff4f 	bl	8000ad0 <setScoreText>
	gameOver = 0;
 8000c32:	4b0e      	ldr	r3, [pc, #56]	; (8000c6c <initGame+0xc4>)
 8000c34:	2200      	movs	r2, #0
 8000c36:	701a      	strb	r2, [r3, #0]
	curX = fieldWidth/2 - 2;
 8000c38:	4b0d      	ldr	r3, [pc, #52]	; (8000c70 <initGame+0xc8>)
 8000c3a:	2205      	movs	r2, #5
 8000c3c:	801a      	strh	r2, [r3, #0]
	curY = 0;
 8000c3e:	4b0d      	ldr	r3, [pc, #52]	; (8000c74 <initGame+0xcc>)
 8000c40:	2200      	movs	r2, #0
 8000c42:	801a      	strh	r2, [r3, #0]
	speed = 20;
 8000c44:	4b0c      	ldr	r3, [pc, #48]	; (8000c78 <initGame+0xd0>)
 8000c46:	2214      	movs	r2, #20
 8000c48:	701a      	strb	r2, [r3, #0]
	speedCount = 0;
 8000c4a:	4b0c      	ldr	r3, [pc, #48]	; (8000c7c <initGame+0xd4>)
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	701a      	strb	r2, [r3, #0]
	pieceCount = 1;
 8000c50:	4b0b      	ldr	r3, [pc, #44]	; (8000c80 <initGame+0xd8>)
 8000c52:	2201      	movs	r2, #1
 8000c54:	701a      	strb	r2, [r3, #0]
}
 8000c56:	bf00      	nop
 8000c58:	3708      	adds	r7, #8
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	bd80      	pop	{r7, pc}
 8000c5e:	bf00      	nop
 8000c60:	88888889 	.word	0x88888889
 8000c64:	20000300 	.word	0x20000300
 8000c68:	20000130 	.word	0x20000130
 8000c6c:	20000132 	.word	0x20000132
 8000c70:	2000009e 	.word	0x2000009e
 8000c74:	20000134 	.word	0x20000134
 8000c78:	200000a0 	.word	0x200000a0
 8000c7c:	20000136 	.word	0x20000136
 8000c80:	200000a1 	.word	0x200000a1

08000c84 <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000c84:	b590      	push	{r4, r7, lr}
 8000c86:	b087      	sub	sp, #28
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	6078      	str	r0, [r7, #4]
    if (htim->Instance == TIM4) {
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	681b      	ldr	r3, [r3, #0]
 8000c90:	4a5d      	ldr	r2, [pc, #372]	; (8000e08 <HAL_TIM_PeriodElapsedCallback+0x184>)
 8000c92:	4293      	cmp	r3, r2
 8000c94:	f040 80b4 	bne.w	8000e00 <HAL_TIM_PeriodElapsedCallback+0x17c>
    	if (!gameOver) {
 8000c98:	4b5c      	ldr	r3, [pc, #368]	; (8000e0c <HAL_TIM_PeriodElapsedCallback+0x188>)
 8000c9a:	781b      	ldrb	r3, [r3, #0]
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	f040 8090 	bne.w	8000dc2 <HAL_TIM_PeriodElapsedCallback+0x13e>
    		//Move tetromino down
    		if (canMove(0)) {
 8000ca2:	2000      	movs	r0, #0
 8000ca4:	f7ff fd54 	bl	8000750 <canMove>
 8000ca8:	4603      	mov	r3, r0
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	d006      	beq.n	8000cbc <HAL_TIM_PeriodElapsedCallback+0x38>
    			curY++;
 8000cae:	4b58      	ldr	r3, [pc, #352]	; (8000e10 <HAL_TIM_PeriodElapsedCallback+0x18c>)
 8000cb0:	881b      	ldrh	r3, [r3, #0]
 8000cb2:	3301      	adds	r3, #1
 8000cb4:	b29a      	uxth	r2, r3
 8000cb6:	4b56      	ldr	r3, [pc, #344]	; (8000e10 <HAL_TIM_PeriodElapsedCallback+0x18c>)
 8000cb8:	801a      	strh	r2, [r3, #0]
 8000cba:	e079      	b.n	8000db0 <HAL_TIM_PeriodElapsedCallback+0x12c>
    		} else {
    			//Set tetromino to Map
    			for(int i=0; i<4; i++) {
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	617b      	str	r3, [r7, #20]
 8000cc0:	e029      	b.n	8000d16 <HAL_TIM_PeriodElapsedCallback+0x92>
    				for (int j=0; j<4; j++) {
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	613b      	str	r3, [r7, #16]
 8000cc6:	e020      	b.n	8000d0a <HAL_TIM_PeriodElapsedCallback+0x86>
    					if (curTeTro[i*4 + j] != '.') {
 8000cc8:	697b      	ldr	r3, [r7, #20]
 8000cca:	009a      	lsls	r2, r3, #2
 8000ccc:	693b      	ldr	r3, [r7, #16]
 8000cce:	4413      	add	r3, r2
 8000cd0:	4a50      	ldr	r2, [pc, #320]	; (8000e14 <HAL_TIM_PeriodElapsedCallback+0x190>)
 8000cd2:	5cd3      	ldrb	r3, [r2, r3]
 8000cd4:	2b2e      	cmp	r3, #46	; 0x2e
 8000cd6:	d015      	beq.n	8000d04 <HAL_TIM_PeriodElapsedCallback+0x80>
    			  			field[(curY+i)*fieldWidth + (curX+j)] = curTeTro[i*4 + j];
 8000cd8:	697b      	ldr	r3, [r7, #20]
 8000cda:	009a      	lsls	r2, r3, #2
 8000cdc:	693b      	ldr	r3, [r7, #16]
 8000cde:	18d1      	adds	r1, r2, r3
 8000ce0:	4b4b      	ldr	r3, [pc, #300]	; (8000e10 <HAL_TIM_PeriodElapsedCallback+0x18c>)
 8000ce2:	881b      	ldrh	r3, [r3, #0]
 8000ce4:	461a      	mov	r2, r3
 8000ce6:	697b      	ldr	r3, [r7, #20]
 8000ce8:	441a      	add	r2, r3
 8000cea:	4613      	mov	r3, r2
 8000cec:	011b      	lsls	r3, r3, #4
 8000cee:	1a9a      	subs	r2, r3, r2
 8000cf0:	4b49      	ldr	r3, [pc, #292]	; (8000e18 <HAL_TIM_PeriodElapsedCallback+0x194>)
 8000cf2:	881b      	ldrh	r3, [r3, #0]
 8000cf4:	4618      	mov	r0, r3
 8000cf6:	693b      	ldr	r3, [r7, #16]
 8000cf8:	4403      	add	r3, r0
 8000cfa:	4413      	add	r3, r2
 8000cfc:	4a45      	ldr	r2, [pc, #276]	; (8000e14 <HAL_TIM_PeriodElapsedCallback+0x190>)
 8000cfe:	5c51      	ldrb	r1, [r2, r1]
 8000d00:	4a46      	ldr	r2, [pc, #280]	; (8000e1c <HAL_TIM_PeriodElapsedCallback+0x198>)
 8000d02:	54d1      	strb	r1, [r2, r3]
    				for (int j=0; j<4; j++) {
 8000d04:	693b      	ldr	r3, [r7, #16]
 8000d06:	3301      	adds	r3, #1
 8000d08:	613b      	str	r3, [r7, #16]
 8000d0a:	693b      	ldr	r3, [r7, #16]
 8000d0c:	2b03      	cmp	r3, #3
 8000d0e:	dddb      	ble.n	8000cc8 <HAL_TIM_PeriodElapsedCallback+0x44>
    			for(int i=0; i<4; i++) {
 8000d10:	697b      	ldr	r3, [r7, #20]
 8000d12:	3301      	adds	r3, #1
 8000d14:	617b      	str	r3, [r7, #20]
 8000d16:	697b      	ldr	r3, [r7, #20]
 8000d18:	2b03      	cmp	r3, #3
 8000d1a:	ddd2      	ble.n	8000cc2 <HAL_TIM_PeriodElapsedCallback+0x3e>
    			  		 }
    			  	}
    			}
    			//Check for the line and update score
    			for (uint8_t i=0; i<fieldHeight-1; i++) {
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	73fb      	strb	r3, [r7, #15]
 8000d20:	e015      	b.n	8000d4e <HAL_TIM_PeriodElapsedCallback+0xca>
    			  	if (gotLine(i)) {
 8000d22:	7bfb      	ldrb	r3, [r7, #15]
 8000d24:	4618      	mov	r0, r3
 8000d26:	f7ff fe2f 	bl	8000988 <gotLine>
 8000d2a:	4603      	mov	r3, r0
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d00b      	beq.n	8000d48 <HAL_TIM_PeriodElapsedCallback+0xc4>
    			  		score += 100;
 8000d30:	4b3b      	ldr	r3, [pc, #236]	; (8000e20 <HAL_TIM_PeriodElapsedCallback+0x19c>)
 8000d32:	881b      	ldrh	r3, [r3, #0]
 8000d34:	3364      	adds	r3, #100	; 0x64
 8000d36:	b29a      	uxth	r2, r3
 8000d38:	4b39      	ldr	r3, [pc, #228]	; (8000e20 <HAL_TIM_PeriodElapsedCallback+0x19c>)
 8000d3a:	801a      	strh	r2, [r3, #0]
    			  		setScoreText();
 8000d3c:	f7ff fec8 	bl	8000ad0 <setScoreText>
    			  		pushAboveDown(i);
 8000d40:	7bfb      	ldrb	r3, [r7, #15]
 8000d42:	4618      	mov	r0, r3
 8000d44:	f7ff fe46 	bl	80009d4 <pushAboveDown>
    			for (uint8_t i=0; i<fieldHeight-1; i++) {
 8000d48:	7bfb      	ldrb	r3, [r7, #15]
 8000d4a:	3301      	adds	r3, #1
 8000d4c:	73fb      	strb	r3, [r7, #15]
 8000d4e:	7bfb      	ldrb	r3, [r7, #15]
 8000d50:	2b17      	cmp	r3, #23
 8000d52:	d9e6      	bls.n	8000d22 <HAL_TIM_PeriodElapsedCallback+0x9e>
    			  	}
    			}
    			//Get the new tetromino
    			curY = 0;
 8000d54:	4b2e      	ldr	r3, [pc, #184]	; (8000e10 <HAL_TIM_PeriodElapsedCallback+0x18c>)
 8000d56:	2200      	movs	r2, #0
 8000d58:	801a      	strh	r2, [r3, #0]
    			curX = fieldWidth/2 - 2;
 8000d5a:	4b2f      	ldr	r3, [pc, #188]	; (8000e18 <HAL_TIM_PeriodElapsedCallback+0x194>)
 8000d5c:	2205      	movs	r2, #5
 8000d5e:	801a      	strh	r2, [r3, #0]
    			memcpy(curTeTro, tetrominos[rand()%7], 16);
 8000d60:	f002 fef6 	bl	8003b50 <rand>
 8000d64:	4601      	mov	r1, r0
 8000d66:	4b2f      	ldr	r3, [pc, #188]	; (8000e24 <HAL_TIM_PeriodElapsedCallback+0x1a0>)
 8000d68:	fb83 2301 	smull	r2, r3, r3, r1
 8000d6c:	440b      	add	r3, r1
 8000d6e:	109a      	asrs	r2, r3, #2
 8000d70:	17cb      	asrs	r3, r1, #31
 8000d72:	1ad2      	subs	r2, r2, r3
 8000d74:	4613      	mov	r3, r2
 8000d76:	00db      	lsls	r3, r3, #3
 8000d78:	1a9b      	subs	r3, r3, r2
 8000d7a:	1aca      	subs	r2, r1, r3
 8000d7c:	0113      	lsls	r3, r2, #4
 8000d7e:	4a2a      	ldr	r2, [pc, #168]	; (8000e28 <HAL_TIM_PeriodElapsedCallback+0x1a4>)
 8000d80:	441a      	add	r2, r3
 8000d82:	4b24      	ldr	r3, [pc, #144]	; (8000e14 <HAL_TIM_PeriodElapsedCallback+0x190>)
 8000d84:	6814      	ldr	r4, [r2, #0]
 8000d86:	6850      	ldr	r0, [r2, #4]
 8000d88:	6891      	ldr	r1, [r2, #8]
 8000d8a:	68d2      	ldr	r2, [r2, #12]
 8000d8c:	601c      	str	r4, [r3, #0]
 8000d8e:	6058      	str	r0, [r3, #4]
 8000d90:	6099      	str	r1, [r3, #8]
 8000d92:	60da      	str	r2, [r3, #12]
    			//Update piece count and speed
    			pieceCount++;
 8000d94:	4b25      	ldr	r3, [pc, #148]	; (8000e2c <HAL_TIM_PeriodElapsedCallback+0x1a8>)
 8000d96:	781b      	ldrb	r3, [r3, #0]
 8000d98:	3301      	adds	r3, #1
 8000d9a:	b2da      	uxtb	r2, r3
 8000d9c:	4b23      	ldr	r3, [pc, #140]	; (8000e2c <HAL_TIM_PeriodElapsedCallback+0x1a8>)
 8000d9e:	701a      	strb	r2, [r3, #0]
    			//CheckGameOver
    			if (isGameOver()) {
 8000da0:	f7ff fe56 	bl	8000a50 <isGameOver>
 8000da4:	4603      	mov	r3, r0
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d002      	beq.n	8000db0 <HAL_TIM_PeriodElapsedCallback+0x12c>
    				gameOver = 1;
 8000daa:	4b18      	ldr	r3, [pc, #96]	; (8000e0c <HAL_TIM_PeriodElapsedCallback+0x188>)
 8000dac:	2201      	movs	r2, #1
 8000dae:	701a      	strb	r2, [r3, #0]
    			}
    		}
    		if (!gameOver) {
 8000db0:	4b16      	ldr	r3, [pc, #88]	; (8000e0c <HAL_TIM_PeriodElapsedCallback+0x188>)
 8000db2:	781b      	ldrb	r3, [r3, #0]
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	d123      	bne.n	8000e00 <HAL_TIM_PeriodElapsedCallback+0x17c>
    			clearScreen();
 8000db8:	f7ff fb8e 	bl	80004d8 <clearScreen>
    			display();
 8000dbc:	f7ff fba2 	bl	8000504 <display>
    		HAL_UART_Receive_IT(&huart2, input, sizeof(input));

    	}

    }
}
 8000dc0:	e01e      	b.n	8000e00 <HAL_TIM_PeriodElapsedCallback+0x17c>
    		clearScreen();
 8000dc2:	f7ff fb89 	bl	80004d8 <clearScreen>
    		HAL_UART_Transmit(&huart2, newLine, sizeof(newLine), 50);
 8000dc6:	2332      	movs	r3, #50	; 0x32
 8000dc8:	2203      	movs	r2, #3
 8000dca:	4919      	ldr	r1, [pc, #100]	; (8000e30 <HAL_TIM_PeriodElapsedCallback+0x1ac>)
 8000dcc:	4819      	ldr	r0, [pc, #100]	; (8000e34 <HAL_TIM_PeriodElapsedCallback+0x1b0>)
 8000dce:	f001 ff96 	bl	8002cfe <HAL_UART_Transmit>
    		HAL_UART_Transmit(&huart2, gameOverText1, sizeof(gameOverText1), 50);
 8000dd2:	2332      	movs	r3, #50	; 0x32
 8000dd4:	222d      	movs	r2, #45	; 0x2d
 8000dd6:	4918      	ldr	r1, [pc, #96]	; (8000e38 <HAL_TIM_PeriodElapsedCallback+0x1b4>)
 8000dd8:	4816      	ldr	r0, [pc, #88]	; (8000e34 <HAL_TIM_PeriodElapsedCallback+0x1b0>)
 8000dda:	f001 ff90 	bl	8002cfe <HAL_UART_Transmit>
    		HAL_UART_Transmit(&huart2, scoreText, sizeof(scoreText), 50);
 8000dde:	2332      	movs	r3, #50	; 0x32
 8000de0:	2206      	movs	r2, #6
 8000de2:	4916      	ldr	r1, [pc, #88]	; (8000e3c <HAL_TIM_PeriodElapsedCallback+0x1b8>)
 8000de4:	4813      	ldr	r0, [pc, #76]	; (8000e34 <HAL_TIM_PeriodElapsedCallback+0x1b0>)
 8000de6:	f001 ff8a 	bl	8002cfe <HAL_UART_Transmit>
    		HAL_UART_Transmit(&huart2, gameOverText2, sizeof(gameOverText2), 50);
 8000dea:	2332      	movs	r3, #50	; 0x32
 8000dec:	2221      	movs	r2, #33	; 0x21
 8000dee:	4914      	ldr	r1, [pc, #80]	; (8000e40 <HAL_TIM_PeriodElapsedCallback+0x1bc>)
 8000df0:	4810      	ldr	r0, [pc, #64]	; (8000e34 <HAL_TIM_PeriodElapsedCallback+0x1b0>)
 8000df2:	f001 ff84 	bl	8002cfe <HAL_UART_Transmit>
    		HAL_UART_Receive_IT(&huart2, input, sizeof(input));
 8000df6:	2201      	movs	r2, #1
 8000df8:	4912      	ldr	r1, [pc, #72]	; (8000e44 <HAL_TIM_PeriodElapsedCallback+0x1c0>)
 8000dfa:	480e      	ldr	r0, [pc, #56]	; (8000e34 <HAL_TIM_PeriodElapsedCallback+0x1b0>)
 8000dfc:	f002 f818 	bl	8002e30 <HAL_UART_Receive_IT>
}
 8000e00:	bf00      	nop
 8000e02:	371c      	adds	r7, #28
 8000e04:	46bd      	mov	sp, r7
 8000e06:	bd90      	pop	{r4, r7, pc}
 8000e08:	40000800 	.word	0x40000800
 8000e0c:	20000132 	.word	0x20000132
 8000e10:	20000134 	.word	0x20000134
 8000e14:	200002f0 	.word	0x200002f0
 8000e18:	2000009e 	.word	0x2000009e
 8000e1c:	20000300 	.word	0x20000300
 8000e20:	20000130 	.word	0x20000130
 8000e24:	92492493 	.word	0x92492493
 8000e28:	200004b8 	.word	0x200004b8
 8000e2c:	200000a1 	.word	0x200000a1
 8000e30:	20000010 	.word	0x20000010
 8000e34:	20000478 	.word	0x20000478
 8000e38:	20000038 	.word	0x20000038
 8000e3c:	200002e8 	.word	0x200002e8
 8000e40:	20000068 	.word	0x20000068
 8000e44:	20000184 	.word	0x20000184

08000e48 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000e4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	initGame();
 8000e4c:	f7ff feac 	bl	8000ba8 <initGame>
	//Tetromino
	memcpy(tetrominos[0], ".....OO..OO.....", 16);
 8000e50:	4a45      	ldr	r2, [pc, #276]	; (8000f68 <main+0x120>)
 8000e52:	4b46      	ldr	r3, [pc, #280]	; (8000f6c <main+0x124>)
 8000e54:	4614      	mov	r4, r2
 8000e56:	461d      	mov	r5, r3
 8000e58:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000e5a:	6020      	str	r0, [r4, #0]
 8000e5c:	6061      	str	r1, [r4, #4]
 8000e5e:	60a2      	str	r2, [r4, #8]
 8000e60:	60e3      	str	r3, [r4, #12]
	memcpy(tetrominos[1], ".I...I...I...I..", 16);
 8000e62:	4b41      	ldr	r3, [pc, #260]	; (8000f68 <main+0x120>)
 8000e64:	4a42      	ldr	r2, [pc, #264]	; (8000f70 <main+0x128>)
 8000e66:	f103 0410 	add.w	r4, r3, #16
 8000e6a:	4615      	mov	r5, r2
 8000e6c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000e6e:	6020      	str	r0, [r4, #0]
 8000e70:	6061      	str	r1, [r4, #4]
 8000e72:	60a2      	str	r2, [r4, #8]
 8000e74:	60e3      	str	r3, [r4, #12]
	memcpy(tetrominos[2], ".....SS.SS......", 16);
 8000e76:	4b3c      	ldr	r3, [pc, #240]	; (8000f68 <main+0x120>)
 8000e78:	4a3e      	ldr	r2, [pc, #248]	; (8000f74 <main+0x12c>)
 8000e7a:	f103 0420 	add.w	r4, r3, #32
 8000e7e:	4615      	mov	r5, r2
 8000e80:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000e82:	6020      	str	r0, [r4, #0]
 8000e84:	6061      	str	r1, [r4, #4]
 8000e86:	60a2      	str	r2, [r4, #8]
 8000e88:	60e3      	str	r3, [r4, #12]
	memcpy(tetrominos[3], "....ZZ...ZZ.....", 16);
 8000e8a:	4b37      	ldr	r3, [pc, #220]	; (8000f68 <main+0x120>)
 8000e8c:	4a3a      	ldr	r2, [pc, #232]	; (8000f78 <main+0x130>)
 8000e8e:	f103 0430 	add.w	r4, r3, #48	; 0x30
 8000e92:	4615      	mov	r5, r2
 8000e94:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000e96:	6020      	str	r0, [r4, #0]
 8000e98:	6061      	str	r1, [r4, #4]
 8000e9a:	60a2      	str	r2, [r4, #8]
 8000e9c:	60e3      	str	r3, [r4, #12]
	memcpy(tetrominos[4], ".L...L...LL.....", 16);
 8000e9e:	4b32      	ldr	r3, [pc, #200]	; (8000f68 <main+0x120>)
 8000ea0:	4a36      	ldr	r2, [pc, #216]	; (8000f7c <main+0x134>)
 8000ea2:	f103 0440 	add.w	r4, r3, #64	; 0x40
 8000ea6:	4615      	mov	r5, r2
 8000ea8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000eaa:	6020      	str	r0, [r4, #0]
 8000eac:	6061      	str	r1, [r4, #4]
 8000eae:	60a2      	str	r2, [r4, #8]
 8000eb0:	60e3      	str	r3, [r4, #12]
	memcpy(tetrominos[5], "..J...J..JJ.....", 16);
 8000eb2:	4b2d      	ldr	r3, [pc, #180]	; (8000f68 <main+0x120>)
 8000eb4:	4a32      	ldr	r2, [pc, #200]	; (8000f80 <main+0x138>)
 8000eb6:	f103 0450 	add.w	r4, r3, #80	; 0x50
 8000eba:	4615      	mov	r5, r2
 8000ebc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000ebe:	6020      	str	r0, [r4, #0]
 8000ec0:	6061      	str	r1, [r4, #4]
 8000ec2:	60a2      	str	r2, [r4, #8]
 8000ec4:	60e3      	str	r3, [r4, #12]
	memcpy(tetrominos[6], "....TTT..T......", 16);
 8000ec6:	4b28      	ldr	r3, [pc, #160]	; (8000f68 <main+0x120>)
 8000ec8:	4a2e      	ldr	r2, [pc, #184]	; (8000f84 <main+0x13c>)
 8000eca:	f103 0460 	add.w	r4, r3, #96	; 0x60
 8000ece:	4615      	mov	r5, r2
 8000ed0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000ed2:	6020      	str	r0, [r4, #0]
 8000ed4:	6061      	str	r1, [r4, #4]
 8000ed6:	60a2      	str	r2, [r4, #8]
 8000ed8:	60e3      	str	r3, [r4, #12]
	memcpy(curTeTro, tetrominos[rand()%7], 16);
 8000eda:	f002 fe39 	bl	8003b50 <rand>
 8000ede:	4601      	mov	r1, r0
 8000ee0:	4b29      	ldr	r3, [pc, #164]	; (8000f88 <main+0x140>)
 8000ee2:	fb83 2301 	smull	r2, r3, r3, r1
 8000ee6:	440b      	add	r3, r1
 8000ee8:	109a      	asrs	r2, r3, #2
 8000eea:	17cb      	asrs	r3, r1, #31
 8000eec:	1ad2      	subs	r2, r2, r3
 8000eee:	4613      	mov	r3, r2
 8000ef0:	00db      	lsls	r3, r3, #3
 8000ef2:	1a9b      	subs	r3, r3, r2
 8000ef4:	1aca      	subs	r2, r1, r3
 8000ef6:	0113      	lsls	r3, r2, #4
 8000ef8:	4a1b      	ldr	r2, [pc, #108]	; (8000f68 <main+0x120>)
 8000efa:	441a      	add	r2, r3
 8000efc:	4b23      	ldr	r3, [pc, #140]	; (8000f8c <main+0x144>)
 8000efe:	6814      	ldr	r4, [r2, #0]
 8000f00:	6850      	ldr	r0, [r2, #4]
 8000f02:	6891      	ldr	r1, [r2, #8]
 8000f04:	68d2      	ldr	r2, [r2, #12]
 8000f06:	601c      	str	r4, [r3, #0]
 8000f08:	6058      	str	r0, [r3, #4]
 8000f0a:	6099      	str	r1, [r3, #8]
 8000f0c:	60da      	str	r2, [r3, #12]
	memcpy(guideText[0], "There are 7 types of Tetrominos  ", 35);
 8000f0e:	4b20      	ldr	r3, [pc, #128]	; (8000f90 <main+0x148>)
 8000f10:	4a20      	ldr	r2, [pc, #128]	; (8000f94 <main+0x14c>)
 8000f12:	4614      	mov	r4, r2
 8000f14:	469c      	mov	ip, r3
 8000f16:	f104 0e20 	add.w	lr, r4, #32
 8000f1a:	4665      	mov	r5, ip
 8000f1c:	4626      	mov	r6, r4
 8000f1e:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8000f20:	6028      	str	r0, [r5, #0]
 8000f22:	6069      	str	r1, [r5, #4]
 8000f24:	60aa      	str	r2, [r5, #8]
 8000f26:	60eb      	str	r3, [r5, #12]
 8000f28:	3410      	adds	r4, #16
 8000f2a:	f10c 0c10 	add.w	ip, ip, #16
 8000f2e:	4574      	cmp	r4, lr
 8000f30:	d1f3      	bne.n	8000f1a <main+0xd2>
 8000f32:	4663      	mov	r3, ip
 8000f34:	4622      	mov	r2, r4
 8000f36:	8811      	ldrh	r1, [r2, #0]
 8000f38:	7892      	ldrb	r2, [r2, #2]
 8000f3a:	8019      	strh	r1, [r3, #0]
 8000f3c:	709a      	strb	r2, [r3, #2]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f3e:	f000 fb27 	bl	8001590 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f42:	f000 f82f 	bl	8000fa4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f46:	f000 f90d 	bl	8001164 <MX_GPIO_Init>
  MX_TIM4_Init();
 8000f4a:	f000 f893 	bl	8001074 <MX_TIM4_Init>
  MX_USART2_UART_Init();
 8000f4e:	f000 f8df 	bl	8001110 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  clearScreen();
 8000f52:	f7ff fac1 	bl	80004d8 <clearScreen>
  HAL_UART_Receive_IT(&huart2, input, sizeof(input));
 8000f56:	2201      	movs	r2, #1
 8000f58:	490f      	ldr	r1, [pc, #60]	; (8000f98 <main+0x150>)
 8000f5a:	4810      	ldr	r0, [pc, #64]	; (8000f9c <main+0x154>)
 8000f5c:	f001 ff68 	bl	8002e30 <HAL_UART_Receive_IT>
  HAL_TIM_Base_Start_IT(&htim4);
 8000f60:	480f      	ldr	r0, [pc, #60]	; (8000fa0 <main+0x158>)
 8000f62:	f001 fad8 	bl	8002516 <HAL_TIM_Base_Start_IT>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000f66:	e7fe      	b.n	8000f66 <main+0x11e>
 8000f68:	200004b8 	.word	0x200004b8
 8000f6c:	08003cb8 	.word	0x08003cb8
 8000f70:	08003ccc 	.word	0x08003ccc
 8000f74:	08003ce0 	.word	0x08003ce0
 8000f78:	08003cf4 	.word	0x08003cf4
 8000f7c:	08003d08 	.word	0x08003d08
 8000f80:	08003d1c 	.word	0x08003d1c
 8000f84:	08003d30 	.word	0x08003d30
 8000f88:	92492493 	.word	0x92492493
 8000f8c:	200002f0 	.word	0x200002f0
 8000f90:	20000188 	.word	0x20000188
 8000f94:	08003d44 	.word	0x08003d44
 8000f98:	20000184 	.word	0x20000184
 8000f9c:	20000478 	.word	0x20000478
 8000fa0:	20000144 	.word	0x20000144

08000fa4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b094      	sub	sp, #80	; 0x50
 8000fa8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000faa:	f107 0320 	add.w	r3, r7, #32
 8000fae:	2230      	movs	r2, #48	; 0x30
 8000fb0:	2100      	movs	r1, #0
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	f002 fdc3 	bl	8003b3e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000fb8:	f107 030c 	add.w	r3, r7, #12
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	601a      	str	r2, [r3, #0]
 8000fc0:	605a      	str	r2, [r3, #4]
 8000fc2:	609a      	str	r2, [r3, #8]
 8000fc4:	60da      	str	r2, [r3, #12]
 8000fc6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fc8:	2300      	movs	r3, #0
 8000fca:	60bb      	str	r3, [r7, #8]
 8000fcc:	4b27      	ldr	r3, [pc, #156]	; (800106c <SystemClock_Config+0xc8>)
 8000fce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fd0:	4a26      	ldr	r2, [pc, #152]	; (800106c <SystemClock_Config+0xc8>)
 8000fd2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000fd6:	6413      	str	r3, [r2, #64]	; 0x40
 8000fd8:	4b24      	ldr	r3, [pc, #144]	; (800106c <SystemClock_Config+0xc8>)
 8000fda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fdc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fe0:	60bb      	str	r3, [r7, #8]
 8000fe2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	607b      	str	r3, [r7, #4]
 8000fe8:	4b21      	ldr	r3, [pc, #132]	; (8001070 <SystemClock_Config+0xcc>)
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	4a20      	ldr	r2, [pc, #128]	; (8001070 <SystemClock_Config+0xcc>)
 8000fee:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000ff2:	6013      	str	r3, [r2, #0]
 8000ff4:	4b1e      	ldr	r3, [pc, #120]	; (8001070 <SystemClock_Config+0xcc>)
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000ffc:	607b      	str	r3, [r7, #4]
 8000ffe:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001000:	2302      	movs	r3, #2
 8001002:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001004:	2301      	movs	r3, #1
 8001006:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001008:	2310      	movs	r3, #16
 800100a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800100c:	2302      	movs	r3, #2
 800100e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001010:	2300      	movs	r3, #0
 8001012:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001014:	2308      	movs	r3, #8
 8001016:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 64;
 8001018:	2340      	movs	r3, #64	; 0x40
 800101a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800101c:	2302      	movs	r3, #2
 800101e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001020:	2304      	movs	r3, #4
 8001022:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001024:	f107 0320 	add.w	r3, r7, #32
 8001028:	4618      	mov	r0, r3
 800102a:	f000 fe0d 	bl	8001c48 <HAL_RCC_OscConfig>
 800102e:	4603      	mov	r3, r0
 8001030:	2b00      	cmp	r3, #0
 8001032:	d001      	beq.n	8001038 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001034:	f000 f956 	bl	80012e4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001038:	230f      	movs	r3, #15
 800103a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800103c:	2302      	movs	r3, #2
 800103e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 8001040:	2380      	movs	r3, #128	; 0x80
 8001042:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001044:	2300      	movs	r3, #0
 8001046:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001048:	2300      	movs	r3, #0
 800104a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800104c:	f107 030c 	add.w	r3, r7, #12
 8001050:	2101      	movs	r1, #1
 8001052:	4618      	mov	r0, r3
 8001054:	f001 f868 	bl	8002128 <HAL_RCC_ClockConfig>
 8001058:	4603      	mov	r3, r0
 800105a:	2b00      	cmp	r3, #0
 800105c:	d001      	beq.n	8001062 <SystemClock_Config+0xbe>
  {
    Error_Handler();
 800105e:	f000 f941 	bl	80012e4 <Error_Handler>
  }
}
 8001062:	bf00      	nop
 8001064:	3750      	adds	r7, #80	; 0x50
 8001066:	46bd      	mov	sp, r7
 8001068:	bd80      	pop	{r7, pc}
 800106a:	bf00      	nop
 800106c:	40023800 	.word	0x40023800
 8001070:	40007000 	.word	0x40007000

08001074 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	b086      	sub	sp, #24
 8001078:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800107a:	f107 0308 	add.w	r3, r7, #8
 800107e:	2200      	movs	r2, #0
 8001080:	601a      	str	r2, [r3, #0]
 8001082:	605a      	str	r2, [r3, #4]
 8001084:	609a      	str	r2, [r3, #8]
 8001086:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001088:	463b      	mov	r3, r7
 800108a:	2200      	movs	r2, #0
 800108c:	601a      	str	r2, [r3, #0]
 800108e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001090:	4b1d      	ldr	r3, [pc, #116]	; (8001108 <MX_TIM4_Init+0x94>)
 8001092:	4a1e      	ldr	r2, [pc, #120]	; (800110c <MX_TIM4_Init+0x98>)
 8001094:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 32000;
 8001096:	4b1c      	ldr	r3, [pc, #112]	; (8001108 <MX_TIM4_Init+0x94>)
 8001098:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
 800109c:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800109e:	4b1a      	ldr	r3, [pc, #104]	; (8001108 <MX_TIM4_Init+0x94>)
 80010a0:	2200      	movs	r2, #0
 80010a2:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1000;
 80010a4:	4b18      	ldr	r3, [pc, #96]	; (8001108 <MX_TIM4_Init+0x94>)
 80010a6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80010aa:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010ac:	4b16      	ldr	r3, [pc, #88]	; (8001108 <MX_TIM4_Init+0x94>)
 80010ae:	2200      	movs	r2, #0
 80010b0:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010b2:	4b15      	ldr	r3, [pc, #84]	; (8001108 <MX_TIM4_Init+0x94>)
 80010b4:	2200      	movs	r2, #0
 80010b6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80010b8:	4813      	ldr	r0, [pc, #76]	; (8001108 <MX_TIM4_Init+0x94>)
 80010ba:	f001 fa01 	bl	80024c0 <HAL_TIM_Base_Init>
 80010be:	4603      	mov	r3, r0
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d001      	beq.n	80010c8 <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 80010c4:	f000 f90e 	bl	80012e4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80010c8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80010cc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80010ce:	f107 0308 	add.w	r3, r7, #8
 80010d2:	4619      	mov	r1, r3
 80010d4:	480c      	ldr	r0, [pc, #48]	; (8001108 <MX_TIM4_Init+0x94>)
 80010d6:	f001 fb4a 	bl	800276e <HAL_TIM_ConfigClockSource>
 80010da:	4603      	mov	r3, r0
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d001      	beq.n	80010e4 <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 80010e0:	f000 f900 	bl	80012e4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80010e4:	2300      	movs	r3, #0
 80010e6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80010e8:	2300      	movs	r3, #0
 80010ea:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80010ec:	463b      	mov	r3, r7
 80010ee:	4619      	mov	r1, r3
 80010f0:	4805      	ldr	r0, [pc, #20]	; (8001108 <MX_TIM4_Init+0x94>)
 80010f2:	f001 fd35 	bl	8002b60 <HAL_TIMEx_MasterConfigSynchronization>
 80010f6:	4603      	mov	r3, r0
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d001      	beq.n	8001100 <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 80010fc:	f000 f8f2 	bl	80012e4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001100:	bf00      	nop
 8001102:	3718      	adds	r7, #24
 8001104:	46bd      	mov	sp, r7
 8001106:	bd80      	pop	{r7, pc}
 8001108:	20000144 	.word	0x20000144
 800110c:	40000800 	.word	0x40000800

08001110 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001114:	4b11      	ldr	r3, [pc, #68]	; (800115c <MX_USART2_UART_Init+0x4c>)
 8001116:	4a12      	ldr	r2, [pc, #72]	; (8001160 <MX_USART2_UART_Init+0x50>)
 8001118:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 921600;
 800111a:	4b10      	ldr	r3, [pc, #64]	; (800115c <MX_USART2_UART_Init+0x4c>)
 800111c:	f44f 2261 	mov.w	r2, #921600	; 0xe1000
 8001120:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001122:	4b0e      	ldr	r3, [pc, #56]	; (800115c <MX_USART2_UART_Init+0x4c>)
 8001124:	2200      	movs	r2, #0
 8001126:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001128:	4b0c      	ldr	r3, [pc, #48]	; (800115c <MX_USART2_UART_Init+0x4c>)
 800112a:	2200      	movs	r2, #0
 800112c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800112e:	4b0b      	ldr	r3, [pc, #44]	; (800115c <MX_USART2_UART_Init+0x4c>)
 8001130:	2200      	movs	r2, #0
 8001132:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001134:	4b09      	ldr	r3, [pc, #36]	; (800115c <MX_USART2_UART_Init+0x4c>)
 8001136:	220c      	movs	r2, #12
 8001138:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800113a:	4b08      	ldr	r3, [pc, #32]	; (800115c <MX_USART2_UART_Init+0x4c>)
 800113c:	2200      	movs	r2, #0
 800113e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001140:	4b06      	ldr	r3, [pc, #24]	; (800115c <MX_USART2_UART_Init+0x4c>)
 8001142:	2200      	movs	r2, #0
 8001144:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001146:	4805      	ldr	r0, [pc, #20]	; (800115c <MX_USART2_UART_Init+0x4c>)
 8001148:	f001 fd8c 	bl	8002c64 <HAL_UART_Init>
 800114c:	4603      	mov	r3, r0
 800114e:	2b00      	cmp	r3, #0
 8001150:	d001      	beq.n	8001156 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001152:	f000 f8c7 	bl	80012e4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001156:	bf00      	nop
 8001158:	bd80      	pop	{r7, pc}
 800115a:	bf00      	nop
 800115c:	20000478 	.word	0x20000478
 8001160:	40004400 	.word	0x40004400

08001164 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	b086      	sub	sp, #24
 8001168:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800116a:	1d3b      	adds	r3, r7, #4
 800116c:	2200      	movs	r2, #0
 800116e:	601a      	str	r2, [r3, #0]
 8001170:	605a      	str	r2, [r3, #4]
 8001172:	609a      	str	r2, [r3, #8]
 8001174:	60da      	str	r2, [r3, #12]
 8001176:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001178:	2300      	movs	r3, #0
 800117a:	603b      	str	r3, [r7, #0]
 800117c:	4b10      	ldr	r3, [pc, #64]	; (80011c0 <MX_GPIO_Init+0x5c>)
 800117e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001180:	4a0f      	ldr	r2, [pc, #60]	; (80011c0 <MX_GPIO_Init+0x5c>)
 8001182:	f043 0301 	orr.w	r3, r3, #1
 8001186:	6313      	str	r3, [r2, #48]	; 0x30
 8001188:	4b0d      	ldr	r3, [pc, #52]	; (80011c0 <MX_GPIO_Init+0x5c>)
 800118a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800118c:	f003 0301 	and.w	r3, r3, #1
 8001190:	603b      	str	r3, [r7, #0]
 8001192:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8001194:	2200      	movs	r2, #0
 8001196:	2120      	movs	r1, #32
 8001198:	480a      	ldr	r0, [pc, #40]	; (80011c4 <MX_GPIO_Init+0x60>)
 800119a:	f000 fd21 	bl	8001be0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 800119e:	2320      	movs	r3, #32
 80011a0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011a2:	2301      	movs	r3, #1
 80011a4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011a6:	2300      	movs	r3, #0
 80011a8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011aa:	2300      	movs	r3, #0
 80011ac:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011ae:	1d3b      	adds	r3, r7, #4
 80011b0:	4619      	mov	r1, r3
 80011b2:	4804      	ldr	r0, [pc, #16]	; (80011c4 <MX_GPIO_Init+0x60>)
 80011b4:	f000 fb92 	bl	80018dc <HAL_GPIO_Init>

}
 80011b8:	bf00      	nop
 80011ba:	3718      	adds	r7, #24
 80011bc:	46bd      	mov	sp, r7
 80011be:	bd80      	pop	{r7, pc}
 80011c0:	40023800 	.word	0x40023800
 80011c4:	40020000 	.word	0x40020000

080011c8 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b082      	sub	sp, #8
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	6078      	str	r0, [r7, #4]
	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 80011d0:	2120      	movs	r1, #32
 80011d2:	483d      	ldr	r0, [pc, #244]	; (80012c8 <HAL_UART_RxCpltCallback+0x100>)
 80011d4:	f000 fd1d 	bl	8001c12 <HAL_GPIO_TogglePin>
	//IF press right arrow
	if (!gameOver) {
 80011d8:	4b3c      	ldr	r3, [pc, #240]	; (80012cc <HAL_UART_RxCpltCallback+0x104>)
 80011da:	781b      	ldrb	r3, [r3, #0]
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d164      	bne.n	80012aa <HAL_UART_RxCpltCallback+0xe2>
		if (input[0] == 'd' && canMove(1)) {
 80011e0:	4b3b      	ldr	r3, [pc, #236]	; (80012d0 <HAL_UART_RxCpltCallback+0x108>)
 80011e2:	781b      	ldrb	r3, [r3, #0]
 80011e4:	2b64      	cmp	r3, #100	; 0x64
 80011e6:	d110      	bne.n	800120a <HAL_UART_RxCpltCallback+0x42>
 80011e8:	2001      	movs	r0, #1
 80011ea:	f7ff fab1 	bl	8000750 <canMove>
 80011ee:	4603      	mov	r3, r0
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d00a      	beq.n	800120a <HAL_UART_RxCpltCallback+0x42>
			curX++;
 80011f4:	4b37      	ldr	r3, [pc, #220]	; (80012d4 <HAL_UART_RxCpltCallback+0x10c>)
 80011f6:	881b      	ldrh	r3, [r3, #0]
 80011f8:	3301      	adds	r3, #1
 80011fa:	b29a      	uxth	r2, r3
 80011fc:	4b35      	ldr	r3, [pc, #212]	; (80012d4 <HAL_UART_RxCpltCallback+0x10c>)
 80011fe:	801a      	strh	r2, [r3, #0]
			clearScreen();
 8001200:	f7ff f96a 	bl	80004d8 <clearScreen>
			display();
 8001204:	f7ff f97e 	bl	8000504 <display>
 8001208:	e055      	b.n	80012b6 <HAL_UART_RxCpltCallback+0xee>
		//If press left arrow
		} else if (input[0] == 'a' && canMove(2)){
 800120a:	4b31      	ldr	r3, [pc, #196]	; (80012d0 <HAL_UART_RxCpltCallback+0x108>)
 800120c:	781b      	ldrb	r3, [r3, #0]
 800120e:	2b61      	cmp	r3, #97	; 0x61
 8001210:	d110      	bne.n	8001234 <HAL_UART_RxCpltCallback+0x6c>
 8001212:	2002      	movs	r0, #2
 8001214:	f7ff fa9c 	bl	8000750 <canMove>
 8001218:	4603      	mov	r3, r0
 800121a:	2b00      	cmp	r3, #0
 800121c:	d00a      	beq.n	8001234 <HAL_UART_RxCpltCallback+0x6c>
			curX--;
 800121e:	4b2d      	ldr	r3, [pc, #180]	; (80012d4 <HAL_UART_RxCpltCallback+0x10c>)
 8001220:	881b      	ldrh	r3, [r3, #0]
 8001222:	3b01      	subs	r3, #1
 8001224:	b29a      	uxth	r2, r3
 8001226:	4b2b      	ldr	r3, [pc, #172]	; (80012d4 <HAL_UART_RxCpltCallback+0x10c>)
 8001228:	801a      	strh	r2, [r3, #0]
			clearScreen();
 800122a:	f7ff f955 	bl	80004d8 <clearScreen>
			display();
 800122e:	f7ff f969 	bl	8000504 <display>
 8001232:	e040      	b.n	80012b6 <HAL_UART_RxCpltCallback+0xee>
		//If press down arrow
		} else if (input[0] == 's' && canMove(0)){
 8001234:	4b26      	ldr	r3, [pc, #152]	; (80012d0 <HAL_UART_RxCpltCallback+0x108>)
 8001236:	781b      	ldrb	r3, [r3, #0]
 8001238:	2b73      	cmp	r3, #115	; 0x73
 800123a:	d110      	bne.n	800125e <HAL_UART_RxCpltCallback+0x96>
 800123c:	2000      	movs	r0, #0
 800123e:	f7ff fa87 	bl	8000750 <canMove>
 8001242:	4603      	mov	r3, r0
 8001244:	2b00      	cmp	r3, #0
 8001246:	d00a      	beq.n	800125e <HAL_UART_RxCpltCallback+0x96>
			curY++;
 8001248:	4b23      	ldr	r3, [pc, #140]	; (80012d8 <HAL_UART_RxCpltCallback+0x110>)
 800124a:	881b      	ldrh	r3, [r3, #0]
 800124c:	3301      	adds	r3, #1
 800124e:	b29a      	uxth	r2, r3
 8001250:	4b21      	ldr	r3, [pc, #132]	; (80012d8 <HAL_UART_RxCpltCallback+0x110>)
 8001252:	801a      	strh	r2, [r3, #0]
			clearScreen();
 8001254:	f7ff f940 	bl	80004d8 <clearScreen>
			display();
 8001258:	f7ff f954 	bl	8000504 <display>
 800125c:	e02b      	b.n	80012b6 <HAL_UART_RxCpltCallback+0xee>
		//If press j (rotate counter-clockwise)
		} else if (input[0] == 'j' && canRotate(0)) {
 800125e:	4b1c      	ldr	r3, [pc, #112]	; (80012d0 <HAL_UART_RxCpltCallback+0x108>)
 8001260:	781b      	ldrb	r3, [r3, #0]
 8001262:	2b6a      	cmp	r3, #106	; 0x6a
 8001264:	d10e      	bne.n	8001284 <HAL_UART_RxCpltCallback+0xbc>
 8001266:	2000      	movs	r0, #0
 8001268:	f7ff fb1a 	bl	80008a0 <canRotate>
 800126c:	4603      	mov	r3, r0
 800126e:	2b00      	cmp	r3, #0
 8001270:	d008      	beq.n	8001284 <HAL_UART_RxCpltCallback+0xbc>
			rotate(curTeTro, 0);
 8001272:	2100      	movs	r1, #0
 8001274:	4819      	ldr	r0, [pc, #100]	; (80012dc <HAL_UART_RxCpltCallback+0x114>)
 8001276:	f7ff fa09 	bl	800068c <rotate>
			clearScreen();
 800127a:	f7ff f92d 	bl	80004d8 <clearScreen>
			display();
 800127e:	f7ff f941 	bl	8000504 <display>
 8001282:	e018      	b.n	80012b6 <HAL_UART_RxCpltCallback+0xee>
		//If press k (rotate clockwise)
		} else if (input[0] == 'k' && canRotate(1)) {
 8001284:	4b12      	ldr	r3, [pc, #72]	; (80012d0 <HAL_UART_RxCpltCallback+0x108>)
 8001286:	781b      	ldrb	r3, [r3, #0]
 8001288:	2b6b      	cmp	r3, #107	; 0x6b
 800128a:	d114      	bne.n	80012b6 <HAL_UART_RxCpltCallback+0xee>
 800128c:	2001      	movs	r0, #1
 800128e:	f7ff fb07 	bl	80008a0 <canRotate>
 8001292:	4603      	mov	r3, r0
 8001294:	2b00      	cmp	r3, #0
 8001296:	d00e      	beq.n	80012b6 <HAL_UART_RxCpltCallback+0xee>
			rotate(curTeTro, 1);
 8001298:	2101      	movs	r1, #1
 800129a:	4810      	ldr	r0, [pc, #64]	; (80012dc <HAL_UART_RxCpltCallback+0x114>)
 800129c:	f7ff f9f6 	bl	800068c <rotate>
			clearScreen();
 80012a0:	f7ff f91a 	bl	80004d8 <clearScreen>
			display();
 80012a4:	f7ff f92e 	bl	8000504 <display>
 80012a8:	e005      	b.n	80012b6 <HAL_UART_RxCpltCallback+0xee>
		}
	} else if (input[0] == ' ') {
 80012aa:	4b09      	ldr	r3, [pc, #36]	; (80012d0 <HAL_UART_RxCpltCallback+0x108>)
 80012ac:	781b      	ldrb	r3, [r3, #0]
 80012ae:	2b20      	cmp	r3, #32
 80012b0:	d101      	bne.n	80012b6 <HAL_UART_RxCpltCallback+0xee>
		initGame();
 80012b2:	f7ff fc79 	bl	8000ba8 <initGame>
	}
	HAL_UART_Receive_IT(&huart2, input, sizeof(input));
 80012b6:	2201      	movs	r2, #1
 80012b8:	4905      	ldr	r1, [pc, #20]	; (80012d0 <HAL_UART_RxCpltCallback+0x108>)
 80012ba:	4809      	ldr	r0, [pc, #36]	; (80012e0 <HAL_UART_RxCpltCallback+0x118>)
 80012bc:	f001 fdb8 	bl	8002e30 <HAL_UART_Receive_IT>
}
 80012c0:	bf00      	nop
 80012c2:	3708      	adds	r7, #8
 80012c4:	46bd      	mov	sp, r7
 80012c6:	bd80      	pop	{r7, pc}
 80012c8:	40020000 	.word	0x40020000
 80012cc:	20000132 	.word	0x20000132
 80012d0:	20000184 	.word	0x20000184
 80012d4:	2000009e 	.word	0x2000009e
 80012d8:	20000134 	.word	0x20000134
 80012dc:	200002f0 	.word	0x200002f0
 80012e0:	20000478 	.word	0x20000478

080012e4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80012e4:	b480      	push	{r7}
 80012e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80012e8:	bf00      	nop
 80012ea:	46bd      	mov	sp, r7
 80012ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f0:	4770      	bx	lr
	...

080012f4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80012f4:	b480      	push	{r7}
 80012f6:	b083      	sub	sp, #12
 80012f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012fa:	2300      	movs	r3, #0
 80012fc:	607b      	str	r3, [r7, #4]
 80012fe:	4b10      	ldr	r3, [pc, #64]	; (8001340 <HAL_MspInit+0x4c>)
 8001300:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001302:	4a0f      	ldr	r2, [pc, #60]	; (8001340 <HAL_MspInit+0x4c>)
 8001304:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001308:	6453      	str	r3, [r2, #68]	; 0x44
 800130a:	4b0d      	ldr	r3, [pc, #52]	; (8001340 <HAL_MspInit+0x4c>)
 800130c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800130e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001312:	607b      	str	r3, [r7, #4]
 8001314:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001316:	2300      	movs	r3, #0
 8001318:	603b      	str	r3, [r7, #0]
 800131a:	4b09      	ldr	r3, [pc, #36]	; (8001340 <HAL_MspInit+0x4c>)
 800131c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800131e:	4a08      	ldr	r2, [pc, #32]	; (8001340 <HAL_MspInit+0x4c>)
 8001320:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001324:	6413      	str	r3, [r2, #64]	; 0x40
 8001326:	4b06      	ldr	r3, [pc, #24]	; (8001340 <HAL_MspInit+0x4c>)
 8001328:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800132a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800132e:	603b      	str	r3, [r7, #0]
 8001330:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001332:	bf00      	nop
 8001334:	370c      	adds	r7, #12
 8001336:	46bd      	mov	sp, r7
 8001338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133c:	4770      	bx	lr
 800133e:	bf00      	nop
 8001340:	40023800 	.word	0x40023800

08001344 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	b084      	sub	sp, #16
 8001348:	af00      	add	r7, sp, #0
 800134a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	4a0e      	ldr	r2, [pc, #56]	; (800138c <HAL_TIM_Base_MspInit+0x48>)
 8001352:	4293      	cmp	r3, r2
 8001354:	d115      	bne.n	8001382 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001356:	2300      	movs	r3, #0
 8001358:	60fb      	str	r3, [r7, #12]
 800135a:	4b0d      	ldr	r3, [pc, #52]	; (8001390 <HAL_TIM_Base_MspInit+0x4c>)
 800135c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800135e:	4a0c      	ldr	r2, [pc, #48]	; (8001390 <HAL_TIM_Base_MspInit+0x4c>)
 8001360:	f043 0304 	orr.w	r3, r3, #4
 8001364:	6413      	str	r3, [r2, #64]	; 0x40
 8001366:	4b0a      	ldr	r3, [pc, #40]	; (8001390 <HAL_TIM_Base_MspInit+0x4c>)
 8001368:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800136a:	f003 0304 	and.w	r3, r3, #4
 800136e:	60fb      	str	r3, [r7, #12]
 8001370:	68fb      	ldr	r3, [r7, #12]
    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8001372:	2200      	movs	r2, #0
 8001374:	2100      	movs	r1, #0
 8001376:	201e      	movs	r0, #30
 8001378:	f000 fa57 	bl	800182a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 800137c:	201e      	movs	r0, #30
 800137e:	f000 fa70 	bl	8001862 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8001382:	bf00      	nop
 8001384:	3710      	adds	r7, #16
 8001386:	46bd      	mov	sp, r7
 8001388:	bd80      	pop	{r7, pc}
 800138a:	bf00      	nop
 800138c:	40000800 	.word	0x40000800
 8001390:	40023800 	.word	0x40023800

08001394 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	b08a      	sub	sp, #40	; 0x28
 8001398:	af00      	add	r7, sp, #0
 800139a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800139c:	f107 0314 	add.w	r3, r7, #20
 80013a0:	2200      	movs	r2, #0
 80013a2:	601a      	str	r2, [r3, #0]
 80013a4:	605a      	str	r2, [r3, #4]
 80013a6:	609a      	str	r2, [r3, #8]
 80013a8:	60da      	str	r2, [r3, #12]
 80013aa:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	4a1d      	ldr	r2, [pc, #116]	; (8001428 <HAL_UART_MspInit+0x94>)
 80013b2:	4293      	cmp	r3, r2
 80013b4:	d133      	bne.n	800141e <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80013b6:	2300      	movs	r3, #0
 80013b8:	613b      	str	r3, [r7, #16]
 80013ba:	4b1c      	ldr	r3, [pc, #112]	; (800142c <HAL_UART_MspInit+0x98>)
 80013bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013be:	4a1b      	ldr	r2, [pc, #108]	; (800142c <HAL_UART_MspInit+0x98>)
 80013c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80013c4:	6413      	str	r3, [r2, #64]	; 0x40
 80013c6:	4b19      	ldr	r3, [pc, #100]	; (800142c <HAL_UART_MspInit+0x98>)
 80013c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013ce:	613b      	str	r3, [r7, #16]
 80013d0:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013d2:	2300      	movs	r3, #0
 80013d4:	60fb      	str	r3, [r7, #12]
 80013d6:	4b15      	ldr	r3, [pc, #84]	; (800142c <HAL_UART_MspInit+0x98>)
 80013d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013da:	4a14      	ldr	r2, [pc, #80]	; (800142c <HAL_UART_MspInit+0x98>)
 80013dc:	f043 0301 	orr.w	r3, r3, #1
 80013e0:	6313      	str	r3, [r2, #48]	; 0x30
 80013e2:	4b12      	ldr	r3, [pc, #72]	; (800142c <HAL_UART_MspInit+0x98>)
 80013e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013e6:	f003 0301 	and.w	r3, r3, #1
 80013ea:	60fb      	str	r3, [r7, #12]
 80013ec:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80013ee:	230c      	movs	r3, #12
 80013f0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013f2:	2302      	movs	r3, #2
 80013f4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013f6:	2300      	movs	r3, #0
 80013f8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013fa:	2303      	movs	r3, #3
 80013fc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80013fe:	2307      	movs	r3, #7
 8001400:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001402:	f107 0314 	add.w	r3, r7, #20
 8001406:	4619      	mov	r1, r3
 8001408:	4809      	ldr	r0, [pc, #36]	; (8001430 <HAL_UART_MspInit+0x9c>)
 800140a:	f000 fa67 	bl	80018dc <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800140e:	2200      	movs	r2, #0
 8001410:	2100      	movs	r1, #0
 8001412:	2026      	movs	r0, #38	; 0x26
 8001414:	f000 fa09 	bl	800182a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001418:	2026      	movs	r0, #38	; 0x26
 800141a:	f000 fa22 	bl	8001862 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800141e:	bf00      	nop
 8001420:	3728      	adds	r7, #40	; 0x28
 8001422:	46bd      	mov	sp, r7
 8001424:	bd80      	pop	{r7, pc}
 8001426:	bf00      	nop
 8001428:	40004400 	.word	0x40004400
 800142c:	40023800 	.word	0x40023800
 8001430:	40020000 	.word	0x40020000

08001434 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001434:	b480      	push	{r7}
 8001436:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001438:	bf00      	nop
 800143a:	46bd      	mov	sp, r7
 800143c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001440:	4770      	bx	lr

08001442 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001442:	b480      	push	{r7}
 8001444:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001446:	e7fe      	b.n	8001446 <HardFault_Handler+0x4>

08001448 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001448:	b480      	push	{r7}
 800144a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800144c:	e7fe      	b.n	800144c <MemManage_Handler+0x4>

0800144e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800144e:	b480      	push	{r7}
 8001450:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001452:	e7fe      	b.n	8001452 <BusFault_Handler+0x4>

08001454 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001454:	b480      	push	{r7}
 8001456:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001458:	e7fe      	b.n	8001458 <UsageFault_Handler+0x4>

0800145a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800145a:	b480      	push	{r7}
 800145c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800145e:	bf00      	nop
 8001460:	46bd      	mov	sp, r7
 8001462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001466:	4770      	bx	lr

08001468 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001468:	b480      	push	{r7}
 800146a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800146c:	bf00      	nop
 800146e:	46bd      	mov	sp, r7
 8001470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001474:	4770      	bx	lr

08001476 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001476:	b480      	push	{r7}
 8001478:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800147a:	bf00      	nop
 800147c:	46bd      	mov	sp, r7
 800147e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001482:	4770      	bx	lr

08001484 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001488:	f000 f8d4 	bl	8001634 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800148c:	bf00      	nop
 800148e:	bd80      	pop	{r7, pc}

08001490 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001494:	4802      	ldr	r0, [pc, #8]	; (80014a0 <TIM4_IRQHandler+0x10>)
 8001496:	f001 f862 	bl	800255e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800149a:	bf00      	nop
 800149c:	bd80      	pop	{r7, pc}
 800149e:	bf00      	nop
 80014a0:	20000144 	.word	0x20000144

080014a4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80014a8:	4802      	ldr	r0, [pc, #8]	; (80014b4 <USART2_IRQHandler+0x10>)
 80014aa:	f001 fd17 	bl	8002edc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80014ae:	bf00      	nop
 80014b0:	bd80      	pop	{r7, pc}
 80014b2:	bf00      	nop
 80014b4:	20000478 	.word	0x20000478

080014b8 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	b084      	sub	sp, #16
 80014bc:	af00      	add	r7, sp, #0
 80014be:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80014c0:	4b11      	ldr	r3, [pc, #68]	; (8001508 <_sbrk+0x50>)
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d102      	bne.n	80014ce <_sbrk+0x16>
		heap_end = &end;
 80014c8:	4b0f      	ldr	r3, [pc, #60]	; (8001508 <_sbrk+0x50>)
 80014ca:	4a10      	ldr	r2, [pc, #64]	; (800150c <_sbrk+0x54>)
 80014cc:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80014ce:	4b0e      	ldr	r3, [pc, #56]	; (8001508 <_sbrk+0x50>)
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80014d4:	4b0c      	ldr	r3, [pc, #48]	; (8001508 <_sbrk+0x50>)
 80014d6:	681a      	ldr	r2, [r3, #0]
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	4413      	add	r3, r2
 80014dc:	466a      	mov	r2, sp
 80014de:	4293      	cmp	r3, r2
 80014e0:	d907      	bls.n	80014f2 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 80014e2:	f002 faf7 	bl	8003ad4 <__errno>
 80014e6:	4602      	mov	r2, r0
 80014e8:	230c      	movs	r3, #12
 80014ea:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 80014ec:	f04f 33ff 	mov.w	r3, #4294967295
 80014f0:	e006      	b.n	8001500 <_sbrk+0x48>
	}

	heap_end += incr;
 80014f2:	4b05      	ldr	r3, [pc, #20]	; (8001508 <_sbrk+0x50>)
 80014f4:	681a      	ldr	r2, [r3, #0]
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	4413      	add	r3, r2
 80014fa:	4a03      	ldr	r2, [pc, #12]	; (8001508 <_sbrk+0x50>)
 80014fc:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 80014fe:	68fb      	ldr	r3, [r7, #12]
}
 8001500:	4618      	mov	r0, r3
 8001502:	3710      	adds	r7, #16
 8001504:	46bd      	mov	sp, r7
 8001506:	bd80      	pop	{r7, pc}
 8001508:	20000138 	.word	0x20000138
 800150c:	20000530 	.word	0x20000530

08001510 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001510:	b480      	push	{r7}
 8001512:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001514:	4b08      	ldr	r3, [pc, #32]	; (8001538 <SystemInit+0x28>)
 8001516:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800151a:	4a07      	ldr	r2, [pc, #28]	; (8001538 <SystemInit+0x28>)
 800151c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001520:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001524:	4b04      	ldr	r3, [pc, #16]	; (8001538 <SystemInit+0x28>)
 8001526:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800152a:	609a      	str	r2, [r3, #8]
#endif
}
 800152c:	bf00      	nop
 800152e:	46bd      	mov	sp, r7
 8001530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001534:	4770      	bx	lr
 8001536:	bf00      	nop
 8001538:	e000ed00 	.word	0xe000ed00

0800153c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800153c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001574 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001540:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001542:	e003      	b.n	800154c <LoopCopyDataInit>

08001544 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001544:	4b0c      	ldr	r3, [pc, #48]	; (8001578 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001546:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001548:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800154a:	3104      	adds	r1, #4

0800154c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800154c:	480b      	ldr	r0, [pc, #44]	; (800157c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800154e:	4b0c      	ldr	r3, [pc, #48]	; (8001580 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001550:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001552:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001554:	d3f6      	bcc.n	8001544 <CopyDataInit>
  ldr  r2, =_sbss
 8001556:	4a0b      	ldr	r2, [pc, #44]	; (8001584 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001558:	e002      	b.n	8001560 <LoopFillZerobss>

0800155a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800155a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800155c:	f842 3b04 	str.w	r3, [r2], #4

08001560 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001560:	4b09      	ldr	r3, [pc, #36]	; (8001588 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001562:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001564:	d3f9      	bcc.n	800155a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001566:	f7ff ffd3 	bl	8001510 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800156a:	f002 fab9 	bl	8003ae0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800156e:	f7ff fc6b 	bl	8000e48 <main>
  bx  lr    
 8001572:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001574:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8001578:	08003d90 	.word	0x08003d90
  ldr  r0, =_sdata
 800157c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001580:	20000114 	.word	0x20000114
  ldr  r2, =_sbss
 8001584:	20000114 	.word	0x20000114
  ldr  r3, = _ebss
 8001588:	20000530 	.word	0x20000530

0800158c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800158c:	e7fe      	b.n	800158c <ADC_IRQHandler>
	...

08001590 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001590:	b580      	push	{r7, lr}
 8001592:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001594:	4b0e      	ldr	r3, [pc, #56]	; (80015d0 <HAL_Init+0x40>)
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	4a0d      	ldr	r2, [pc, #52]	; (80015d0 <HAL_Init+0x40>)
 800159a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800159e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80015a0:	4b0b      	ldr	r3, [pc, #44]	; (80015d0 <HAL_Init+0x40>)
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	4a0a      	ldr	r2, [pc, #40]	; (80015d0 <HAL_Init+0x40>)
 80015a6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80015aa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80015ac:	4b08      	ldr	r3, [pc, #32]	; (80015d0 <HAL_Init+0x40>)
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	4a07      	ldr	r2, [pc, #28]	; (80015d0 <HAL_Init+0x40>)
 80015b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80015b6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80015b8:	2003      	movs	r0, #3
 80015ba:	f000 f92b 	bl	8001814 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80015be:	2000      	movs	r0, #0
 80015c0:	f000 f808 	bl	80015d4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80015c4:	f7ff fe96 	bl	80012f4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80015c8:	2300      	movs	r3, #0
}
 80015ca:	4618      	mov	r0, r3
 80015cc:	bd80      	pop	{r7, pc}
 80015ce:	bf00      	nop
 80015d0:	40023c00 	.word	0x40023c00

080015d4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	b082      	sub	sp, #8
 80015d8:	af00      	add	r7, sp, #0
 80015da:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80015dc:	4b12      	ldr	r3, [pc, #72]	; (8001628 <HAL_InitTick+0x54>)
 80015de:	681a      	ldr	r2, [r3, #0]
 80015e0:	4b12      	ldr	r3, [pc, #72]	; (800162c <HAL_InitTick+0x58>)
 80015e2:	781b      	ldrb	r3, [r3, #0]
 80015e4:	4619      	mov	r1, r3
 80015e6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80015ea:	fbb3 f3f1 	udiv	r3, r3, r1
 80015ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80015f2:	4618      	mov	r0, r3
 80015f4:	f000 f943 	bl	800187e <HAL_SYSTICK_Config>
 80015f8:	4603      	mov	r3, r0
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d001      	beq.n	8001602 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80015fe:	2301      	movs	r3, #1
 8001600:	e00e      	b.n	8001620 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	2b0f      	cmp	r3, #15
 8001606:	d80a      	bhi.n	800161e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001608:	2200      	movs	r2, #0
 800160a:	6879      	ldr	r1, [r7, #4]
 800160c:	f04f 30ff 	mov.w	r0, #4294967295
 8001610:	f000 f90b 	bl	800182a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001614:	4a06      	ldr	r2, [pc, #24]	; (8001630 <HAL_InitTick+0x5c>)
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800161a:	2300      	movs	r3, #0
 800161c:	e000      	b.n	8001620 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800161e:	2301      	movs	r3, #1
}
 8001620:	4618      	mov	r0, r3
 8001622:	3708      	adds	r7, #8
 8001624:	46bd      	mov	sp, r7
 8001626:	bd80      	pop	{r7, pc}
 8001628:	200000a4 	.word	0x200000a4
 800162c:	200000ac 	.word	0x200000ac
 8001630:	200000a8 	.word	0x200000a8

08001634 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001634:	b480      	push	{r7}
 8001636:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001638:	4b06      	ldr	r3, [pc, #24]	; (8001654 <HAL_IncTick+0x20>)
 800163a:	781b      	ldrb	r3, [r3, #0]
 800163c:	461a      	mov	r2, r3
 800163e:	4b06      	ldr	r3, [pc, #24]	; (8001658 <HAL_IncTick+0x24>)
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	4413      	add	r3, r2
 8001644:	4a04      	ldr	r2, [pc, #16]	; (8001658 <HAL_IncTick+0x24>)
 8001646:	6013      	str	r3, [r2, #0]
}
 8001648:	bf00      	nop
 800164a:	46bd      	mov	sp, r7
 800164c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001650:	4770      	bx	lr
 8001652:	bf00      	nop
 8001654:	200000ac 	.word	0x200000ac
 8001658:	20000528 	.word	0x20000528

0800165c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800165c:	b480      	push	{r7}
 800165e:	af00      	add	r7, sp, #0
  return uwTick;
 8001660:	4b03      	ldr	r3, [pc, #12]	; (8001670 <HAL_GetTick+0x14>)
 8001662:	681b      	ldr	r3, [r3, #0]
}
 8001664:	4618      	mov	r0, r3
 8001666:	46bd      	mov	sp, r7
 8001668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800166c:	4770      	bx	lr
 800166e:	bf00      	nop
 8001670:	20000528 	.word	0x20000528

08001674 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001674:	b480      	push	{r7}
 8001676:	b085      	sub	sp, #20
 8001678:	af00      	add	r7, sp, #0
 800167a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	f003 0307 	and.w	r3, r3, #7
 8001682:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001684:	4b0c      	ldr	r3, [pc, #48]	; (80016b8 <__NVIC_SetPriorityGrouping+0x44>)
 8001686:	68db      	ldr	r3, [r3, #12]
 8001688:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800168a:	68ba      	ldr	r2, [r7, #8]
 800168c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001690:	4013      	ands	r3, r2
 8001692:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001698:	68bb      	ldr	r3, [r7, #8]
 800169a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800169c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80016a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80016a4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80016a6:	4a04      	ldr	r2, [pc, #16]	; (80016b8 <__NVIC_SetPriorityGrouping+0x44>)
 80016a8:	68bb      	ldr	r3, [r7, #8]
 80016aa:	60d3      	str	r3, [r2, #12]
}
 80016ac:	bf00      	nop
 80016ae:	3714      	adds	r7, #20
 80016b0:	46bd      	mov	sp, r7
 80016b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b6:	4770      	bx	lr
 80016b8:	e000ed00 	.word	0xe000ed00

080016bc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80016bc:	b480      	push	{r7}
 80016be:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80016c0:	4b04      	ldr	r3, [pc, #16]	; (80016d4 <__NVIC_GetPriorityGrouping+0x18>)
 80016c2:	68db      	ldr	r3, [r3, #12]
 80016c4:	0a1b      	lsrs	r3, r3, #8
 80016c6:	f003 0307 	and.w	r3, r3, #7
}
 80016ca:	4618      	mov	r0, r3
 80016cc:	46bd      	mov	sp, r7
 80016ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d2:	4770      	bx	lr
 80016d4:	e000ed00 	.word	0xe000ed00

080016d8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016d8:	b480      	push	{r7}
 80016da:	b083      	sub	sp, #12
 80016dc:	af00      	add	r7, sp, #0
 80016de:	4603      	mov	r3, r0
 80016e0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	db0b      	blt.n	8001702 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80016ea:	79fb      	ldrb	r3, [r7, #7]
 80016ec:	f003 021f 	and.w	r2, r3, #31
 80016f0:	4907      	ldr	r1, [pc, #28]	; (8001710 <__NVIC_EnableIRQ+0x38>)
 80016f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016f6:	095b      	lsrs	r3, r3, #5
 80016f8:	2001      	movs	r0, #1
 80016fa:	fa00 f202 	lsl.w	r2, r0, r2
 80016fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001702:	bf00      	nop
 8001704:	370c      	adds	r7, #12
 8001706:	46bd      	mov	sp, r7
 8001708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170c:	4770      	bx	lr
 800170e:	bf00      	nop
 8001710:	e000e100 	.word	0xe000e100

08001714 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001714:	b480      	push	{r7}
 8001716:	b083      	sub	sp, #12
 8001718:	af00      	add	r7, sp, #0
 800171a:	4603      	mov	r3, r0
 800171c:	6039      	str	r1, [r7, #0]
 800171e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001720:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001724:	2b00      	cmp	r3, #0
 8001726:	db0a      	blt.n	800173e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001728:	683b      	ldr	r3, [r7, #0]
 800172a:	b2da      	uxtb	r2, r3
 800172c:	490c      	ldr	r1, [pc, #48]	; (8001760 <__NVIC_SetPriority+0x4c>)
 800172e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001732:	0112      	lsls	r2, r2, #4
 8001734:	b2d2      	uxtb	r2, r2
 8001736:	440b      	add	r3, r1
 8001738:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800173c:	e00a      	b.n	8001754 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800173e:	683b      	ldr	r3, [r7, #0]
 8001740:	b2da      	uxtb	r2, r3
 8001742:	4908      	ldr	r1, [pc, #32]	; (8001764 <__NVIC_SetPriority+0x50>)
 8001744:	79fb      	ldrb	r3, [r7, #7]
 8001746:	f003 030f 	and.w	r3, r3, #15
 800174a:	3b04      	subs	r3, #4
 800174c:	0112      	lsls	r2, r2, #4
 800174e:	b2d2      	uxtb	r2, r2
 8001750:	440b      	add	r3, r1
 8001752:	761a      	strb	r2, [r3, #24]
}
 8001754:	bf00      	nop
 8001756:	370c      	adds	r7, #12
 8001758:	46bd      	mov	sp, r7
 800175a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175e:	4770      	bx	lr
 8001760:	e000e100 	.word	0xe000e100
 8001764:	e000ed00 	.word	0xe000ed00

08001768 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001768:	b480      	push	{r7}
 800176a:	b089      	sub	sp, #36	; 0x24
 800176c:	af00      	add	r7, sp, #0
 800176e:	60f8      	str	r0, [r7, #12]
 8001770:	60b9      	str	r1, [r7, #8]
 8001772:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	f003 0307 	and.w	r3, r3, #7
 800177a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800177c:	69fb      	ldr	r3, [r7, #28]
 800177e:	f1c3 0307 	rsb	r3, r3, #7
 8001782:	2b04      	cmp	r3, #4
 8001784:	bf28      	it	cs
 8001786:	2304      	movcs	r3, #4
 8001788:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800178a:	69fb      	ldr	r3, [r7, #28]
 800178c:	3304      	adds	r3, #4
 800178e:	2b06      	cmp	r3, #6
 8001790:	d902      	bls.n	8001798 <NVIC_EncodePriority+0x30>
 8001792:	69fb      	ldr	r3, [r7, #28]
 8001794:	3b03      	subs	r3, #3
 8001796:	e000      	b.n	800179a <NVIC_EncodePriority+0x32>
 8001798:	2300      	movs	r3, #0
 800179a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800179c:	f04f 32ff 	mov.w	r2, #4294967295
 80017a0:	69bb      	ldr	r3, [r7, #24]
 80017a2:	fa02 f303 	lsl.w	r3, r2, r3
 80017a6:	43da      	mvns	r2, r3
 80017a8:	68bb      	ldr	r3, [r7, #8]
 80017aa:	401a      	ands	r2, r3
 80017ac:	697b      	ldr	r3, [r7, #20]
 80017ae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80017b0:	f04f 31ff 	mov.w	r1, #4294967295
 80017b4:	697b      	ldr	r3, [r7, #20]
 80017b6:	fa01 f303 	lsl.w	r3, r1, r3
 80017ba:	43d9      	mvns	r1, r3
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017c0:	4313      	orrs	r3, r2
         );
}
 80017c2:	4618      	mov	r0, r3
 80017c4:	3724      	adds	r7, #36	; 0x24
 80017c6:	46bd      	mov	sp, r7
 80017c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017cc:	4770      	bx	lr
	...

080017d0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	b082      	sub	sp, #8
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	3b01      	subs	r3, #1
 80017dc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80017e0:	d301      	bcc.n	80017e6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80017e2:	2301      	movs	r3, #1
 80017e4:	e00f      	b.n	8001806 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80017e6:	4a0a      	ldr	r2, [pc, #40]	; (8001810 <SysTick_Config+0x40>)
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	3b01      	subs	r3, #1
 80017ec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80017ee:	210f      	movs	r1, #15
 80017f0:	f04f 30ff 	mov.w	r0, #4294967295
 80017f4:	f7ff ff8e 	bl	8001714 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80017f8:	4b05      	ldr	r3, [pc, #20]	; (8001810 <SysTick_Config+0x40>)
 80017fa:	2200      	movs	r2, #0
 80017fc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80017fe:	4b04      	ldr	r3, [pc, #16]	; (8001810 <SysTick_Config+0x40>)
 8001800:	2207      	movs	r2, #7
 8001802:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001804:	2300      	movs	r3, #0
}
 8001806:	4618      	mov	r0, r3
 8001808:	3708      	adds	r7, #8
 800180a:	46bd      	mov	sp, r7
 800180c:	bd80      	pop	{r7, pc}
 800180e:	bf00      	nop
 8001810:	e000e010 	.word	0xe000e010

08001814 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001814:	b580      	push	{r7, lr}
 8001816:	b082      	sub	sp, #8
 8001818:	af00      	add	r7, sp, #0
 800181a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800181c:	6878      	ldr	r0, [r7, #4]
 800181e:	f7ff ff29 	bl	8001674 <__NVIC_SetPriorityGrouping>
}
 8001822:	bf00      	nop
 8001824:	3708      	adds	r7, #8
 8001826:	46bd      	mov	sp, r7
 8001828:	bd80      	pop	{r7, pc}

0800182a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800182a:	b580      	push	{r7, lr}
 800182c:	b086      	sub	sp, #24
 800182e:	af00      	add	r7, sp, #0
 8001830:	4603      	mov	r3, r0
 8001832:	60b9      	str	r1, [r7, #8]
 8001834:	607a      	str	r2, [r7, #4]
 8001836:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001838:	2300      	movs	r3, #0
 800183a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800183c:	f7ff ff3e 	bl	80016bc <__NVIC_GetPriorityGrouping>
 8001840:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001842:	687a      	ldr	r2, [r7, #4]
 8001844:	68b9      	ldr	r1, [r7, #8]
 8001846:	6978      	ldr	r0, [r7, #20]
 8001848:	f7ff ff8e 	bl	8001768 <NVIC_EncodePriority>
 800184c:	4602      	mov	r2, r0
 800184e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001852:	4611      	mov	r1, r2
 8001854:	4618      	mov	r0, r3
 8001856:	f7ff ff5d 	bl	8001714 <__NVIC_SetPriority>
}
 800185a:	bf00      	nop
 800185c:	3718      	adds	r7, #24
 800185e:	46bd      	mov	sp, r7
 8001860:	bd80      	pop	{r7, pc}

08001862 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001862:	b580      	push	{r7, lr}
 8001864:	b082      	sub	sp, #8
 8001866:	af00      	add	r7, sp, #0
 8001868:	4603      	mov	r3, r0
 800186a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800186c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001870:	4618      	mov	r0, r3
 8001872:	f7ff ff31 	bl	80016d8 <__NVIC_EnableIRQ>
}
 8001876:	bf00      	nop
 8001878:	3708      	adds	r7, #8
 800187a:	46bd      	mov	sp, r7
 800187c:	bd80      	pop	{r7, pc}

0800187e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800187e:	b580      	push	{r7, lr}
 8001880:	b082      	sub	sp, #8
 8001882:	af00      	add	r7, sp, #0
 8001884:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001886:	6878      	ldr	r0, [r7, #4]
 8001888:	f7ff ffa2 	bl	80017d0 <SysTick_Config>
 800188c:	4603      	mov	r3, r0
}
 800188e:	4618      	mov	r0, r3
 8001890:	3708      	adds	r7, #8
 8001892:	46bd      	mov	sp, r7
 8001894:	bd80      	pop	{r7, pc}

08001896 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001896:	b480      	push	{r7}
 8001898:	b083      	sub	sp, #12
 800189a:	af00      	add	r7, sp, #0
 800189c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80018a4:	b2db      	uxtb	r3, r3
 80018a6:	2b02      	cmp	r3, #2
 80018a8:	d004      	beq.n	80018b4 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	2280      	movs	r2, #128	; 0x80
 80018ae:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80018b0:	2301      	movs	r3, #1
 80018b2:	e00c      	b.n	80018ce <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	2205      	movs	r2, #5
 80018b8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	681a      	ldr	r2, [r3, #0]
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	f022 0201 	bic.w	r2, r2, #1
 80018ca:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80018cc:	2300      	movs	r3, #0
}
 80018ce:	4618      	mov	r0, r3
 80018d0:	370c      	adds	r7, #12
 80018d2:	46bd      	mov	sp, r7
 80018d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d8:	4770      	bx	lr
	...

080018dc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80018dc:	b480      	push	{r7}
 80018de:	b089      	sub	sp, #36	; 0x24
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	6078      	str	r0, [r7, #4]
 80018e4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80018e6:	2300      	movs	r3, #0
 80018e8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80018ea:	2300      	movs	r3, #0
 80018ec:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80018ee:	2300      	movs	r3, #0
 80018f0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80018f2:	2300      	movs	r3, #0
 80018f4:	61fb      	str	r3, [r7, #28]
 80018f6:	e159      	b.n	8001bac <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80018f8:	2201      	movs	r2, #1
 80018fa:	69fb      	ldr	r3, [r7, #28]
 80018fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001900:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001902:	683b      	ldr	r3, [r7, #0]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	697a      	ldr	r2, [r7, #20]
 8001908:	4013      	ands	r3, r2
 800190a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800190c:	693a      	ldr	r2, [r7, #16]
 800190e:	697b      	ldr	r3, [r7, #20]
 8001910:	429a      	cmp	r2, r3
 8001912:	f040 8148 	bne.w	8001ba6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001916:	683b      	ldr	r3, [r7, #0]
 8001918:	685b      	ldr	r3, [r3, #4]
 800191a:	2b01      	cmp	r3, #1
 800191c:	d00b      	beq.n	8001936 <HAL_GPIO_Init+0x5a>
 800191e:	683b      	ldr	r3, [r7, #0]
 8001920:	685b      	ldr	r3, [r3, #4]
 8001922:	2b02      	cmp	r3, #2
 8001924:	d007      	beq.n	8001936 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001926:	683b      	ldr	r3, [r7, #0]
 8001928:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800192a:	2b11      	cmp	r3, #17
 800192c:	d003      	beq.n	8001936 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800192e:	683b      	ldr	r3, [r7, #0]
 8001930:	685b      	ldr	r3, [r3, #4]
 8001932:	2b12      	cmp	r3, #18
 8001934:	d130      	bne.n	8001998 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	689b      	ldr	r3, [r3, #8]
 800193a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800193c:	69fb      	ldr	r3, [r7, #28]
 800193e:	005b      	lsls	r3, r3, #1
 8001940:	2203      	movs	r2, #3
 8001942:	fa02 f303 	lsl.w	r3, r2, r3
 8001946:	43db      	mvns	r3, r3
 8001948:	69ba      	ldr	r2, [r7, #24]
 800194a:	4013      	ands	r3, r2
 800194c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800194e:	683b      	ldr	r3, [r7, #0]
 8001950:	68da      	ldr	r2, [r3, #12]
 8001952:	69fb      	ldr	r3, [r7, #28]
 8001954:	005b      	lsls	r3, r3, #1
 8001956:	fa02 f303 	lsl.w	r3, r2, r3
 800195a:	69ba      	ldr	r2, [r7, #24]
 800195c:	4313      	orrs	r3, r2
 800195e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	69ba      	ldr	r2, [r7, #24]
 8001964:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	685b      	ldr	r3, [r3, #4]
 800196a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800196c:	2201      	movs	r2, #1
 800196e:	69fb      	ldr	r3, [r7, #28]
 8001970:	fa02 f303 	lsl.w	r3, r2, r3
 8001974:	43db      	mvns	r3, r3
 8001976:	69ba      	ldr	r2, [r7, #24]
 8001978:	4013      	ands	r3, r2
 800197a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800197c:	683b      	ldr	r3, [r7, #0]
 800197e:	685b      	ldr	r3, [r3, #4]
 8001980:	091b      	lsrs	r3, r3, #4
 8001982:	f003 0201 	and.w	r2, r3, #1
 8001986:	69fb      	ldr	r3, [r7, #28]
 8001988:	fa02 f303 	lsl.w	r3, r2, r3
 800198c:	69ba      	ldr	r2, [r7, #24]
 800198e:	4313      	orrs	r3, r2
 8001990:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	69ba      	ldr	r2, [r7, #24]
 8001996:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	68db      	ldr	r3, [r3, #12]
 800199c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800199e:	69fb      	ldr	r3, [r7, #28]
 80019a0:	005b      	lsls	r3, r3, #1
 80019a2:	2203      	movs	r2, #3
 80019a4:	fa02 f303 	lsl.w	r3, r2, r3
 80019a8:	43db      	mvns	r3, r3
 80019aa:	69ba      	ldr	r2, [r7, #24]
 80019ac:	4013      	ands	r3, r2
 80019ae:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80019b0:	683b      	ldr	r3, [r7, #0]
 80019b2:	689a      	ldr	r2, [r3, #8]
 80019b4:	69fb      	ldr	r3, [r7, #28]
 80019b6:	005b      	lsls	r3, r3, #1
 80019b8:	fa02 f303 	lsl.w	r3, r2, r3
 80019bc:	69ba      	ldr	r2, [r7, #24]
 80019be:	4313      	orrs	r3, r2
 80019c0:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	69ba      	ldr	r2, [r7, #24]
 80019c6:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80019c8:	683b      	ldr	r3, [r7, #0]
 80019ca:	685b      	ldr	r3, [r3, #4]
 80019cc:	2b02      	cmp	r3, #2
 80019ce:	d003      	beq.n	80019d8 <HAL_GPIO_Init+0xfc>
 80019d0:	683b      	ldr	r3, [r7, #0]
 80019d2:	685b      	ldr	r3, [r3, #4]
 80019d4:	2b12      	cmp	r3, #18
 80019d6:	d123      	bne.n	8001a20 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80019d8:	69fb      	ldr	r3, [r7, #28]
 80019da:	08da      	lsrs	r2, r3, #3
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	3208      	adds	r2, #8
 80019e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80019e4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80019e6:	69fb      	ldr	r3, [r7, #28]
 80019e8:	f003 0307 	and.w	r3, r3, #7
 80019ec:	009b      	lsls	r3, r3, #2
 80019ee:	220f      	movs	r2, #15
 80019f0:	fa02 f303 	lsl.w	r3, r2, r3
 80019f4:	43db      	mvns	r3, r3
 80019f6:	69ba      	ldr	r2, [r7, #24]
 80019f8:	4013      	ands	r3, r2
 80019fa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80019fc:	683b      	ldr	r3, [r7, #0]
 80019fe:	691a      	ldr	r2, [r3, #16]
 8001a00:	69fb      	ldr	r3, [r7, #28]
 8001a02:	f003 0307 	and.w	r3, r3, #7
 8001a06:	009b      	lsls	r3, r3, #2
 8001a08:	fa02 f303 	lsl.w	r3, r2, r3
 8001a0c:	69ba      	ldr	r2, [r7, #24]
 8001a0e:	4313      	orrs	r3, r2
 8001a10:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001a12:	69fb      	ldr	r3, [r7, #28]
 8001a14:	08da      	lsrs	r2, r3, #3
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	3208      	adds	r2, #8
 8001a1a:	69b9      	ldr	r1, [r7, #24]
 8001a1c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001a26:	69fb      	ldr	r3, [r7, #28]
 8001a28:	005b      	lsls	r3, r3, #1
 8001a2a:	2203      	movs	r2, #3
 8001a2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a30:	43db      	mvns	r3, r3
 8001a32:	69ba      	ldr	r2, [r7, #24]
 8001a34:	4013      	ands	r3, r2
 8001a36:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001a38:	683b      	ldr	r3, [r7, #0]
 8001a3a:	685b      	ldr	r3, [r3, #4]
 8001a3c:	f003 0203 	and.w	r2, r3, #3
 8001a40:	69fb      	ldr	r3, [r7, #28]
 8001a42:	005b      	lsls	r3, r3, #1
 8001a44:	fa02 f303 	lsl.w	r3, r2, r3
 8001a48:	69ba      	ldr	r2, [r7, #24]
 8001a4a:	4313      	orrs	r3, r2
 8001a4c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	69ba      	ldr	r2, [r7, #24]
 8001a52:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001a54:	683b      	ldr	r3, [r7, #0]
 8001a56:	685b      	ldr	r3, [r3, #4]
 8001a58:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	f000 80a2 	beq.w	8001ba6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a62:	2300      	movs	r3, #0
 8001a64:	60fb      	str	r3, [r7, #12]
 8001a66:	4b56      	ldr	r3, [pc, #344]	; (8001bc0 <HAL_GPIO_Init+0x2e4>)
 8001a68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a6a:	4a55      	ldr	r2, [pc, #340]	; (8001bc0 <HAL_GPIO_Init+0x2e4>)
 8001a6c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a70:	6453      	str	r3, [r2, #68]	; 0x44
 8001a72:	4b53      	ldr	r3, [pc, #332]	; (8001bc0 <HAL_GPIO_Init+0x2e4>)
 8001a74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a76:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a7a:	60fb      	str	r3, [r7, #12]
 8001a7c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001a7e:	4a51      	ldr	r2, [pc, #324]	; (8001bc4 <HAL_GPIO_Init+0x2e8>)
 8001a80:	69fb      	ldr	r3, [r7, #28]
 8001a82:	089b      	lsrs	r3, r3, #2
 8001a84:	3302      	adds	r3, #2
 8001a86:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a8a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001a8c:	69fb      	ldr	r3, [r7, #28]
 8001a8e:	f003 0303 	and.w	r3, r3, #3
 8001a92:	009b      	lsls	r3, r3, #2
 8001a94:	220f      	movs	r2, #15
 8001a96:	fa02 f303 	lsl.w	r3, r2, r3
 8001a9a:	43db      	mvns	r3, r3
 8001a9c:	69ba      	ldr	r2, [r7, #24]
 8001a9e:	4013      	ands	r3, r2
 8001aa0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	4a48      	ldr	r2, [pc, #288]	; (8001bc8 <HAL_GPIO_Init+0x2ec>)
 8001aa6:	4293      	cmp	r3, r2
 8001aa8:	d019      	beq.n	8001ade <HAL_GPIO_Init+0x202>
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	4a47      	ldr	r2, [pc, #284]	; (8001bcc <HAL_GPIO_Init+0x2f0>)
 8001aae:	4293      	cmp	r3, r2
 8001ab0:	d013      	beq.n	8001ada <HAL_GPIO_Init+0x1fe>
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	4a46      	ldr	r2, [pc, #280]	; (8001bd0 <HAL_GPIO_Init+0x2f4>)
 8001ab6:	4293      	cmp	r3, r2
 8001ab8:	d00d      	beq.n	8001ad6 <HAL_GPIO_Init+0x1fa>
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	4a45      	ldr	r2, [pc, #276]	; (8001bd4 <HAL_GPIO_Init+0x2f8>)
 8001abe:	4293      	cmp	r3, r2
 8001ac0:	d007      	beq.n	8001ad2 <HAL_GPIO_Init+0x1f6>
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	4a44      	ldr	r2, [pc, #272]	; (8001bd8 <HAL_GPIO_Init+0x2fc>)
 8001ac6:	4293      	cmp	r3, r2
 8001ac8:	d101      	bne.n	8001ace <HAL_GPIO_Init+0x1f2>
 8001aca:	2304      	movs	r3, #4
 8001acc:	e008      	b.n	8001ae0 <HAL_GPIO_Init+0x204>
 8001ace:	2307      	movs	r3, #7
 8001ad0:	e006      	b.n	8001ae0 <HAL_GPIO_Init+0x204>
 8001ad2:	2303      	movs	r3, #3
 8001ad4:	e004      	b.n	8001ae0 <HAL_GPIO_Init+0x204>
 8001ad6:	2302      	movs	r3, #2
 8001ad8:	e002      	b.n	8001ae0 <HAL_GPIO_Init+0x204>
 8001ada:	2301      	movs	r3, #1
 8001adc:	e000      	b.n	8001ae0 <HAL_GPIO_Init+0x204>
 8001ade:	2300      	movs	r3, #0
 8001ae0:	69fa      	ldr	r2, [r7, #28]
 8001ae2:	f002 0203 	and.w	r2, r2, #3
 8001ae6:	0092      	lsls	r2, r2, #2
 8001ae8:	4093      	lsls	r3, r2
 8001aea:	69ba      	ldr	r2, [r7, #24]
 8001aec:	4313      	orrs	r3, r2
 8001aee:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001af0:	4934      	ldr	r1, [pc, #208]	; (8001bc4 <HAL_GPIO_Init+0x2e8>)
 8001af2:	69fb      	ldr	r3, [r7, #28]
 8001af4:	089b      	lsrs	r3, r3, #2
 8001af6:	3302      	adds	r3, #2
 8001af8:	69ba      	ldr	r2, [r7, #24]
 8001afa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001afe:	4b37      	ldr	r3, [pc, #220]	; (8001bdc <HAL_GPIO_Init+0x300>)
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b04:	693b      	ldr	r3, [r7, #16]
 8001b06:	43db      	mvns	r3, r3
 8001b08:	69ba      	ldr	r2, [r7, #24]
 8001b0a:	4013      	ands	r3, r2
 8001b0c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001b0e:	683b      	ldr	r3, [r7, #0]
 8001b10:	685b      	ldr	r3, [r3, #4]
 8001b12:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d003      	beq.n	8001b22 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001b1a:	69ba      	ldr	r2, [r7, #24]
 8001b1c:	693b      	ldr	r3, [r7, #16]
 8001b1e:	4313      	orrs	r3, r2
 8001b20:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001b22:	4a2e      	ldr	r2, [pc, #184]	; (8001bdc <HAL_GPIO_Init+0x300>)
 8001b24:	69bb      	ldr	r3, [r7, #24]
 8001b26:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001b28:	4b2c      	ldr	r3, [pc, #176]	; (8001bdc <HAL_GPIO_Init+0x300>)
 8001b2a:	685b      	ldr	r3, [r3, #4]
 8001b2c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b2e:	693b      	ldr	r3, [r7, #16]
 8001b30:	43db      	mvns	r3, r3
 8001b32:	69ba      	ldr	r2, [r7, #24]
 8001b34:	4013      	ands	r3, r2
 8001b36:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001b38:	683b      	ldr	r3, [r7, #0]
 8001b3a:	685b      	ldr	r3, [r3, #4]
 8001b3c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d003      	beq.n	8001b4c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001b44:	69ba      	ldr	r2, [r7, #24]
 8001b46:	693b      	ldr	r3, [r7, #16]
 8001b48:	4313      	orrs	r3, r2
 8001b4a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001b4c:	4a23      	ldr	r2, [pc, #140]	; (8001bdc <HAL_GPIO_Init+0x300>)
 8001b4e:	69bb      	ldr	r3, [r7, #24]
 8001b50:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001b52:	4b22      	ldr	r3, [pc, #136]	; (8001bdc <HAL_GPIO_Init+0x300>)
 8001b54:	689b      	ldr	r3, [r3, #8]
 8001b56:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b58:	693b      	ldr	r3, [r7, #16]
 8001b5a:	43db      	mvns	r3, r3
 8001b5c:	69ba      	ldr	r2, [r7, #24]
 8001b5e:	4013      	ands	r3, r2
 8001b60:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001b62:	683b      	ldr	r3, [r7, #0]
 8001b64:	685b      	ldr	r3, [r3, #4]
 8001b66:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d003      	beq.n	8001b76 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001b6e:	69ba      	ldr	r2, [r7, #24]
 8001b70:	693b      	ldr	r3, [r7, #16]
 8001b72:	4313      	orrs	r3, r2
 8001b74:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001b76:	4a19      	ldr	r2, [pc, #100]	; (8001bdc <HAL_GPIO_Init+0x300>)
 8001b78:	69bb      	ldr	r3, [r7, #24]
 8001b7a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001b7c:	4b17      	ldr	r3, [pc, #92]	; (8001bdc <HAL_GPIO_Init+0x300>)
 8001b7e:	68db      	ldr	r3, [r3, #12]
 8001b80:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b82:	693b      	ldr	r3, [r7, #16]
 8001b84:	43db      	mvns	r3, r3
 8001b86:	69ba      	ldr	r2, [r7, #24]
 8001b88:	4013      	ands	r3, r2
 8001b8a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001b8c:	683b      	ldr	r3, [r7, #0]
 8001b8e:	685b      	ldr	r3, [r3, #4]
 8001b90:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d003      	beq.n	8001ba0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001b98:	69ba      	ldr	r2, [r7, #24]
 8001b9a:	693b      	ldr	r3, [r7, #16]
 8001b9c:	4313      	orrs	r3, r2
 8001b9e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001ba0:	4a0e      	ldr	r2, [pc, #56]	; (8001bdc <HAL_GPIO_Init+0x300>)
 8001ba2:	69bb      	ldr	r3, [r7, #24]
 8001ba4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001ba6:	69fb      	ldr	r3, [r7, #28]
 8001ba8:	3301      	adds	r3, #1
 8001baa:	61fb      	str	r3, [r7, #28]
 8001bac:	69fb      	ldr	r3, [r7, #28]
 8001bae:	2b0f      	cmp	r3, #15
 8001bb0:	f67f aea2 	bls.w	80018f8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001bb4:	bf00      	nop
 8001bb6:	3724      	adds	r7, #36	; 0x24
 8001bb8:	46bd      	mov	sp, r7
 8001bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bbe:	4770      	bx	lr
 8001bc0:	40023800 	.word	0x40023800
 8001bc4:	40013800 	.word	0x40013800
 8001bc8:	40020000 	.word	0x40020000
 8001bcc:	40020400 	.word	0x40020400
 8001bd0:	40020800 	.word	0x40020800
 8001bd4:	40020c00 	.word	0x40020c00
 8001bd8:	40021000 	.word	0x40021000
 8001bdc:	40013c00 	.word	0x40013c00

08001be0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001be0:	b480      	push	{r7}
 8001be2:	b083      	sub	sp, #12
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	6078      	str	r0, [r7, #4]
 8001be8:	460b      	mov	r3, r1
 8001bea:	807b      	strh	r3, [r7, #2]
 8001bec:	4613      	mov	r3, r2
 8001bee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001bf0:	787b      	ldrb	r3, [r7, #1]
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d003      	beq.n	8001bfe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001bf6:	887a      	ldrh	r2, [r7, #2]
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001bfc:	e003      	b.n	8001c06 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001bfe:	887b      	ldrh	r3, [r7, #2]
 8001c00:	041a      	lsls	r2, r3, #16
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	619a      	str	r2, [r3, #24]
}
 8001c06:	bf00      	nop
 8001c08:	370c      	adds	r7, #12
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c10:	4770      	bx	lr

08001c12 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001c12:	b480      	push	{r7}
 8001c14:	b083      	sub	sp, #12
 8001c16:	af00      	add	r7, sp, #0
 8001c18:	6078      	str	r0, [r7, #4]
 8001c1a:	460b      	mov	r3, r1
 8001c1c:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	695a      	ldr	r2, [r3, #20]
 8001c22:	887b      	ldrh	r3, [r7, #2]
 8001c24:	401a      	ands	r2, r3
 8001c26:	887b      	ldrh	r3, [r7, #2]
 8001c28:	429a      	cmp	r2, r3
 8001c2a:	d104      	bne.n	8001c36 <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8001c2c:	887b      	ldrh	r3, [r7, #2]
 8001c2e:	041a      	lsls	r2, r3, #16
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8001c34:	e002      	b.n	8001c3c <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8001c36:	887a      	ldrh	r2, [r7, #2]
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	619a      	str	r2, [r3, #24]
}
 8001c3c:	bf00      	nop
 8001c3e:	370c      	adds	r7, #12
 8001c40:	46bd      	mov	sp, r7
 8001c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c46:	4770      	bx	lr

08001c48 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	b086      	sub	sp, #24
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d101      	bne.n	8001c5a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001c56:	2301      	movs	r3, #1
 8001c58:	e25b      	b.n	8002112 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	f003 0301 	and.w	r3, r3, #1
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d075      	beq.n	8001d52 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001c66:	4ba3      	ldr	r3, [pc, #652]	; (8001ef4 <HAL_RCC_OscConfig+0x2ac>)
 8001c68:	689b      	ldr	r3, [r3, #8]
 8001c6a:	f003 030c 	and.w	r3, r3, #12
 8001c6e:	2b04      	cmp	r3, #4
 8001c70:	d00c      	beq.n	8001c8c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001c72:	4ba0      	ldr	r3, [pc, #640]	; (8001ef4 <HAL_RCC_OscConfig+0x2ac>)
 8001c74:	689b      	ldr	r3, [r3, #8]
 8001c76:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001c7a:	2b08      	cmp	r3, #8
 8001c7c:	d112      	bne.n	8001ca4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001c7e:	4b9d      	ldr	r3, [pc, #628]	; (8001ef4 <HAL_RCC_OscConfig+0x2ac>)
 8001c80:	685b      	ldr	r3, [r3, #4]
 8001c82:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c86:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001c8a:	d10b      	bne.n	8001ca4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c8c:	4b99      	ldr	r3, [pc, #612]	; (8001ef4 <HAL_RCC_OscConfig+0x2ac>)
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d05b      	beq.n	8001d50 <HAL_RCC_OscConfig+0x108>
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	685b      	ldr	r3, [r3, #4]
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d157      	bne.n	8001d50 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001ca0:	2301      	movs	r3, #1
 8001ca2:	e236      	b.n	8002112 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	685b      	ldr	r3, [r3, #4]
 8001ca8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001cac:	d106      	bne.n	8001cbc <HAL_RCC_OscConfig+0x74>
 8001cae:	4b91      	ldr	r3, [pc, #580]	; (8001ef4 <HAL_RCC_OscConfig+0x2ac>)
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	4a90      	ldr	r2, [pc, #576]	; (8001ef4 <HAL_RCC_OscConfig+0x2ac>)
 8001cb4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001cb8:	6013      	str	r3, [r2, #0]
 8001cba:	e01d      	b.n	8001cf8 <HAL_RCC_OscConfig+0xb0>
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	685b      	ldr	r3, [r3, #4]
 8001cc0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001cc4:	d10c      	bne.n	8001ce0 <HAL_RCC_OscConfig+0x98>
 8001cc6:	4b8b      	ldr	r3, [pc, #556]	; (8001ef4 <HAL_RCC_OscConfig+0x2ac>)
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	4a8a      	ldr	r2, [pc, #552]	; (8001ef4 <HAL_RCC_OscConfig+0x2ac>)
 8001ccc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001cd0:	6013      	str	r3, [r2, #0]
 8001cd2:	4b88      	ldr	r3, [pc, #544]	; (8001ef4 <HAL_RCC_OscConfig+0x2ac>)
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	4a87      	ldr	r2, [pc, #540]	; (8001ef4 <HAL_RCC_OscConfig+0x2ac>)
 8001cd8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001cdc:	6013      	str	r3, [r2, #0]
 8001cde:	e00b      	b.n	8001cf8 <HAL_RCC_OscConfig+0xb0>
 8001ce0:	4b84      	ldr	r3, [pc, #528]	; (8001ef4 <HAL_RCC_OscConfig+0x2ac>)
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	4a83      	ldr	r2, [pc, #524]	; (8001ef4 <HAL_RCC_OscConfig+0x2ac>)
 8001ce6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001cea:	6013      	str	r3, [r2, #0]
 8001cec:	4b81      	ldr	r3, [pc, #516]	; (8001ef4 <HAL_RCC_OscConfig+0x2ac>)
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	4a80      	ldr	r2, [pc, #512]	; (8001ef4 <HAL_RCC_OscConfig+0x2ac>)
 8001cf2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001cf6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	685b      	ldr	r3, [r3, #4]
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d013      	beq.n	8001d28 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d00:	f7ff fcac 	bl	800165c <HAL_GetTick>
 8001d04:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d06:	e008      	b.n	8001d1a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001d08:	f7ff fca8 	bl	800165c <HAL_GetTick>
 8001d0c:	4602      	mov	r2, r0
 8001d0e:	693b      	ldr	r3, [r7, #16]
 8001d10:	1ad3      	subs	r3, r2, r3
 8001d12:	2b64      	cmp	r3, #100	; 0x64
 8001d14:	d901      	bls.n	8001d1a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001d16:	2303      	movs	r3, #3
 8001d18:	e1fb      	b.n	8002112 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d1a:	4b76      	ldr	r3, [pc, #472]	; (8001ef4 <HAL_RCC_OscConfig+0x2ac>)
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d0f0      	beq.n	8001d08 <HAL_RCC_OscConfig+0xc0>
 8001d26:	e014      	b.n	8001d52 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d28:	f7ff fc98 	bl	800165c <HAL_GetTick>
 8001d2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d2e:	e008      	b.n	8001d42 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001d30:	f7ff fc94 	bl	800165c <HAL_GetTick>
 8001d34:	4602      	mov	r2, r0
 8001d36:	693b      	ldr	r3, [r7, #16]
 8001d38:	1ad3      	subs	r3, r2, r3
 8001d3a:	2b64      	cmp	r3, #100	; 0x64
 8001d3c:	d901      	bls.n	8001d42 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001d3e:	2303      	movs	r3, #3
 8001d40:	e1e7      	b.n	8002112 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d42:	4b6c      	ldr	r3, [pc, #432]	; (8001ef4 <HAL_RCC_OscConfig+0x2ac>)
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d1f0      	bne.n	8001d30 <HAL_RCC_OscConfig+0xe8>
 8001d4e:	e000      	b.n	8001d52 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d50:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	f003 0302 	and.w	r3, r3, #2
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d063      	beq.n	8001e26 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001d5e:	4b65      	ldr	r3, [pc, #404]	; (8001ef4 <HAL_RCC_OscConfig+0x2ac>)
 8001d60:	689b      	ldr	r3, [r3, #8]
 8001d62:	f003 030c 	and.w	r3, r3, #12
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d00b      	beq.n	8001d82 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001d6a:	4b62      	ldr	r3, [pc, #392]	; (8001ef4 <HAL_RCC_OscConfig+0x2ac>)
 8001d6c:	689b      	ldr	r3, [r3, #8]
 8001d6e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001d72:	2b08      	cmp	r3, #8
 8001d74:	d11c      	bne.n	8001db0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001d76:	4b5f      	ldr	r3, [pc, #380]	; (8001ef4 <HAL_RCC_OscConfig+0x2ac>)
 8001d78:	685b      	ldr	r3, [r3, #4]
 8001d7a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d116      	bne.n	8001db0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d82:	4b5c      	ldr	r3, [pc, #368]	; (8001ef4 <HAL_RCC_OscConfig+0x2ac>)
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	f003 0302 	and.w	r3, r3, #2
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d005      	beq.n	8001d9a <HAL_RCC_OscConfig+0x152>
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	68db      	ldr	r3, [r3, #12]
 8001d92:	2b01      	cmp	r3, #1
 8001d94:	d001      	beq.n	8001d9a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001d96:	2301      	movs	r3, #1
 8001d98:	e1bb      	b.n	8002112 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d9a:	4b56      	ldr	r3, [pc, #344]	; (8001ef4 <HAL_RCC_OscConfig+0x2ac>)
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	691b      	ldr	r3, [r3, #16]
 8001da6:	00db      	lsls	r3, r3, #3
 8001da8:	4952      	ldr	r1, [pc, #328]	; (8001ef4 <HAL_RCC_OscConfig+0x2ac>)
 8001daa:	4313      	orrs	r3, r2
 8001dac:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001dae:	e03a      	b.n	8001e26 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	68db      	ldr	r3, [r3, #12]
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d020      	beq.n	8001dfa <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001db8:	4b4f      	ldr	r3, [pc, #316]	; (8001ef8 <HAL_RCC_OscConfig+0x2b0>)
 8001dba:	2201      	movs	r2, #1
 8001dbc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001dbe:	f7ff fc4d 	bl	800165c <HAL_GetTick>
 8001dc2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001dc4:	e008      	b.n	8001dd8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001dc6:	f7ff fc49 	bl	800165c <HAL_GetTick>
 8001dca:	4602      	mov	r2, r0
 8001dcc:	693b      	ldr	r3, [r7, #16]
 8001dce:	1ad3      	subs	r3, r2, r3
 8001dd0:	2b02      	cmp	r3, #2
 8001dd2:	d901      	bls.n	8001dd8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001dd4:	2303      	movs	r3, #3
 8001dd6:	e19c      	b.n	8002112 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001dd8:	4b46      	ldr	r3, [pc, #280]	; (8001ef4 <HAL_RCC_OscConfig+0x2ac>)
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	f003 0302 	and.w	r3, r3, #2
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d0f0      	beq.n	8001dc6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001de4:	4b43      	ldr	r3, [pc, #268]	; (8001ef4 <HAL_RCC_OscConfig+0x2ac>)
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	691b      	ldr	r3, [r3, #16]
 8001df0:	00db      	lsls	r3, r3, #3
 8001df2:	4940      	ldr	r1, [pc, #256]	; (8001ef4 <HAL_RCC_OscConfig+0x2ac>)
 8001df4:	4313      	orrs	r3, r2
 8001df6:	600b      	str	r3, [r1, #0]
 8001df8:	e015      	b.n	8001e26 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001dfa:	4b3f      	ldr	r3, [pc, #252]	; (8001ef8 <HAL_RCC_OscConfig+0x2b0>)
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e00:	f7ff fc2c 	bl	800165c <HAL_GetTick>
 8001e04:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e06:	e008      	b.n	8001e1a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001e08:	f7ff fc28 	bl	800165c <HAL_GetTick>
 8001e0c:	4602      	mov	r2, r0
 8001e0e:	693b      	ldr	r3, [r7, #16]
 8001e10:	1ad3      	subs	r3, r2, r3
 8001e12:	2b02      	cmp	r3, #2
 8001e14:	d901      	bls.n	8001e1a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001e16:	2303      	movs	r3, #3
 8001e18:	e17b      	b.n	8002112 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e1a:	4b36      	ldr	r3, [pc, #216]	; (8001ef4 <HAL_RCC_OscConfig+0x2ac>)
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	f003 0302 	and.w	r3, r3, #2
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d1f0      	bne.n	8001e08 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	f003 0308 	and.w	r3, r3, #8
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d030      	beq.n	8001e94 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	695b      	ldr	r3, [r3, #20]
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d016      	beq.n	8001e68 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001e3a:	4b30      	ldr	r3, [pc, #192]	; (8001efc <HAL_RCC_OscConfig+0x2b4>)
 8001e3c:	2201      	movs	r2, #1
 8001e3e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e40:	f7ff fc0c 	bl	800165c <HAL_GetTick>
 8001e44:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e46:	e008      	b.n	8001e5a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001e48:	f7ff fc08 	bl	800165c <HAL_GetTick>
 8001e4c:	4602      	mov	r2, r0
 8001e4e:	693b      	ldr	r3, [r7, #16]
 8001e50:	1ad3      	subs	r3, r2, r3
 8001e52:	2b02      	cmp	r3, #2
 8001e54:	d901      	bls.n	8001e5a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001e56:	2303      	movs	r3, #3
 8001e58:	e15b      	b.n	8002112 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e5a:	4b26      	ldr	r3, [pc, #152]	; (8001ef4 <HAL_RCC_OscConfig+0x2ac>)
 8001e5c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001e5e:	f003 0302 	and.w	r3, r3, #2
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d0f0      	beq.n	8001e48 <HAL_RCC_OscConfig+0x200>
 8001e66:	e015      	b.n	8001e94 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001e68:	4b24      	ldr	r3, [pc, #144]	; (8001efc <HAL_RCC_OscConfig+0x2b4>)
 8001e6a:	2200      	movs	r2, #0
 8001e6c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e6e:	f7ff fbf5 	bl	800165c <HAL_GetTick>
 8001e72:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e74:	e008      	b.n	8001e88 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001e76:	f7ff fbf1 	bl	800165c <HAL_GetTick>
 8001e7a:	4602      	mov	r2, r0
 8001e7c:	693b      	ldr	r3, [r7, #16]
 8001e7e:	1ad3      	subs	r3, r2, r3
 8001e80:	2b02      	cmp	r3, #2
 8001e82:	d901      	bls.n	8001e88 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001e84:	2303      	movs	r3, #3
 8001e86:	e144      	b.n	8002112 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e88:	4b1a      	ldr	r3, [pc, #104]	; (8001ef4 <HAL_RCC_OscConfig+0x2ac>)
 8001e8a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001e8c:	f003 0302 	and.w	r3, r3, #2
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d1f0      	bne.n	8001e76 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	f003 0304 	and.w	r3, r3, #4
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	f000 80a0 	beq.w	8001fe2 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001ea2:	2300      	movs	r3, #0
 8001ea4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001ea6:	4b13      	ldr	r3, [pc, #76]	; (8001ef4 <HAL_RCC_OscConfig+0x2ac>)
 8001ea8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eaa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d10f      	bne.n	8001ed2 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001eb2:	2300      	movs	r3, #0
 8001eb4:	60bb      	str	r3, [r7, #8]
 8001eb6:	4b0f      	ldr	r3, [pc, #60]	; (8001ef4 <HAL_RCC_OscConfig+0x2ac>)
 8001eb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eba:	4a0e      	ldr	r2, [pc, #56]	; (8001ef4 <HAL_RCC_OscConfig+0x2ac>)
 8001ebc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ec0:	6413      	str	r3, [r2, #64]	; 0x40
 8001ec2:	4b0c      	ldr	r3, [pc, #48]	; (8001ef4 <HAL_RCC_OscConfig+0x2ac>)
 8001ec4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ec6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001eca:	60bb      	str	r3, [r7, #8]
 8001ecc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001ece:	2301      	movs	r3, #1
 8001ed0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ed2:	4b0b      	ldr	r3, [pc, #44]	; (8001f00 <HAL_RCC_OscConfig+0x2b8>)
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d121      	bne.n	8001f22 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001ede:	4b08      	ldr	r3, [pc, #32]	; (8001f00 <HAL_RCC_OscConfig+0x2b8>)
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	4a07      	ldr	r2, [pc, #28]	; (8001f00 <HAL_RCC_OscConfig+0x2b8>)
 8001ee4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ee8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001eea:	f7ff fbb7 	bl	800165c <HAL_GetTick>
 8001eee:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ef0:	e011      	b.n	8001f16 <HAL_RCC_OscConfig+0x2ce>
 8001ef2:	bf00      	nop
 8001ef4:	40023800 	.word	0x40023800
 8001ef8:	42470000 	.word	0x42470000
 8001efc:	42470e80 	.word	0x42470e80
 8001f00:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f04:	f7ff fbaa 	bl	800165c <HAL_GetTick>
 8001f08:	4602      	mov	r2, r0
 8001f0a:	693b      	ldr	r3, [r7, #16]
 8001f0c:	1ad3      	subs	r3, r2, r3
 8001f0e:	2b02      	cmp	r3, #2
 8001f10:	d901      	bls.n	8001f16 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8001f12:	2303      	movs	r3, #3
 8001f14:	e0fd      	b.n	8002112 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f16:	4b81      	ldr	r3, [pc, #516]	; (800211c <HAL_RCC_OscConfig+0x4d4>)
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d0f0      	beq.n	8001f04 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	689b      	ldr	r3, [r3, #8]
 8001f26:	2b01      	cmp	r3, #1
 8001f28:	d106      	bne.n	8001f38 <HAL_RCC_OscConfig+0x2f0>
 8001f2a:	4b7d      	ldr	r3, [pc, #500]	; (8002120 <HAL_RCC_OscConfig+0x4d8>)
 8001f2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f2e:	4a7c      	ldr	r2, [pc, #496]	; (8002120 <HAL_RCC_OscConfig+0x4d8>)
 8001f30:	f043 0301 	orr.w	r3, r3, #1
 8001f34:	6713      	str	r3, [r2, #112]	; 0x70
 8001f36:	e01c      	b.n	8001f72 <HAL_RCC_OscConfig+0x32a>
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	689b      	ldr	r3, [r3, #8]
 8001f3c:	2b05      	cmp	r3, #5
 8001f3e:	d10c      	bne.n	8001f5a <HAL_RCC_OscConfig+0x312>
 8001f40:	4b77      	ldr	r3, [pc, #476]	; (8002120 <HAL_RCC_OscConfig+0x4d8>)
 8001f42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f44:	4a76      	ldr	r2, [pc, #472]	; (8002120 <HAL_RCC_OscConfig+0x4d8>)
 8001f46:	f043 0304 	orr.w	r3, r3, #4
 8001f4a:	6713      	str	r3, [r2, #112]	; 0x70
 8001f4c:	4b74      	ldr	r3, [pc, #464]	; (8002120 <HAL_RCC_OscConfig+0x4d8>)
 8001f4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f50:	4a73      	ldr	r2, [pc, #460]	; (8002120 <HAL_RCC_OscConfig+0x4d8>)
 8001f52:	f043 0301 	orr.w	r3, r3, #1
 8001f56:	6713      	str	r3, [r2, #112]	; 0x70
 8001f58:	e00b      	b.n	8001f72 <HAL_RCC_OscConfig+0x32a>
 8001f5a:	4b71      	ldr	r3, [pc, #452]	; (8002120 <HAL_RCC_OscConfig+0x4d8>)
 8001f5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f5e:	4a70      	ldr	r2, [pc, #448]	; (8002120 <HAL_RCC_OscConfig+0x4d8>)
 8001f60:	f023 0301 	bic.w	r3, r3, #1
 8001f64:	6713      	str	r3, [r2, #112]	; 0x70
 8001f66:	4b6e      	ldr	r3, [pc, #440]	; (8002120 <HAL_RCC_OscConfig+0x4d8>)
 8001f68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f6a:	4a6d      	ldr	r2, [pc, #436]	; (8002120 <HAL_RCC_OscConfig+0x4d8>)
 8001f6c:	f023 0304 	bic.w	r3, r3, #4
 8001f70:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	689b      	ldr	r3, [r3, #8]
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d015      	beq.n	8001fa6 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f7a:	f7ff fb6f 	bl	800165c <HAL_GetTick>
 8001f7e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f80:	e00a      	b.n	8001f98 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001f82:	f7ff fb6b 	bl	800165c <HAL_GetTick>
 8001f86:	4602      	mov	r2, r0
 8001f88:	693b      	ldr	r3, [r7, #16]
 8001f8a:	1ad3      	subs	r3, r2, r3
 8001f8c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f90:	4293      	cmp	r3, r2
 8001f92:	d901      	bls.n	8001f98 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8001f94:	2303      	movs	r3, #3
 8001f96:	e0bc      	b.n	8002112 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f98:	4b61      	ldr	r3, [pc, #388]	; (8002120 <HAL_RCC_OscConfig+0x4d8>)
 8001f9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f9c:	f003 0302 	and.w	r3, r3, #2
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d0ee      	beq.n	8001f82 <HAL_RCC_OscConfig+0x33a>
 8001fa4:	e014      	b.n	8001fd0 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001fa6:	f7ff fb59 	bl	800165c <HAL_GetTick>
 8001faa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001fac:	e00a      	b.n	8001fc4 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001fae:	f7ff fb55 	bl	800165c <HAL_GetTick>
 8001fb2:	4602      	mov	r2, r0
 8001fb4:	693b      	ldr	r3, [r7, #16]
 8001fb6:	1ad3      	subs	r3, r2, r3
 8001fb8:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fbc:	4293      	cmp	r3, r2
 8001fbe:	d901      	bls.n	8001fc4 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8001fc0:	2303      	movs	r3, #3
 8001fc2:	e0a6      	b.n	8002112 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001fc4:	4b56      	ldr	r3, [pc, #344]	; (8002120 <HAL_RCC_OscConfig+0x4d8>)
 8001fc6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fc8:	f003 0302 	and.w	r3, r3, #2
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d1ee      	bne.n	8001fae <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001fd0:	7dfb      	ldrb	r3, [r7, #23]
 8001fd2:	2b01      	cmp	r3, #1
 8001fd4:	d105      	bne.n	8001fe2 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001fd6:	4b52      	ldr	r3, [pc, #328]	; (8002120 <HAL_RCC_OscConfig+0x4d8>)
 8001fd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fda:	4a51      	ldr	r2, [pc, #324]	; (8002120 <HAL_RCC_OscConfig+0x4d8>)
 8001fdc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001fe0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	699b      	ldr	r3, [r3, #24]
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	f000 8092 	beq.w	8002110 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001fec:	4b4c      	ldr	r3, [pc, #304]	; (8002120 <HAL_RCC_OscConfig+0x4d8>)
 8001fee:	689b      	ldr	r3, [r3, #8]
 8001ff0:	f003 030c 	and.w	r3, r3, #12
 8001ff4:	2b08      	cmp	r3, #8
 8001ff6:	d05c      	beq.n	80020b2 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	699b      	ldr	r3, [r3, #24]
 8001ffc:	2b02      	cmp	r3, #2
 8001ffe:	d141      	bne.n	8002084 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002000:	4b48      	ldr	r3, [pc, #288]	; (8002124 <HAL_RCC_OscConfig+0x4dc>)
 8002002:	2200      	movs	r2, #0
 8002004:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002006:	f7ff fb29 	bl	800165c <HAL_GetTick>
 800200a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800200c:	e008      	b.n	8002020 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800200e:	f7ff fb25 	bl	800165c <HAL_GetTick>
 8002012:	4602      	mov	r2, r0
 8002014:	693b      	ldr	r3, [r7, #16]
 8002016:	1ad3      	subs	r3, r2, r3
 8002018:	2b02      	cmp	r3, #2
 800201a:	d901      	bls.n	8002020 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800201c:	2303      	movs	r3, #3
 800201e:	e078      	b.n	8002112 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002020:	4b3f      	ldr	r3, [pc, #252]	; (8002120 <HAL_RCC_OscConfig+0x4d8>)
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002028:	2b00      	cmp	r3, #0
 800202a:	d1f0      	bne.n	800200e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	69da      	ldr	r2, [r3, #28]
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	6a1b      	ldr	r3, [r3, #32]
 8002034:	431a      	orrs	r2, r3
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800203a:	019b      	lsls	r3, r3, #6
 800203c:	431a      	orrs	r2, r3
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002042:	085b      	lsrs	r3, r3, #1
 8002044:	3b01      	subs	r3, #1
 8002046:	041b      	lsls	r3, r3, #16
 8002048:	431a      	orrs	r2, r3
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800204e:	061b      	lsls	r3, r3, #24
 8002050:	4933      	ldr	r1, [pc, #204]	; (8002120 <HAL_RCC_OscConfig+0x4d8>)
 8002052:	4313      	orrs	r3, r2
 8002054:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002056:	4b33      	ldr	r3, [pc, #204]	; (8002124 <HAL_RCC_OscConfig+0x4dc>)
 8002058:	2201      	movs	r2, #1
 800205a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800205c:	f7ff fafe 	bl	800165c <HAL_GetTick>
 8002060:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002062:	e008      	b.n	8002076 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002064:	f7ff fafa 	bl	800165c <HAL_GetTick>
 8002068:	4602      	mov	r2, r0
 800206a:	693b      	ldr	r3, [r7, #16]
 800206c:	1ad3      	subs	r3, r2, r3
 800206e:	2b02      	cmp	r3, #2
 8002070:	d901      	bls.n	8002076 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8002072:	2303      	movs	r3, #3
 8002074:	e04d      	b.n	8002112 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002076:	4b2a      	ldr	r3, [pc, #168]	; (8002120 <HAL_RCC_OscConfig+0x4d8>)
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800207e:	2b00      	cmp	r3, #0
 8002080:	d0f0      	beq.n	8002064 <HAL_RCC_OscConfig+0x41c>
 8002082:	e045      	b.n	8002110 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002084:	4b27      	ldr	r3, [pc, #156]	; (8002124 <HAL_RCC_OscConfig+0x4dc>)
 8002086:	2200      	movs	r2, #0
 8002088:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800208a:	f7ff fae7 	bl	800165c <HAL_GetTick>
 800208e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002090:	e008      	b.n	80020a4 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002092:	f7ff fae3 	bl	800165c <HAL_GetTick>
 8002096:	4602      	mov	r2, r0
 8002098:	693b      	ldr	r3, [r7, #16]
 800209a:	1ad3      	subs	r3, r2, r3
 800209c:	2b02      	cmp	r3, #2
 800209e:	d901      	bls.n	80020a4 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80020a0:	2303      	movs	r3, #3
 80020a2:	e036      	b.n	8002112 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80020a4:	4b1e      	ldr	r3, [pc, #120]	; (8002120 <HAL_RCC_OscConfig+0x4d8>)
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d1f0      	bne.n	8002092 <HAL_RCC_OscConfig+0x44a>
 80020b0:	e02e      	b.n	8002110 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	699b      	ldr	r3, [r3, #24]
 80020b6:	2b01      	cmp	r3, #1
 80020b8:	d101      	bne.n	80020be <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80020ba:	2301      	movs	r3, #1
 80020bc:	e029      	b.n	8002112 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80020be:	4b18      	ldr	r3, [pc, #96]	; (8002120 <HAL_RCC_OscConfig+0x4d8>)
 80020c0:	685b      	ldr	r3, [r3, #4]
 80020c2:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	69db      	ldr	r3, [r3, #28]
 80020ce:	429a      	cmp	r2, r3
 80020d0:	d11c      	bne.n	800210c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80020dc:	429a      	cmp	r2, r3
 80020de:	d115      	bne.n	800210c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80020e0:	68fa      	ldr	r2, [r7, #12]
 80020e2:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80020e6:	4013      	ands	r3, r2
 80020e8:	687a      	ldr	r2, [r7, #4]
 80020ea:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80020ec:	4293      	cmp	r3, r2
 80020ee:	d10d      	bne.n	800210c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80020fa:	429a      	cmp	r2, r3
 80020fc:	d106      	bne.n	800210c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002108:	429a      	cmp	r2, r3
 800210a:	d001      	beq.n	8002110 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 800210c:	2301      	movs	r3, #1
 800210e:	e000      	b.n	8002112 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8002110:	2300      	movs	r3, #0
}
 8002112:	4618      	mov	r0, r3
 8002114:	3718      	adds	r7, #24
 8002116:	46bd      	mov	sp, r7
 8002118:	bd80      	pop	{r7, pc}
 800211a:	bf00      	nop
 800211c:	40007000 	.word	0x40007000
 8002120:	40023800 	.word	0x40023800
 8002124:	42470060 	.word	0x42470060

08002128 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002128:	b580      	push	{r7, lr}
 800212a:	b084      	sub	sp, #16
 800212c:	af00      	add	r7, sp, #0
 800212e:	6078      	str	r0, [r7, #4]
 8002130:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	2b00      	cmp	r3, #0
 8002136:	d101      	bne.n	800213c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002138:	2301      	movs	r3, #1
 800213a:	e0cc      	b.n	80022d6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800213c:	4b68      	ldr	r3, [pc, #416]	; (80022e0 <HAL_RCC_ClockConfig+0x1b8>)
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	f003 030f 	and.w	r3, r3, #15
 8002144:	683a      	ldr	r2, [r7, #0]
 8002146:	429a      	cmp	r2, r3
 8002148:	d90c      	bls.n	8002164 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800214a:	4b65      	ldr	r3, [pc, #404]	; (80022e0 <HAL_RCC_ClockConfig+0x1b8>)
 800214c:	683a      	ldr	r2, [r7, #0]
 800214e:	b2d2      	uxtb	r2, r2
 8002150:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002152:	4b63      	ldr	r3, [pc, #396]	; (80022e0 <HAL_RCC_ClockConfig+0x1b8>)
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	f003 030f 	and.w	r3, r3, #15
 800215a:	683a      	ldr	r2, [r7, #0]
 800215c:	429a      	cmp	r2, r3
 800215e:	d001      	beq.n	8002164 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002160:	2301      	movs	r3, #1
 8002162:	e0b8      	b.n	80022d6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	f003 0302 	and.w	r3, r3, #2
 800216c:	2b00      	cmp	r3, #0
 800216e:	d020      	beq.n	80021b2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	f003 0304 	and.w	r3, r3, #4
 8002178:	2b00      	cmp	r3, #0
 800217a:	d005      	beq.n	8002188 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800217c:	4b59      	ldr	r3, [pc, #356]	; (80022e4 <HAL_RCC_ClockConfig+0x1bc>)
 800217e:	689b      	ldr	r3, [r3, #8]
 8002180:	4a58      	ldr	r2, [pc, #352]	; (80022e4 <HAL_RCC_ClockConfig+0x1bc>)
 8002182:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002186:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	f003 0308 	and.w	r3, r3, #8
 8002190:	2b00      	cmp	r3, #0
 8002192:	d005      	beq.n	80021a0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002194:	4b53      	ldr	r3, [pc, #332]	; (80022e4 <HAL_RCC_ClockConfig+0x1bc>)
 8002196:	689b      	ldr	r3, [r3, #8]
 8002198:	4a52      	ldr	r2, [pc, #328]	; (80022e4 <HAL_RCC_ClockConfig+0x1bc>)
 800219a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800219e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80021a0:	4b50      	ldr	r3, [pc, #320]	; (80022e4 <HAL_RCC_ClockConfig+0x1bc>)
 80021a2:	689b      	ldr	r3, [r3, #8]
 80021a4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	689b      	ldr	r3, [r3, #8]
 80021ac:	494d      	ldr	r1, [pc, #308]	; (80022e4 <HAL_RCC_ClockConfig+0x1bc>)
 80021ae:	4313      	orrs	r3, r2
 80021b0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	f003 0301 	and.w	r3, r3, #1
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d044      	beq.n	8002248 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	685b      	ldr	r3, [r3, #4]
 80021c2:	2b01      	cmp	r3, #1
 80021c4:	d107      	bne.n	80021d6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021c6:	4b47      	ldr	r3, [pc, #284]	; (80022e4 <HAL_RCC_ClockConfig+0x1bc>)
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d119      	bne.n	8002206 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80021d2:	2301      	movs	r3, #1
 80021d4:	e07f      	b.n	80022d6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	685b      	ldr	r3, [r3, #4]
 80021da:	2b02      	cmp	r3, #2
 80021dc:	d003      	beq.n	80021e6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80021e2:	2b03      	cmp	r3, #3
 80021e4:	d107      	bne.n	80021f6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80021e6:	4b3f      	ldr	r3, [pc, #252]	; (80022e4 <HAL_RCC_ClockConfig+0x1bc>)
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d109      	bne.n	8002206 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80021f2:	2301      	movs	r3, #1
 80021f4:	e06f      	b.n	80022d6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021f6:	4b3b      	ldr	r3, [pc, #236]	; (80022e4 <HAL_RCC_ClockConfig+0x1bc>)
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	f003 0302 	and.w	r3, r3, #2
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d101      	bne.n	8002206 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002202:	2301      	movs	r3, #1
 8002204:	e067      	b.n	80022d6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002206:	4b37      	ldr	r3, [pc, #220]	; (80022e4 <HAL_RCC_ClockConfig+0x1bc>)
 8002208:	689b      	ldr	r3, [r3, #8]
 800220a:	f023 0203 	bic.w	r2, r3, #3
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	685b      	ldr	r3, [r3, #4]
 8002212:	4934      	ldr	r1, [pc, #208]	; (80022e4 <HAL_RCC_ClockConfig+0x1bc>)
 8002214:	4313      	orrs	r3, r2
 8002216:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002218:	f7ff fa20 	bl	800165c <HAL_GetTick>
 800221c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800221e:	e00a      	b.n	8002236 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002220:	f7ff fa1c 	bl	800165c <HAL_GetTick>
 8002224:	4602      	mov	r2, r0
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	1ad3      	subs	r3, r2, r3
 800222a:	f241 3288 	movw	r2, #5000	; 0x1388
 800222e:	4293      	cmp	r3, r2
 8002230:	d901      	bls.n	8002236 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002232:	2303      	movs	r3, #3
 8002234:	e04f      	b.n	80022d6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002236:	4b2b      	ldr	r3, [pc, #172]	; (80022e4 <HAL_RCC_ClockConfig+0x1bc>)
 8002238:	689b      	ldr	r3, [r3, #8]
 800223a:	f003 020c 	and.w	r2, r3, #12
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	685b      	ldr	r3, [r3, #4]
 8002242:	009b      	lsls	r3, r3, #2
 8002244:	429a      	cmp	r2, r3
 8002246:	d1eb      	bne.n	8002220 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002248:	4b25      	ldr	r3, [pc, #148]	; (80022e0 <HAL_RCC_ClockConfig+0x1b8>)
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	f003 030f 	and.w	r3, r3, #15
 8002250:	683a      	ldr	r2, [r7, #0]
 8002252:	429a      	cmp	r2, r3
 8002254:	d20c      	bcs.n	8002270 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002256:	4b22      	ldr	r3, [pc, #136]	; (80022e0 <HAL_RCC_ClockConfig+0x1b8>)
 8002258:	683a      	ldr	r2, [r7, #0]
 800225a:	b2d2      	uxtb	r2, r2
 800225c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800225e:	4b20      	ldr	r3, [pc, #128]	; (80022e0 <HAL_RCC_ClockConfig+0x1b8>)
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	f003 030f 	and.w	r3, r3, #15
 8002266:	683a      	ldr	r2, [r7, #0]
 8002268:	429a      	cmp	r2, r3
 800226a:	d001      	beq.n	8002270 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800226c:	2301      	movs	r3, #1
 800226e:	e032      	b.n	80022d6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	f003 0304 	and.w	r3, r3, #4
 8002278:	2b00      	cmp	r3, #0
 800227a:	d008      	beq.n	800228e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800227c:	4b19      	ldr	r3, [pc, #100]	; (80022e4 <HAL_RCC_ClockConfig+0x1bc>)
 800227e:	689b      	ldr	r3, [r3, #8]
 8002280:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	68db      	ldr	r3, [r3, #12]
 8002288:	4916      	ldr	r1, [pc, #88]	; (80022e4 <HAL_RCC_ClockConfig+0x1bc>)
 800228a:	4313      	orrs	r3, r2
 800228c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	f003 0308 	and.w	r3, r3, #8
 8002296:	2b00      	cmp	r3, #0
 8002298:	d009      	beq.n	80022ae <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800229a:	4b12      	ldr	r3, [pc, #72]	; (80022e4 <HAL_RCC_ClockConfig+0x1bc>)
 800229c:	689b      	ldr	r3, [r3, #8]
 800229e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	691b      	ldr	r3, [r3, #16]
 80022a6:	00db      	lsls	r3, r3, #3
 80022a8:	490e      	ldr	r1, [pc, #56]	; (80022e4 <HAL_RCC_ClockConfig+0x1bc>)
 80022aa:	4313      	orrs	r3, r2
 80022ac:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80022ae:	f000 f821 	bl	80022f4 <HAL_RCC_GetSysClockFreq>
 80022b2:	4601      	mov	r1, r0
 80022b4:	4b0b      	ldr	r3, [pc, #44]	; (80022e4 <HAL_RCC_ClockConfig+0x1bc>)
 80022b6:	689b      	ldr	r3, [r3, #8]
 80022b8:	091b      	lsrs	r3, r3, #4
 80022ba:	f003 030f 	and.w	r3, r3, #15
 80022be:	4a0a      	ldr	r2, [pc, #40]	; (80022e8 <HAL_RCC_ClockConfig+0x1c0>)
 80022c0:	5cd3      	ldrb	r3, [r2, r3]
 80022c2:	fa21 f303 	lsr.w	r3, r1, r3
 80022c6:	4a09      	ldr	r2, [pc, #36]	; (80022ec <HAL_RCC_ClockConfig+0x1c4>)
 80022c8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80022ca:	4b09      	ldr	r3, [pc, #36]	; (80022f0 <HAL_RCC_ClockConfig+0x1c8>)
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	4618      	mov	r0, r3
 80022d0:	f7ff f980 	bl	80015d4 <HAL_InitTick>

  return HAL_OK;
 80022d4:	2300      	movs	r3, #0
}
 80022d6:	4618      	mov	r0, r3
 80022d8:	3710      	adds	r7, #16
 80022da:	46bd      	mov	sp, r7
 80022dc:	bd80      	pop	{r7, pc}
 80022de:	bf00      	nop
 80022e0:	40023c00 	.word	0x40023c00
 80022e4:	40023800 	.word	0x40023800
 80022e8:	08003d68 	.word	0x08003d68
 80022ec:	200000a4 	.word	0x200000a4
 80022f0:	200000a8 	.word	0x200000a8

080022f4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80022f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80022f6:	b085      	sub	sp, #20
 80022f8:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80022fa:	2300      	movs	r3, #0
 80022fc:	607b      	str	r3, [r7, #4]
 80022fe:	2300      	movs	r3, #0
 8002300:	60fb      	str	r3, [r7, #12]
 8002302:	2300      	movs	r3, #0
 8002304:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8002306:	2300      	movs	r3, #0
 8002308:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800230a:	4b50      	ldr	r3, [pc, #320]	; (800244c <HAL_RCC_GetSysClockFreq+0x158>)
 800230c:	689b      	ldr	r3, [r3, #8]
 800230e:	f003 030c 	and.w	r3, r3, #12
 8002312:	2b04      	cmp	r3, #4
 8002314:	d007      	beq.n	8002326 <HAL_RCC_GetSysClockFreq+0x32>
 8002316:	2b08      	cmp	r3, #8
 8002318:	d008      	beq.n	800232c <HAL_RCC_GetSysClockFreq+0x38>
 800231a:	2b00      	cmp	r3, #0
 800231c:	f040 808d 	bne.w	800243a <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002320:	4b4b      	ldr	r3, [pc, #300]	; (8002450 <HAL_RCC_GetSysClockFreq+0x15c>)
 8002322:	60bb      	str	r3, [r7, #8]
       break;
 8002324:	e08c      	b.n	8002440 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002326:	4b4b      	ldr	r3, [pc, #300]	; (8002454 <HAL_RCC_GetSysClockFreq+0x160>)
 8002328:	60bb      	str	r3, [r7, #8]
      break;
 800232a:	e089      	b.n	8002440 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800232c:	4b47      	ldr	r3, [pc, #284]	; (800244c <HAL_RCC_GetSysClockFreq+0x158>)
 800232e:	685b      	ldr	r3, [r3, #4]
 8002330:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002334:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002336:	4b45      	ldr	r3, [pc, #276]	; (800244c <HAL_RCC_GetSysClockFreq+0x158>)
 8002338:	685b      	ldr	r3, [r3, #4]
 800233a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800233e:	2b00      	cmp	r3, #0
 8002340:	d023      	beq.n	800238a <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002342:	4b42      	ldr	r3, [pc, #264]	; (800244c <HAL_RCC_GetSysClockFreq+0x158>)
 8002344:	685b      	ldr	r3, [r3, #4]
 8002346:	099b      	lsrs	r3, r3, #6
 8002348:	f04f 0400 	mov.w	r4, #0
 800234c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002350:	f04f 0200 	mov.w	r2, #0
 8002354:	ea03 0501 	and.w	r5, r3, r1
 8002358:	ea04 0602 	and.w	r6, r4, r2
 800235c:	4a3d      	ldr	r2, [pc, #244]	; (8002454 <HAL_RCC_GetSysClockFreq+0x160>)
 800235e:	fb02 f106 	mul.w	r1, r2, r6
 8002362:	2200      	movs	r2, #0
 8002364:	fb02 f205 	mul.w	r2, r2, r5
 8002368:	440a      	add	r2, r1
 800236a:	493a      	ldr	r1, [pc, #232]	; (8002454 <HAL_RCC_GetSysClockFreq+0x160>)
 800236c:	fba5 0101 	umull	r0, r1, r5, r1
 8002370:	1853      	adds	r3, r2, r1
 8002372:	4619      	mov	r1, r3
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	f04f 0400 	mov.w	r4, #0
 800237a:	461a      	mov	r2, r3
 800237c:	4623      	mov	r3, r4
 800237e:	f7fd ff2b 	bl	80001d8 <__aeabi_uldivmod>
 8002382:	4603      	mov	r3, r0
 8002384:	460c      	mov	r4, r1
 8002386:	60fb      	str	r3, [r7, #12]
 8002388:	e049      	b.n	800241e <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800238a:	4b30      	ldr	r3, [pc, #192]	; (800244c <HAL_RCC_GetSysClockFreq+0x158>)
 800238c:	685b      	ldr	r3, [r3, #4]
 800238e:	099b      	lsrs	r3, r3, #6
 8002390:	f04f 0400 	mov.w	r4, #0
 8002394:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002398:	f04f 0200 	mov.w	r2, #0
 800239c:	ea03 0501 	and.w	r5, r3, r1
 80023a0:	ea04 0602 	and.w	r6, r4, r2
 80023a4:	4629      	mov	r1, r5
 80023a6:	4632      	mov	r2, r6
 80023a8:	f04f 0300 	mov.w	r3, #0
 80023ac:	f04f 0400 	mov.w	r4, #0
 80023b0:	0154      	lsls	r4, r2, #5
 80023b2:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80023b6:	014b      	lsls	r3, r1, #5
 80023b8:	4619      	mov	r1, r3
 80023ba:	4622      	mov	r2, r4
 80023bc:	1b49      	subs	r1, r1, r5
 80023be:	eb62 0206 	sbc.w	r2, r2, r6
 80023c2:	f04f 0300 	mov.w	r3, #0
 80023c6:	f04f 0400 	mov.w	r4, #0
 80023ca:	0194      	lsls	r4, r2, #6
 80023cc:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80023d0:	018b      	lsls	r3, r1, #6
 80023d2:	1a5b      	subs	r3, r3, r1
 80023d4:	eb64 0402 	sbc.w	r4, r4, r2
 80023d8:	f04f 0100 	mov.w	r1, #0
 80023dc:	f04f 0200 	mov.w	r2, #0
 80023e0:	00e2      	lsls	r2, r4, #3
 80023e2:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80023e6:	00d9      	lsls	r1, r3, #3
 80023e8:	460b      	mov	r3, r1
 80023ea:	4614      	mov	r4, r2
 80023ec:	195b      	adds	r3, r3, r5
 80023ee:	eb44 0406 	adc.w	r4, r4, r6
 80023f2:	f04f 0100 	mov.w	r1, #0
 80023f6:	f04f 0200 	mov.w	r2, #0
 80023fa:	02a2      	lsls	r2, r4, #10
 80023fc:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8002400:	0299      	lsls	r1, r3, #10
 8002402:	460b      	mov	r3, r1
 8002404:	4614      	mov	r4, r2
 8002406:	4618      	mov	r0, r3
 8002408:	4621      	mov	r1, r4
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	f04f 0400 	mov.w	r4, #0
 8002410:	461a      	mov	r2, r3
 8002412:	4623      	mov	r3, r4
 8002414:	f7fd fee0 	bl	80001d8 <__aeabi_uldivmod>
 8002418:	4603      	mov	r3, r0
 800241a:	460c      	mov	r4, r1
 800241c:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800241e:	4b0b      	ldr	r3, [pc, #44]	; (800244c <HAL_RCC_GetSysClockFreq+0x158>)
 8002420:	685b      	ldr	r3, [r3, #4]
 8002422:	0c1b      	lsrs	r3, r3, #16
 8002424:	f003 0303 	and.w	r3, r3, #3
 8002428:	3301      	adds	r3, #1
 800242a:	005b      	lsls	r3, r3, #1
 800242c:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800242e:	68fa      	ldr	r2, [r7, #12]
 8002430:	683b      	ldr	r3, [r7, #0]
 8002432:	fbb2 f3f3 	udiv	r3, r2, r3
 8002436:	60bb      	str	r3, [r7, #8]
      break;
 8002438:	e002      	b.n	8002440 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800243a:	4b05      	ldr	r3, [pc, #20]	; (8002450 <HAL_RCC_GetSysClockFreq+0x15c>)
 800243c:	60bb      	str	r3, [r7, #8]
      break;
 800243e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002440:	68bb      	ldr	r3, [r7, #8]
}
 8002442:	4618      	mov	r0, r3
 8002444:	3714      	adds	r7, #20
 8002446:	46bd      	mov	sp, r7
 8002448:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800244a:	bf00      	nop
 800244c:	40023800 	.word	0x40023800
 8002450:	00f42400 	.word	0x00f42400
 8002454:	017d7840 	.word	0x017d7840

08002458 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002458:	b480      	push	{r7}
 800245a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800245c:	4b03      	ldr	r3, [pc, #12]	; (800246c <HAL_RCC_GetHCLKFreq+0x14>)
 800245e:	681b      	ldr	r3, [r3, #0]
}
 8002460:	4618      	mov	r0, r3
 8002462:	46bd      	mov	sp, r7
 8002464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002468:	4770      	bx	lr
 800246a:	bf00      	nop
 800246c:	200000a4 	.word	0x200000a4

08002470 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002470:	b580      	push	{r7, lr}
 8002472:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002474:	f7ff fff0 	bl	8002458 <HAL_RCC_GetHCLKFreq>
 8002478:	4601      	mov	r1, r0
 800247a:	4b05      	ldr	r3, [pc, #20]	; (8002490 <HAL_RCC_GetPCLK1Freq+0x20>)
 800247c:	689b      	ldr	r3, [r3, #8]
 800247e:	0a9b      	lsrs	r3, r3, #10
 8002480:	f003 0307 	and.w	r3, r3, #7
 8002484:	4a03      	ldr	r2, [pc, #12]	; (8002494 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002486:	5cd3      	ldrb	r3, [r2, r3]
 8002488:	fa21 f303 	lsr.w	r3, r1, r3
}
 800248c:	4618      	mov	r0, r3
 800248e:	bd80      	pop	{r7, pc}
 8002490:	40023800 	.word	0x40023800
 8002494:	08003d78 	.word	0x08003d78

08002498 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002498:	b580      	push	{r7, lr}
 800249a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800249c:	f7ff ffdc 	bl	8002458 <HAL_RCC_GetHCLKFreq>
 80024a0:	4601      	mov	r1, r0
 80024a2:	4b05      	ldr	r3, [pc, #20]	; (80024b8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80024a4:	689b      	ldr	r3, [r3, #8]
 80024a6:	0b5b      	lsrs	r3, r3, #13
 80024a8:	f003 0307 	and.w	r3, r3, #7
 80024ac:	4a03      	ldr	r2, [pc, #12]	; (80024bc <HAL_RCC_GetPCLK2Freq+0x24>)
 80024ae:	5cd3      	ldrb	r3, [r2, r3]
 80024b0:	fa21 f303 	lsr.w	r3, r1, r3
}
 80024b4:	4618      	mov	r0, r3
 80024b6:	bd80      	pop	{r7, pc}
 80024b8:	40023800 	.word	0x40023800
 80024bc:	08003d78 	.word	0x08003d78

080024c0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80024c0:	b580      	push	{r7, lr}
 80024c2:	b082      	sub	sp, #8
 80024c4:	af00      	add	r7, sp, #0
 80024c6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d101      	bne.n	80024d2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80024ce:	2301      	movs	r3, #1
 80024d0:	e01d      	b.n	800250e <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80024d8:	b2db      	uxtb	r3, r3
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d106      	bne.n	80024ec <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	2200      	movs	r2, #0
 80024e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80024e6:	6878      	ldr	r0, [r7, #4]
 80024e8:	f7fe ff2c 	bl	8001344 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	2202      	movs	r2, #2
 80024f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681a      	ldr	r2, [r3, #0]
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	3304      	adds	r3, #4
 80024fc:	4619      	mov	r1, r3
 80024fe:	4610      	mov	r0, r2
 8002500:	f000 fa14 	bl	800292c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	2201      	movs	r2, #1
 8002508:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800250c:	2300      	movs	r3, #0
}
 800250e:	4618      	mov	r0, r3
 8002510:	3708      	adds	r7, #8
 8002512:	46bd      	mov	sp, r7
 8002514:	bd80      	pop	{r7, pc}

08002516 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002516:	b480      	push	{r7}
 8002518:	b085      	sub	sp, #20
 800251a:	af00      	add	r7, sp, #0
 800251c:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	68da      	ldr	r2, [r3, #12]
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	f042 0201 	orr.w	r2, r2, #1
 800252c:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	689b      	ldr	r3, [r3, #8]
 8002534:	f003 0307 	and.w	r3, r3, #7
 8002538:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	2b06      	cmp	r3, #6
 800253e:	d007      	beq.n	8002550 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	681a      	ldr	r2, [r3, #0]
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	f042 0201 	orr.w	r2, r2, #1
 800254e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002550:	2300      	movs	r3, #0
}
 8002552:	4618      	mov	r0, r3
 8002554:	3714      	adds	r7, #20
 8002556:	46bd      	mov	sp, r7
 8002558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800255c:	4770      	bx	lr

0800255e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800255e:	b580      	push	{r7, lr}
 8002560:	b082      	sub	sp, #8
 8002562:	af00      	add	r7, sp, #0
 8002564:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	691b      	ldr	r3, [r3, #16]
 800256c:	f003 0302 	and.w	r3, r3, #2
 8002570:	2b02      	cmp	r3, #2
 8002572:	d122      	bne.n	80025ba <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	68db      	ldr	r3, [r3, #12]
 800257a:	f003 0302 	and.w	r3, r3, #2
 800257e:	2b02      	cmp	r3, #2
 8002580:	d11b      	bne.n	80025ba <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	f06f 0202 	mvn.w	r2, #2
 800258a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	2201      	movs	r2, #1
 8002590:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	699b      	ldr	r3, [r3, #24]
 8002598:	f003 0303 	and.w	r3, r3, #3
 800259c:	2b00      	cmp	r3, #0
 800259e:	d003      	beq.n	80025a8 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80025a0:	6878      	ldr	r0, [r7, #4]
 80025a2:	f000 f9a5 	bl	80028f0 <HAL_TIM_IC_CaptureCallback>
 80025a6:	e005      	b.n	80025b4 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80025a8:	6878      	ldr	r0, [r7, #4]
 80025aa:	f000 f997 	bl	80028dc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80025ae:	6878      	ldr	r0, [r7, #4]
 80025b0:	f000 f9a8 	bl	8002904 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	2200      	movs	r2, #0
 80025b8:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	691b      	ldr	r3, [r3, #16]
 80025c0:	f003 0304 	and.w	r3, r3, #4
 80025c4:	2b04      	cmp	r3, #4
 80025c6:	d122      	bne.n	800260e <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	68db      	ldr	r3, [r3, #12]
 80025ce:	f003 0304 	and.w	r3, r3, #4
 80025d2:	2b04      	cmp	r3, #4
 80025d4:	d11b      	bne.n	800260e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	f06f 0204 	mvn.w	r2, #4
 80025de:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	2202      	movs	r2, #2
 80025e4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	699b      	ldr	r3, [r3, #24]
 80025ec:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d003      	beq.n	80025fc <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80025f4:	6878      	ldr	r0, [r7, #4]
 80025f6:	f000 f97b 	bl	80028f0 <HAL_TIM_IC_CaptureCallback>
 80025fa:	e005      	b.n	8002608 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80025fc:	6878      	ldr	r0, [r7, #4]
 80025fe:	f000 f96d 	bl	80028dc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002602:	6878      	ldr	r0, [r7, #4]
 8002604:	f000 f97e 	bl	8002904 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	2200      	movs	r2, #0
 800260c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	691b      	ldr	r3, [r3, #16]
 8002614:	f003 0308 	and.w	r3, r3, #8
 8002618:	2b08      	cmp	r3, #8
 800261a:	d122      	bne.n	8002662 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	68db      	ldr	r3, [r3, #12]
 8002622:	f003 0308 	and.w	r3, r3, #8
 8002626:	2b08      	cmp	r3, #8
 8002628:	d11b      	bne.n	8002662 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	f06f 0208 	mvn.w	r2, #8
 8002632:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	2204      	movs	r2, #4
 8002638:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	69db      	ldr	r3, [r3, #28]
 8002640:	f003 0303 	and.w	r3, r3, #3
 8002644:	2b00      	cmp	r3, #0
 8002646:	d003      	beq.n	8002650 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002648:	6878      	ldr	r0, [r7, #4]
 800264a:	f000 f951 	bl	80028f0 <HAL_TIM_IC_CaptureCallback>
 800264e:	e005      	b.n	800265c <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002650:	6878      	ldr	r0, [r7, #4]
 8002652:	f000 f943 	bl	80028dc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002656:	6878      	ldr	r0, [r7, #4]
 8002658:	f000 f954 	bl	8002904 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	2200      	movs	r2, #0
 8002660:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	691b      	ldr	r3, [r3, #16]
 8002668:	f003 0310 	and.w	r3, r3, #16
 800266c:	2b10      	cmp	r3, #16
 800266e:	d122      	bne.n	80026b6 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	68db      	ldr	r3, [r3, #12]
 8002676:	f003 0310 	and.w	r3, r3, #16
 800267a:	2b10      	cmp	r3, #16
 800267c:	d11b      	bne.n	80026b6 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	f06f 0210 	mvn.w	r2, #16
 8002686:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	2208      	movs	r2, #8
 800268c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	69db      	ldr	r3, [r3, #28]
 8002694:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002698:	2b00      	cmp	r3, #0
 800269a:	d003      	beq.n	80026a4 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800269c:	6878      	ldr	r0, [r7, #4]
 800269e:	f000 f927 	bl	80028f0 <HAL_TIM_IC_CaptureCallback>
 80026a2:	e005      	b.n	80026b0 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80026a4:	6878      	ldr	r0, [r7, #4]
 80026a6:	f000 f919 	bl	80028dc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80026aa:	6878      	ldr	r0, [r7, #4]
 80026ac:	f000 f92a 	bl	8002904 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	2200      	movs	r2, #0
 80026b4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	691b      	ldr	r3, [r3, #16]
 80026bc:	f003 0301 	and.w	r3, r3, #1
 80026c0:	2b01      	cmp	r3, #1
 80026c2:	d10e      	bne.n	80026e2 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	68db      	ldr	r3, [r3, #12]
 80026ca:	f003 0301 	and.w	r3, r3, #1
 80026ce:	2b01      	cmp	r3, #1
 80026d0:	d107      	bne.n	80026e2 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	f06f 0201 	mvn.w	r2, #1
 80026da:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80026dc:	6878      	ldr	r0, [r7, #4]
 80026de:	f7fe fad1 	bl	8000c84 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	691b      	ldr	r3, [r3, #16]
 80026e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80026ec:	2b80      	cmp	r3, #128	; 0x80
 80026ee:	d10e      	bne.n	800270e <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	68db      	ldr	r3, [r3, #12]
 80026f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80026fa:	2b80      	cmp	r3, #128	; 0x80
 80026fc:	d107      	bne.n	800270e <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002706:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002708:	6878      	ldr	r0, [r7, #4]
 800270a:	f000 faa1 	bl	8002c50 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	691b      	ldr	r3, [r3, #16]
 8002714:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002718:	2b40      	cmp	r3, #64	; 0x40
 800271a:	d10e      	bne.n	800273a <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	68db      	ldr	r3, [r3, #12]
 8002722:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002726:	2b40      	cmp	r3, #64	; 0x40
 8002728:	d107      	bne.n	800273a <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002732:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002734:	6878      	ldr	r0, [r7, #4]
 8002736:	f000 f8ef 	bl	8002918 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	691b      	ldr	r3, [r3, #16]
 8002740:	f003 0320 	and.w	r3, r3, #32
 8002744:	2b20      	cmp	r3, #32
 8002746:	d10e      	bne.n	8002766 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	68db      	ldr	r3, [r3, #12]
 800274e:	f003 0320 	and.w	r3, r3, #32
 8002752:	2b20      	cmp	r3, #32
 8002754:	d107      	bne.n	8002766 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f06f 0220 	mvn.w	r2, #32
 800275e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002760:	6878      	ldr	r0, [r7, #4]
 8002762:	f000 fa6b 	bl	8002c3c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002766:	bf00      	nop
 8002768:	3708      	adds	r7, #8
 800276a:	46bd      	mov	sp, r7
 800276c:	bd80      	pop	{r7, pc}

0800276e <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800276e:	b580      	push	{r7, lr}
 8002770:	b084      	sub	sp, #16
 8002772:	af00      	add	r7, sp, #0
 8002774:	6078      	str	r0, [r7, #4]
 8002776:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800277e:	2b01      	cmp	r3, #1
 8002780:	d101      	bne.n	8002786 <HAL_TIM_ConfigClockSource+0x18>
 8002782:	2302      	movs	r3, #2
 8002784:	e0a6      	b.n	80028d4 <HAL_TIM_ConfigClockSource+0x166>
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	2201      	movs	r2, #1
 800278a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	2202      	movs	r2, #2
 8002792:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	689b      	ldr	r3, [r3, #8]
 800279c:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80027a4:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80027ac:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	68fa      	ldr	r2, [r7, #12]
 80027b4:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80027b6:	683b      	ldr	r3, [r7, #0]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	2b40      	cmp	r3, #64	; 0x40
 80027bc:	d067      	beq.n	800288e <HAL_TIM_ConfigClockSource+0x120>
 80027be:	2b40      	cmp	r3, #64	; 0x40
 80027c0:	d80b      	bhi.n	80027da <HAL_TIM_ConfigClockSource+0x6c>
 80027c2:	2b10      	cmp	r3, #16
 80027c4:	d073      	beq.n	80028ae <HAL_TIM_ConfigClockSource+0x140>
 80027c6:	2b10      	cmp	r3, #16
 80027c8:	d802      	bhi.n	80027d0 <HAL_TIM_ConfigClockSource+0x62>
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d06f      	beq.n	80028ae <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 80027ce:	e078      	b.n	80028c2 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80027d0:	2b20      	cmp	r3, #32
 80027d2:	d06c      	beq.n	80028ae <HAL_TIM_ConfigClockSource+0x140>
 80027d4:	2b30      	cmp	r3, #48	; 0x30
 80027d6:	d06a      	beq.n	80028ae <HAL_TIM_ConfigClockSource+0x140>
      break;
 80027d8:	e073      	b.n	80028c2 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80027da:	2b70      	cmp	r3, #112	; 0x70
 80027dc:	d00d      	beq.n	80027fa <HAL_TIM_ConfigClockSource+0x8c>
 80027de:	2b70      	cmp	r3, #112	; 0x70
 80027e0:	d804      	bhi.n	80027ec <HAL_TIM_ConfigClockSource+0x7e>
 80027e2:	2b50      	cmp	r3, #80	; 0x50
 80027e4:	d033      	beq.n	800284e <HAL_TIM_ConfigClockSource+0xe0>
 80027e6:	2b60      	cmp	r3, #96	; 0x60
 80027e8:	d041      	beq.n	800286e <HAL_TIM_ConfigClockSource+0x100>
      break;
 80027ea:	e06a      	b.n	80028c2 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80027ec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80027f0:	d066      	beq.n	80028c0 <HAL_TIM_ConfigClockSource+0x152>
 80027f2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80027f6:	d017      	beq.n	8002828 <HAL_TIM_ConfigClockSource+0xba>
      break;
 80027f8:	e063      	b.n	80028c2 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	6818      	ldr	r0, [r3, #0]
 80027fe:	683b      	ldr	r3, [r7, #0]
 8002800:	6899      	ldr	r1, [r3, #8]
 8002802:	683b      	ldr	r3, [r7, #0]
 8002804:	685a      	ldr	r2, [r3, #4]
 8002806:	683b      	ldr	r3, [r7, #0]
 8002808:	68db      	ldr	r3, [r3, #12]
 800280a:	f000 f989 	bl	8002b20 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	689b      	ldr	r3, [r3, #8]
 8002814:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800281c:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	68fa      	ldr	r2, [r7, #12]
 8002824:	609a      	str	r2, [r3, #8]
      break;
 8002826:	e04c      	b.n	80028c2 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	6818      	ldr	r0, [r3, #0]
 800282c:	683b      	ldr	r3, [r7, #0]
 800282e:	6899      	ldr	r1, [r3, #8]
 8002830:	683b      	ldr	r3, [r7, #0]
 8002832:	685a      	ldr	r2, [r3, #4]
 8002834:	683b      	ldr	r3, [r7, #0]
 8002836:	68db      	ldr	r3, [r3, #12]
 8002838:	f000 f972 	bl	8002b20 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	689a      	ldr	r2, [r3, #8]
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800284a:	609a      	str	r2, [r3, #8]
      break;
 800284c:	e039      	b.n	80028c2 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	6818      	ldr	r0, [r3, #0]
 8002852:	683b      	ldr	r3, [r7, #0]
 8002854:	6859      	ldr	r1, [r3, #4]
 8002856:	683b      	ldr	r3, [r7, #0]
 8002858:	68db      	ldr	r3, [r3, #12]
 800285a:	461a      	mov	r2, r3
 800285c:	f000 f8e6 	bl	8002a2c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	2150      	movs	r1, #80	; 0x50
 8002866:	4618      	mov	r0, r3
 8002868:	f000 f93f 	bl	8002aea <TIM_ITRx_SetConfig>
      break;
 800286c:	e029      	b.n	80028c2 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	6818      	ldr	r0, [r3, #0]
 8002872:	683b      	ldr	r3, [r7, #0]
 8002874:	6859      	ldr	r1, [r3, #4]
 8002876:	683b      	ldr	r3, [r7, #0]
 8002878:	68db      	ldr	r3, [r3, #12]
 800287a:	461a      	mov	r2, r3
 800287c:	f000 f905 	bl	8002a8a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	2160      	movs	r1, #96	; 0x60
 8002886:	4618      	mov	r0, r3
 8002888:	f000 f92f 	bl	8002aea <TIM_ITRx_SetConfig>
      break;
 800288c:	e019      	b.n	80028c2 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	6818      	ldr	r0, [r3, #0]
 8002892:	683b      	ldr	r3, [r7, #0]
 8002894:	6859      	ldr	r1, [r3, #4]
 8002896:	683b      	ldr	r3, [r7, #0]
 8002898:	68db      	ldr	r3, [r3, #12]
 800289a:	461a      	mov	r2, r3
 800289c:	f000 f8c6 	bl	8002a2c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	2140      	movs	r1, #64	; 0x40
 80028a6:	4618      	mov	r0, r3
 80028a8:	f000 f91f 	bl	8002aea <TIM_ITRx_SetConfig>
      break;
 80028ac:	e009      	b.n	80028c2 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681a      	ldr	r2, [r3, #0]
 80028b2:	683b      	ldr	r3, [r7, #0]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	4619      	mov	r1, r3
 80028b8:	4610      	mov	r0, r2
 80028ba:	f000 f916 	bl	8002aea <TIM_ITRx_SetConfig>
      break;
 80028be:	e000      	b.n	80028c2 <HAL_TIM_ConfigClockSource+0x154>
      break;
 80028c0:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	2201      	movs	r2, #1
 80028c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	2200      	movs	r2, #0
 80028ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80028d2:	2300      	movs	r3, #0
}
 80028d4:	4618      	mov	r0, r3
 80028d6:	3710      	adds	r7, #16
 80028d8:	46bd      	mov	sp, r7
 80028da:	bd80      	pop	{r7, pc}

080028dc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80028dc:	b480      	push	{r7}
 80028de:	b083      	sub	sp, #12
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80028e4:	bf00      	nop
 80028e6:	370c      	adds	r7, #12
 80028e8:	46bd      	mov	sp, r7
 80028ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ee:	4770      	bx	lr

080028f0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80028f0:	b480      	push	{r7}
 80028f2:	b083      	sub	sp, #12
 80028f4:	af00      	add	r7, sp, #0
 80028f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80028f8:	bf00      	nop
 80028fa:	370c      	adds	r7, #12
 80028fc:	46bd      	mov	sp, r7
 80028fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002902:	4770      	bx	lr

08002904 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002904:	b480      	push	{r7}
 8002906:	b083      	sub	sp, #12
 8002908:	af00      	add	r7, sp, #0
 800290a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800290c:	bf00      	nop
 800290e:	370c      	adds	r7, #12
 8002910:	46bd      	mov	sp, r7
 8002912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002916:	4770      	bx	lr

08002918 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002918:	b480      	push	{r7}
 800291a:	b083      	sub	sp, #12
 800291c:	af00      	add	r7, sp, #0
 800291e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002920:	bf00      	nop
 8002922:	370c      	adds	r7, #12
 8002924:	46bd      	mov	sp, r7
 8002926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800292a:	4770      	bx	lr

0800292c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800292c:	b480      	push	{r7}
 800292e:	b085      	sub	sp, #20
 8002930:	af00      	add	r7, sp, #0
 8002932:	6078      	str	r0, [r7, #4]
 8002934:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	4a34      	ldr	r2, [pc, #208]	; (8002a10 <TIM_Base_SetConfig+0xe4>)
 8002940:	4293      	cmp	r3, r2
 8002942:	d00f      	beq.n	8002964 <TIM_Base_SetConfig+0x38>
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800294a:	d00b      	beq.n	8002964 <TIM_Base_SetConfig+0x38>
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	4a31      	ldr	r2, [pc, #196]	; (8002a14 <TIM_Base_SetConfig+0xe8>)
 8002950:	4293      	cmp	r3, r2
 8002952:	d007      	beq.n	8002964 <TIM_Base_SetConfig+0x38>
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	4a30      	ldr	r2, [pc, #192]	; (8002a18 <TIM_Base_SetConfig+0xec>)
 8002958:	4293      	cmp	r3, r2
 800295a:	d003      	beq.n	8002964 <TIM_Base_SetConfig+0x38>
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	4a2f      	ldr	r2, [pc, #188]	; (8002a1c <TIM_Base_SetConfig+0xf0>)
 8002960:	4293      	cmp	r3, r2
 8002962:	d108      	bne.n	8002976 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800296a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800296c:	683b      	ldr	r3, [r7, #0]
 800296e:	685b      	ldr	r3, [r3, #4]
 8002970:	68fa      	ldr	r2, [r7, #12]
 8002972:	4313      	orrs	r3, r2
 8002974:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	4a25      	ldr	r2, [pc, #148]	; (8002a10 <TIM_Base_SetConfig+0xe4>)
 800297a:	4293      	cmp	r3, r2
 800297c:	d01b      	beq.n	80029b6 <TIM_Base_SetConfig+0x8a>
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002984:	d017      	beq.n	80029b6 <TIM_Base_SetConfig+0x8a>
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	4a22      	ldr	r2, [pc, #136]	; (8002a14 <TIM_Base_SetConfig+0xe8>)
 800298a:	4293      	cmp	r3, r2
 800298c:	d013      	beq.n	80029b6 <TIM_Base_SetConfig+0x8a>
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	4a21      	ldr	r2, [pc, #132]	; (8002a18 <TIM_Base_SetConfig+0xec>)
 8002992:	4293      	cmp	r3, r2
 8002994:	d00f      	beq.n	80029b6 <TIM_Base_SetConfig+0x8a>
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	4a20      	ldr	r2, [pc, #128]	; (8002a1c <TIM_Base_SetConfig+0xf0>)
 800299a:	4293      	cmp	r3, r2
 800299c:	d00b      	beq.n	80029b6 <TIM_Base_SetConfig+0x8a>
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	4a1f      	ldr	r2, [pc, #124]	; (8002a20 <TIM_Base_SetConfig+0xf4>)
 80029a2:	4293      	cmp	r3, r2
 80029a4:	d007      	beq.n	80029b6 <TIM_Base_SetConfig+0x8a>
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	4a1e      	ldr	r2, [pc, #120]	; (8002a24 <TIM_Base_SetConfig+0xf8>)
 80029aa:	4293      	cmp	r3, r2
 80029ac:	d003      	beq.n	80029b6 <TIM_Base_SetConfig+0x8a>
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	4a1d      	ldr	r2, [pc, #116]	; (8002a28 <TIM_Base_SetConfig+0xfc>)
 80029b2:	4293      	cmp	r3, r2
 80029b4:	d108      	bne.n	80029c8 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80029bc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80029be:	683b      	ldr	r3, [r7, #0]
 80029c0:	68db      	ldr	r3, [r3, #12]
 80029c2:	68fa      	ldr	r2, [r7, #12]
 80029c4:	4313      	orrs	r3, r2
 80029c6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80029ce:	683b      	ldr	r3, [r7, #0]
 80029d0:	695b      	ldr	r3, [r3, #20]
 80029d2:	4313      	orrs	r3, r2
 80029d4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	68fa      	ldr	r2, [r7, #12]
 80029da:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80029dc:	683b      	ldr	r3, [r7, #0]
 80029de:	689a      	ldr	r2, [r3, #8]
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80029e4:	683b      	ldr	r3, [r7, #0]
 80029e6:	681a      	ldr	r2, [r3, #0]
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	4a08      	ldr	r2, [pc, #32]	; (8002a10 <TIM_Base_SetConfig+0xe4>)
 80029f0:	4293      	cmp	r3, r2
 80029f2:	d103      	bne.n	80029fc <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80029f4:	683b      	ldr	r3, [r7, #0]
 80029f6:	691a      	ldr	r2, [r3, #16]
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	2201      	movs	r2, #1
 8002a00:	615a      	str	r2, [r3, #20]
}
 8002a02:	bf00      	nop
 8002a04:	3714      	adds	r7, #20
 8002a06:	46bd      	mov	sp, r7
 8002a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a0c:	4770      	bx	lr
 8002a0e:	bf00      	nop
 8002a10:	40010000 	.word	0x40010000
 8002a14:	40000400 	.word	0x40000400
 8002a18:	40000800 	.word	0x40000800
 8002a1c:	40000c00 	.word	0x40000c00
 8002a20:	40014000 	.word	0x40014000
 8002a24:	40014400 	.word	0x40014400
 8002a28:	40014800 	.word	0x40014800

08002a2c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002a2c:	b480      	push	{r7}
 8002a2e:	b087      	sub	sp, #28
 8002a30:	af00      	add	r7, sp, #0
 8002a32:	60f8      	str	r0, [r7, #12]
 8002a34:	60b9      	str	r1, [r7, #8]
 8002a36:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	6a1b      	ldr	r3, [r3, #32]
 8002a3c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	6a1b      	ldr	r3, [r3, #32]
 8002a42:	f023 0201 	bic.w	r2, r3, #1
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	699b      	ldr	r3, [r3, #24]
 8002a4e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002a50:	693b      	ldr	r3, [r7, #16]
 8002a52:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002a56:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	011b      	lsls	r3, r3, #4
 8002a5c:	693a      	ldr	r2, [r7, #16]
 8002a5e:	4313      	orrs	r3, r2
 8002a60:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002a62:	697b      	ldr	r3, [r7, #20]
 8002a64:	f023 030a 	bic.w	r3, r3, #10
 8002a68:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002a6a:	697a      	ldr	r2, [r7, #20]
 8002a6c:	68bb      	ldr	r3, [r7, #8]
 8002a6e:	4313      	orrs	r3, r2
 8002a70:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	693a      	ldr	r2, [r7, #16]
 8002a76:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	697a      	ldr	r2, [r7, #20]
 8002a7c:	621a      	str	r2, [r3, #32]
}
 8002a7e:	bf00      	nop
 8002a80:	371c      	adds	r7, #28
 8002a82:	46bd      	mov	sp, r7
 8002a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a88:	4770      	bx	lr

08002a8a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002a8a:	b480      	push	{r7}
 8002a8c:	b087      	sub	sp, #28
 8002a8e:	af00      	add	r7, sp, #0
 8002a90:	60f8      	str	r0, [r7, #12]
 8002a92:	60b9      	str	r1, [r7, #8]
 8002a94:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	6a1b      	ldr	r3, [r3, #32]
 8002a9a:	f023 0210 	bic.w	r2, r3, #16
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	699b      	ldr	r3, [r3, #24]
 8002aa6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	6a1b      	ldr	r3, [r3, #32]
 8002aac:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002aae:	697b      	ldr	r3, [r7, #20]
 8002ab0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002ab4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	031b      	lsls	r3, r3, #12
 8002aba:	697a      	ldr	r2, [r7, #20]
 8002abc:	4313      	orrs	r3, r2
 8002abe:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002ac0:	693b      	ldr	r3, [r7, #16]
 8002ac2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002ac6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002ac8:	68bb      	ldr	r3, [r7, #8]
 8002aca:	011b      	lsls	r3, r3, #4
 8002acc:	693a      	ldr	r2, [r7, #16]
 8002ace:	4313      	orrs	r3, r2
 8002ad0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	697a      	ldr	r2, [r7, #20]
 8002ad6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	693a      	ldr	r2, [r7, #16]
 8002adc:	621a      	str	r2, [r3, #32]
}
 8002ade:	bf00      	nop
 8002ae0:	371c      	adds	r7, #28
 8002ae2:	46bd      	mov	sp, r7
 8002ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae8:	4770      	bx	lr

08002aea <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002aea:	b480      	push	{r7}
 8002aec:	b085      	sub	sp, #20
 8002aee:	af00      	add	r7, sp, #0
 8002af0:	6078      	str	r0, [r7, #4]
 8002af2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	689b      	ldr	r3, [r3, #8]
 8002af8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b00:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002b02:	683a      	ldr	r2, [r7, #0]
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	4313      	orrs	r3, r2
 8002b08:	f043 0307 	orr.w	r3, r3, #7
 8002b0c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	68fa      	ldr	r2, [r7, #12]
 8002b12:	609a      	str	r2, [r3, #8]
}
 8002b14:	bf00      	nop
 8002b16:	3714      	adds	r7, #20
 8002b18:	46bd      	mov	sp, r7
 8002b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b1e:	4770      	bx	lr

08002b20 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002b20:	b480      	push	{r7}
 8002b22:	b087      	sub	sp, #28
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	60f8      	str	r0, [r7, #12]
 8002b28:	60b9      	str	r1, [r7, #8]
 8002b2a:	607a      	str	r2, [r7, #4]
 8002b2c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	689b      	ldr	r3, [r3, #8]
 8002b32:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002b34:	697b      	ldr	r3, [r7, #20]
 8002b36:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002b3a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002b3c:	683b      	ldr	r3, [r7, #0]
 8002b3e:	021a      	lsls	r2, r3, #8
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	431a      	orrs	r2, r3
 8002b44:	68bb      	ldr	r3, [r7, #8]
 8002b46:	4313      	orrs	r3, r2
 8002b48:	697a      	ldr	r2, [r7, #20]
 8002b4a:	4313      	orrs	r3, r2
 8002b4c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	697a      	ldr	r2, [r7, #20]
 8002b52:	609a      	str	r2, [r3, #8]
}
 8002b54:	bf00      	nop
 8002b56:	371c      	adds	r7, #28
 8002b58:	46bd      	mov	sp, r7
 8002b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b5e:	4770      	bx	lr

08002b60 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002b60:	b480      	push	{r7}
 8002b62:	b085      	sub	sp, #20
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	6078      	str	r0, [r7, #4]
 8002b68:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002b70:	2b01      	cmp	r3, #1
 8002b72:	d101      	bne.n	8002b78 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002b74:	2302      	movs	r3, #2
 8002b76:	e050      	b.n	8002c1a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	2201      	movs	r2, #1
 8002b7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	2202      	movs	r2, #2
 8002b84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	685b      	ldr	r3, [r3, #4]
 8002b8e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	689b      	ldr	r3, [r3, #8]
 8002b96:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b9e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002ba0:	683b      	ldr	r3, [r7, #0]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	68fa      	ldr	r2, [r7, #12]
 8002ba6:	4313      	orrs	r3, r2
 8002ba8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	68fa      	ldr	r2, [r7, #12]
 8002bb0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	4a1c      	ldr	r2, [pc, #112]	; (8002c28 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8002bb8:	4293      	cmp	r3, r2
 8002bba:	d018      	beq.n	8002bee <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002bc4:	d013      	beq.n	8002bee <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	4a18      	ldr	r2, [pc, #96]	; (8002c2c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8002bcc:	4293      	cmp	r3, r2
 8002bce:	d00e      	beq.n	8002bee <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	4a16      	ldr	r2, [pc, #88]	; (8002c30 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8002bd6:	4293      	cmp	r3, r2
 8002bd8:	d009      	beq.n	8002bee <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	4a15      	ldr	r2, [pc, #84]	; (8002c34 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8002be0:	4293      	cmp	r3, r2
 8002be2:	d004      	beq.n	8002bee <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	4a13      	ldr	r2, [pc, #76]	; (8002c38 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8002bea:	4293      	cmp	r3, r2
 8002bec:	d10c      	bne.n	8002c08 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002bee:	68bb      	ldr	r3, [r7, #8]
 8002bf0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002bf4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002bf6:	683b      	ldr	r3, [r7, #0]
 8002bf8:	685b      	ldr	r3, [r3, #4]
 8002bfa:	68ba      	ldr	r2, [r7, #8]
 8002bfc:	4313      	orrs	r3, r2
 8002bfe:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	68ba      	ldr	r2, [r7, #8]
 8002c06:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	2201      	movs	r2, #1
 8002c0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	2200      	movs	r2, #0
 8002c14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002c18:	2300      	movs	r3, #0
}
 8002c1a:	4618      	mov	r0, r3
 8002c1c:	3714      	adds	r7, #20
 8002c1e:	46bd      	mov	sp, r7
 8002c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c24:	4770      	bx	lr
 8002c26:	bf00      	nop
 8002c28:	40010000 	.word	0x40010000
 8002c2c:	40000400 	.word	0x40000400
 8002c30:	40000800 	.word	0x40000800
 8002c34:	40000c00 	.word	0x40000c00
 8002c38:	40014000 	.word	0x40014000

08002c3c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002c3c:	b480      	push	{r7}
 8002c3e:	b083      	sub	sp, #12
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002c44:	bf00      	nop
 8002c46:	370c      	adds	r7, #12
 8002c48:	46bd      	mov	sp, r7
 8002c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c4e:	4770      	bx	lr

08002c50 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002c50:	b480      	push	{r7}
 8002c52:	b083      	sub	sp, #12
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002c58:	bf00      	nop
 8002c5a:	370c      	adds	r7, #12
 8002c5c:	46bd      	mov	sp, r7
 8002c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c62:	4770      	bx	lr

08002c64 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002c64:	b580      	push	{r7, lr}
 8002c66:	b082      	sub	sp, #8
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d101      	bne.n	8002c76 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002c72:	2301      	movs	r3, #1
 8002c74:	e03f      	b.n	8002cf6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002c7c:	b2db      	uxtb	r3, r3
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d106      	bne.n	8002c90 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	2200      	movs	r2, #0
 8002c86:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002c8a:	6878      	ldr	r0, [r7, #4]
 8002c8c:	f7fe fb82 	bl	8001394 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	2224      	movs	r2, #36	; 0x24
 8002c94:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	68da      	ldr	r2, [r3, #12]
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002ca6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002ca8:	6878      	ldr	r0, [r7, #4]
 8002caa:	f000 fb97 	bl	80033dc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	691a      	ldr	r2, [r3, #16]
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002cbc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	695a      	ldr	r2, [r3, #20]
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002ccc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	68da      	ldr	r2, [r3, #12]
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002cdc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	2200      	movs	r2, #0
 8002ce2:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	2220      	movs	r2, #32
 8002ce8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	2220      	movs	r2, #32
 8002cf0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8002cf4:	2300      	movs	r3, #0
}
 8002cf6:	4618      	mov	r0, r3
 8002cf8:	3708      	adds	r7, #8
 8002cfa:	46bd      	mov	sp, r7
 8002cfc:	bd80      	pop	{r7, pc}

08002cfe <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002cfe:	b580      	push	{r7, lr}
 8002d00:	b088      	sub	sp, #32
 8002d02:	af02      	add	r7, sp, #8
 8002d04:	60f8      	str	r0, [r7, #12]
 8002d06:	60b9      	str	r1, [r7, #8]
 8002d08:	603b      	str	r3, [r7, #0]
 8002d0a:	4613      	mov	r3, r2
 8002d0c:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8002d0e:	2300      	movs	r3, #0
 8002d10:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002d18:	b2db      	uxtb	r3, r3
 8002d1a:	2b20      	cmp	r3, #32
 8002d1c:	f040 8083 	bne.w	8002e26 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8002d20:	68bb      	ldr	r3, [r7, #8]
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d002      	beq.n	8002d2c <HAL_UART_Transmit+0x2e>
 8002d26:	88fb      	ldrh	r3, [r7, #6]
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d101      	bne.n	8002d30 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8002d2c:	2301      	movs	r3, #1
 8002d2e:	e07b      	b.n	8002e28 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002d36:	2b01      	cmp	r3, #1
 8002d38:	d101      	bne.n	8002d3e <HAL_UART_Transmit+0x40>
 8002d3a:	2302      	movs	r3, #2
 8002d3c:	e074      	b.n	8002e28 <HAL_UART_Transmit+0x12a>
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	2201      	movs	r2, #1
 8002d42:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	2200      	movs	r2, #0
 8002d4a:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	2221      	movs	r2, #33	; 0x21
 8002d50:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8002d54:	f7fe fc82 	bl	800165c <HAL_GetTick>
 8002d58:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	88fa      	ldrh	r2, [r7, #6]
 8002d5e:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	88fa      	ldrh	r2, [r7, #6]
 8002d64:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	2200      	movs	r2, #0
 8002d6a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8002d6e:	e042      	b.n	8002df6 <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002d74:	b29b      	uxth	r3, r3
 8002d76:	3b01      	subs	r3, #1
 8002d78:	b29a      	uxth	r2, r3
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	689b      	ldr	r3, [r3, #8]
 8002d82:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002d86:	d122      	bne.n	8002dce <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002d88:	683b      	ldr	r3, [r7, #0]
 8002d8a:	9300      	str	r3, [sp, #0]
 8002d8c:	697b      	ldr	r3, [r7, #20]
 8002d8e:	2200      	movs	r2, #0
 8002d90:	2180      	movs	r1, #128	; 0x80
 8002d92:	68f8      	ldr	r0, [r7, #12]
 8002d94:	f000 f9b6 	bl	8003104 <UART_WaitOnFlagUntilTimeout>
 8002d98:	4603      	mov	r3, r0
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d001      	beq.n	8002da2 <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 8002d9e:	2303      	movs	r3, #3
 8002da0:	e042      	b.n	8002e28 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8002da2:	68bb      	ldr	r3, [r7, #8]
 8002da4:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8002da6:	693b      	ldr	r3, [r7, #16]
 8002da8:	881b      	ldrh	r3, [r3, #0]
 8002daa:	461a      	mov	r2, r3
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002db4:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	691b      	ldr	r3, [r3, #16]
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d103      	bne.n	8002dc6 <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 8002dbe:	68bb      	ldr	r3, [r7, #8]
 8002dc0:	3302      	adds	r3, #2
 8002dc2:	60bb      	str	r3, [r7, #8]
 8002dc4:	e017      	b.n	8002df6 <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 8002dc6:	68bb      	ldr	r3, [r7, #8]
 8002dc8:	3301      	adds	r3, #1
 8002dca:	60bb      	str	r3, [r7, #8]
 8002dcc:	e013      	b.n	8002df6 <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002dce:	683b      	ldr	r3, [r7, #0]
 8002dd0:	9300      	str	r3, [sp, #0]
 8002dd2:	697b      	ldr	r3, [r7, #20]
 8002dd4:	2200      	movs	r2, #0
 8002dd6:	2180      	movs	r1, #128	; 0x80
 8002dd8:	68f8      	ldr	r0, [r7, #12]
 8002dda:	f000 f993 	bl	8003104 <UART_WaitOnFlagUntilTimeout>
 8002dde:	4603      	mov	r3, r0
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d001      	beq.n	8002de8 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8002de4:	2303      	movs	r3, #3
 8002de6:	e01f      	b.n	8002e28 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8002de8:	68bb      	ldr	r3, [r7, #8]
 8002dea:	1c5a      	adds	r2, r3, #1
 8002dec:	60ba      	str	r2, [r7, #8]
 8002dee:	781a      	ldrb	r2, [r3, #0]
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002dfa:	b29b      	uxth	r3, r3
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d1b7      	bne.n	8002d70 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002e00:	683b      	ldr	r3, [r7, #0]
 8002e02:	9300      	str	r3, [sp, #0]
 8002e04:	697b      	ldr	r3, [r7, #20]
 8002e06:	2200      	movs	r2, #0
 8002e08:	2140      	movs	r1, #64	; 0x40
 8002e0a:	68f8      	ldr	r0, [r7, #12]
 8002e0c:	f000 f97a 	bl	8003104 <UART_WaitOnFlagUntilTimeout>
 8002e10:	4603      	mov	r3, r0
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d001      	beq.n	8002e1a <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 8002e16:	2303      	movs	r3, #3
 8002e18:	e006      	b.n	8002e28 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	2220      	movs	r2, #32
 8002e1e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8002e22:	2300      	movs	r3, #0
 8002e24:	e000      	b.n	8002e28 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8002e26:	2302      	movs	r3, #2
  }
}
 8002e28:	4618      	mov	r0, r3
 8002e2a:	3718      	adds	r7, #24
 8002e2c:	46bd      	mov	sp, r7
 8002e2e:	bd80      	pop	{r7, pc}

08002e30 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002e30:	b480      	push	{r7}
 8002e32:	b085      	sub	sp, #20
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	60f8      	str	r0, [r7, #12]
 8002e38:	60b9      	str	r1, [r7, #8]
 8002e3a:	4613      	mov	r3, r2
 8002e3c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8002e44:	b2db      	uxtb	r3, r3
 8002e46:	2b20      	cmp	r3, #32
 8002e48:	d140      	bne.n	8002ecc <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002e4a:	68bb      	ldr	r3, [r7, #8]
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d002      	beq.n	8002e56 <HAL_UART_Receive_IT+0x26>
 8002e50:	88fb      	ldrh	r3, [r7, #6]
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d101      	bne.n	8002e5a <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8002e56:	2301      	movs	r3, #1
 8002e58:	e039      	b.n	8002ece <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002e60:	2b01      	cmp	r3, #1
 8002e62:	d101      	bne.n	8002e68 <HAL_UART_Receive_IT+0x38>
 8002e64:	2302      	movs	r3, #2
 8002e66:	e032      	b.n	8002ece <HAL_UART_Receive_IT+0x9e>
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	2201      	movs	r2, #1
 8002e6c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	68ba      	ldr	r2, [r7, #8]
 8002e74:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	88fa      	ldrh	r2, [r7, #6]
 8002e7a:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	88fa      	ldrh	r2, [r7, #6]
 8002e80:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	2200      	movs	r2, #0
 8002e86:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	2222      	movs	r2, #34	; 0x22
 8002e8c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	2200      	movs	r2, #0
 8002e94:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	68da      	ldr	r2, [r3, #12]
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002ea6:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	695a      	ldr	r2, [r3, #20]
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	f042 0201 	orr.w	r2, r2, #1
 8002eb6:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	68da      	ldr	r2, [r3, #12]
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	f042 0220 	orr.w	r2, r2, #32
 8002ec6:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8002ec8:	2300      	movs	r3, #0
 8002eca:	e000      	b.n	8002ece <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8002ecc:	2302      	movs	r3, #2
  }
}
 8002ece:	4618      	mov	r0, r3
 8002ed0:	3714      	adds	r7, #20
 8002ed2:	46bd      	mov	sp, r7
 8002ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed8:	4770      	bx	lr
	...

08002edc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002edc:	b580      	push	{r7, lr}
 8002ede:	b088      	sub	sp, #32
 8002ee0:	af00      	add	r7, sp, #0
 8002ee2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	68db      	ldr	r3, [r3, #12]
 8002ef2:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	695b      	ldr	r3, [r3, #20]
 8002efa:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8002efc:	2300      	movs	r3, #0
 8002efe:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8002f00:	2300      	movs	r3, #0
 8002f02:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002f04:	69fb      	ldr	r3, [r7, #28]
 8002f06:	f003 030f 	and.w	r3, r3, #15
 8002f0a:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8002f0c:	693b      	ldr	r3, [r7, #16]
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d10d      	bne.n	8002f2e <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002f12:	69fb      	ldr	r3, [r7, #28]
 8002f14:	f003 0320 	and.w	r3, r3, #32
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d008      	beq.n	8002f2e <HAL_UART_IRQHandler+0x52>
 8002f1c:	69bb      	ldr	r3, [r7, #24]
 8002f1e:	f003 0320 	and.w	r3, r3, #32
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d003      	beq.n	8002f2e <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8002f26:	6878      	ldr	r0, [r7, #4]
 8002f28:	f000 f9d6 	bl	80032d8 <UART_Receive_IT>
      return;
 8002f2c:	e0d1      	b.n	80030d2 <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002f2e:	693b      	ldr	r3, [r7, #16]
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	f000 80b0 	beq.w	8003096 <HAL_UART_IRQHandler+0x1ba>
 8002f36:	697b      	ldr	r3, [r7, #20]
 8002f38:	f003 0301 	and.w	r3, r3, #1
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d105      	bne.n	8002f4c <HAL_UART_IRQHandler+0x70>
 8002f40:	69bb      	ldr	r3, [r7, #24]
 8002f42:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	f000 80a5 	beq.w	8003096 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002f4c:	69fb      	ldr	r3, [r7, #28]
 8002f4e:	f003 0301 	and.w	r3, r3, #1
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d00a      	beq.n	8002f6c <HAL_UART_IRQHandler+0x90>
 8002f56:	69bb      	ldr	r3, [r7, #24]
 8002f58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d005      	beq.n	8002f6c <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f64:	f043 0201 	orr.w	r2, r3, #1
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002f6c:	69fb      	ldr	r3, [r7, #28]
 8002f6e:	f003 0304 	and.w	r3, r3, #4
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d00a      	beq.n	8002f8c <HAL_UART_IRQHandler+0xb0>
 8002f76:	697b      	ldr	r3, [r7, #20]
 8002f78:	f003 0301 	and.w	r3, r3, #1
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d005      	beq.n	8002f8c <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f84:	f043 0202 	orr.w	r2, r3, #2
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002f8c:	69fb      	ldr	r3, [r7, #28]
 8002f8e:	f003 0302 	and.w	r3, r3, #2
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d00a      	beq.n	8002fac <HAL_UART_IRQHandler+0xd0>
 8002f96:	697b      	ldr	r3, [r7, #20]
 8002f98:	f003 0301 	and.w	r3, r3, #1
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d005      	beq.n	8002fac <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002fa4:	f043 0204 	orr.w	r2, r3, #4
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8002fac:	69fb      	ldr	r3, [r7, #28]
 8002fae:	f003 0308 	and.w	r3, r3, #8
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d00f      	beq.n	8002fd6 <HAL_UART_IRQHandler+0xfa>
 8002fb6:	69bb      	ldr	r3, [r7, #24]
 8002fb8:	f003 0320 	and.w	r3, r3, #32
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d104      	bne.n	8002fca <HAL_UART_IRQHandler+0xee>
 8002fc0:	697b      	ldr	r3, [r7, #20]
 8002fc2:	f003 0301 	and.w	r3, r3, #1
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d005      	beq.n	8002fd6 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002fce:	f043 0208 	orr.w	r2, r3, #8
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d078      	beq.n	80030d0 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002fde:	69fb      	ldr	r3, [r7, #28]
 8002fe0:	f003 0320 	and.w	r3, r3, #32
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d007      	beq.n	8002ff8 <HAL_UART_IRQHandler+0x11c>
 8002fe8:	69bb      	ldr	r3, [r7, #24]
 8002fea:	f003 0320 	and.w	r3, r3, #32
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d002      	beq.n	8002ff8 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8002ff2:	6878      	ldr	r0, [r7, #4]
 8002ff4:	f000 f970 	bl	80032d8 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	695b      	ldr	r3, [r3, #20]
 8002ffe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003002:	2b40      	cmp	r3, #64	; 0x40
 8003004:	bf0c      	ite	eq
 8003006:	2301      	moveq	r3, #1
 8003008:	2300      	movne	r3, #0
 800300a:	b2db      	uxtb	r3, r3
 800300c:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003012:	f003 0308 	and.w	r3, r3, #8
 8003016:	2b00      	cmp	r3, #0
 8003018:	d102      	bne.n	8003020 <HAL_UART_IRQHandler+0x144>
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	2b00      	cmp	r3, #0
 800301e:	d031      	beq.n	8003084 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003020:	6878      	ldr	r0, [r7, #4]
 8003022:	f000 f8b9 	bl	8003198 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	695b      	ldr	r3, [r3, #20]
 800302c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003030:	2b40      	cmp	r3, #64	; 0x40
 8003032:	d123      	bne.n	800307c <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	695a      	ldr	r2, [r3, #20]
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003042:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003048:	2b00      	cmp	r3, #0
 800304a:	d013      	beq.n	8003074 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003050:	4a21      	ldr	r2, [pc, #132]	; (80030d8 <HAL_UART_IRQHandler+0x1fc>)
 8003052:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003058:	4618      	mov	r0, r3
 800305a:	f7fe fc1c 	bl	8001896 <HAL_DMA_Abort_IT>
 800305e:	4603      	mov	r3, r0
 8003060:	2b00      	cmp	r3, #0
 8003062:	d016      	beq.n	8003092 <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003068:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800306a:	687a      	ldr	r2, [r7, #4]
 800306c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800306e:	4610      	mov	r0, r2
 8003070:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003072:	e00e      	b.n	8003092 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003074:	6878      	ldr	r0, [r7, #4]
 8003076:	f000 f83b 	bl	80030f0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800307a:	e00a      	b.n	8003092 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800307c:	6878      	ldr	r0, [r7, #4]
 800307e:	f000 f837 	bl	80030f0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003082:	e006      	b.n	8003092 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003084:	6878      	ldr	r0, [r7, #4]
 8003086:	f000 f833 	bl	80030f0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	2200      	movs	r2, #0
 800308e:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8003090:	e01e      	b.n	80030d0 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003092:	bf00      	nop
    return;
 8003094:	e01c      	b.n	80030d0 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003096:	69fb      	ldr	r3, [r7, #28]
 8003098:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800309c:	2b00      	cmp	r3, #0
 800309e:	d008      	beq.n	80030b2 <HAL_UART_IRQHandler+0x1d6>
 80030a0:	69bb      	ldr	r3, [r7, #24]
 80030a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d003      	beq.n	80030b2 <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 80030aa:	6878      	ldr	r0, [r7, #4]
 80030ac:	f000 f8a6 	bl	80031fc <UART_Transmit_IT>
    return;
 80030b0:	e00f      	b.n	80030d2 <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80030b2:	69fb      	ldr	r3, [r7, #28]
 80030b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d00a      	beq.n	80030d2 <HAL_UART_IRQHandler+0x1f6>
 80030bc:	69bb      	ldr	r3, [r7, #24]
 80030be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d005      	beq.n	80030d2 <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 80030c6:	6878      	ldr	r0, [r7, #4]
 80030c8:	f000 f8ee 	bl	80032a8 <UART_EndTransmit_IT>
    return;
 80030cc:	bf00      	nop
 80030ce:	e000      	b.n	80030d2 <HAL_UART_IRQHandler+0x1f6>
    return;
 80030d0:	bf00      	nop
  }
}
 80030d2:	3720      	adds	r7, #32
 80030d4:	46bd      	mov	sp, r7
 80030d6:	bd80      	pop	{r7, pc}
 80030d8:	080031d5 	.word	0x080031d5

080030dc <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80030dc:	b480      	push	{r7}
 80030de:	b083      	sub	sp, #12
 80030e0:	af00      	add	r7, sp, #0
 80030e2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80030e4:	bf00      	nop
 80030e6:	370c      	adds	r7, #12
 80030e8:	46bd      	mov	sp, r7
 80030ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ee:	4770      	bx	lr

080030f0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80030f0:	b480      	push	{r7}
 80030f2:	b083      	sub	sp, #12
 80030f4:	af00      	add	r7, sp, #0
 80030f6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80030f8:	bf00      	nop
 80030fa:	370c      	adds	r7, #12
 80030fc:	46bd      	mov	sp, r7
 80030fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003102:	4770      	bx	lr

08003104 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8003104:	b580      	push	{r7, lr}
 8003106:	b084      	sub	sp, #16
 8003108:	af00      	add	r7, sp, #0
 800310a:	60f8      	str	r0, [r7, #12]
 800310c:	60b9      	str	r1, [r7, #8]
 800310e:	603b      	str	r3, [r7, #0]
 8003110:	4613      	mov	r3, r2
 8003112:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003114:	e02c      	b.n	8003170 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003116:	69bb      	ldr	r3, [r7, #24]
 8003118:	f1b3 3fff 	cmp.w	r3, #4294967295
 800311c:	d028      	beq.n	8003170 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800311e:	69bb      	ldr	r3, [r7, #24]
 8003120:	2b00      	cmp	r3, #0
 8003122:	d007      	beq.n	8003134 <UART_WaitOnFlagUntilTimeout+0x30>
 8003124:	f7fe fa9a 	bl	800165c <HAL_GetTick>
 8003128:	4602      	mov	r2, r0
 800312a:	683b      	ldr	r3, [r7, #0]
 800312c:	1ad3      	subs	r3, r2, r3
 800312e:	69ba      	ldr	r2, [r7, #24]
 8003130:	429a      	cmp	r2, r3
 8003132:	d21d      	bcs.n	8003170 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	68da      	ldr	r2, [r3, #12]
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003142:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	695a      	ldr	r2, [r3, #20]
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	f022 0201 	bic.w	r2, r2, #1
 8003152:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	2220      	movs	r2, #32
 8003158:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	2220      	movs	r2, #32
 8003160:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	2200      	movs	r2, #0
 8003168:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 800316c:	2303      	movs	r3, #3
 800316e:	e00f      	b.n	8003190 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	681a      	ldr	r2, [r3, #0]
 8003176:	68bb      	ldr	r3, [r7, #8]
 8003178:	4013      	ands	r3, r2
 800317a:	68ba      	ldr	r2, [r7, #8]
 800317c:	429a      	cmp	r2, r3
 800317e:	bf0c      	ite	eq
 8003180:	2301      	moveq	r3, #1
 8003182:	2300      	movne	r3, #0
 8003184:	b2db      	uxtb	r3, r3
 8003186:	461a      	mov	r2, r3
 8003188:	79fb      	ldrb	r3, [r7, #7]
 800318a:	429a      	cmp	r2, r3
 800318c:	d0c3      	beq.n	8003116 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800318e:	2300      	movs	r3, #0
}
 8003190:	4618      	mov	r0, r3
 8003192:	3710      	adds	r7, #16
 8003194:	46bd      	mov	sp, r7
 8003196:	bd80      	pop	{r7, pc}

08003198 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003198:	b480      	push	{r7}
 800319a:	b083      	sub	sp, #12
 800319c:	af00      	add	r7, sp, #0
 800319e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	68da      	ldr	r2, [r3, #12]
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80031ae:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	695a      	ldr	r2, [r3, #20]
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	f022 0201 	bic.w	r2, r2, #1
 80031be:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	2220      	movs	r2, #32
 80031c4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 80031c8:	bf00      	nop
 80031ca:	370c      	adds	r7, #12
 80031cc:	46bd      	mov	sp, r7
 80031ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d2:	4770      	bx	lr

080031d4 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80031d4:	b580      	push	{r7, lr}
 80031d6:	b084      	sub	sp, #16
 80031d8:	af00      	add	r7, sp, #0
 80031da:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031e0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	2200      	movs	r2, #0
 80031e6:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	2200      	movs	r2, #0
 80031ec:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80031ee:	68f8      	ldr	r0, [r7, #12]
 80031f0:	f7ff ff7e 	bl	80030f0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80031f4:	bf00      	nop
 80031f6:	3710      	adds	r7, #16
 80031f8:	46bd      	mov	sp, r7
 80031fa:	bd80      	pop	{r7, pc}

080031fc <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80031fc:	b480      	push	{r7}
 80031fe:	b085      	sub	sp, #20
 8003200:	af00      	add	r7, sp, #0
 8003202:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800320a:	b2db      	uxtb	r3, r3
 800320c:	2b21      	cmp	r3, #33	; 0x21
 800320e:	d144      	bne.n	800329a <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	689b      	ldr	r3, [r3, #8]
 8003214:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003218:	d11a      	bne.n	8003250 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	6a1b      	ldr	r3, [r3, #32]
 800321e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	881b      	ldrh	r3, [r3, #0]
 8003224:	461a      	mov	r2, r3
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800322e:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	691b      	ldr	r3, [r3, #16]
 8003234:	2b00      	cmp	r3, #0
 8003236:	d105      	bne.n	8003244 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	6a1b      	ldr	r3, [r3, #32]
 800323c:	1c9a      	adds	r2, r3, #2
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	621a      	str	r2, [r3, #32]
 8003242:	e00e      	b.n	8003262 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	6a1b      	ldr	r3, [r3, #32]
 8003248:	1c5a      	adds	r2, r3, #1
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	621a      	str	r2, [r3, #32]
 800324e:	e008      	b.n	8003262 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	6a1b      	ldr	r3, [r3, #32]
 8003254:	1c59      	adds	r1, r3, #1
 8003256:	687a      	ldr	r2, [r7, #4]
 8003258:	6211      	str	r1, [r2, #32]
 800325a:	781a      	ldrb	r2, [r3, #0]
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003266:	b29b      	uxth	r3, r3
 8003268:	3b01      	subs	r3, #1
 800326a:	b29b      	uxth	r3, r3
 800326c:	687a      	ldr	r2, [r7, #4]
 800326e:	4619      	mov	r1, r3
 8003270:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003272:	2b00      	cmp	r3, #0
 8003274:	d10f      	bne.n	8003296 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	68da      	ldr	r2, [r3, #12]
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003284:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	68da      	ldr	r2, [r3, #12]
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003294:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003296:	2300      	movs	r3, #0
 8003298:	e000      	b.n	800329c <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800329a:	2302      	movs	r3, #2
  }
}
 800329c:	4618      	mov	r0, r3
 800329e:	3714      	adds	r7, #20
 80032a0:	46bd      	mov	sp, r7
 80032a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a6:	4770      	bx	lr

080032a8 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80032a8:	b580      	push	{r7, lr}
 80032aa:	b082      	sub	sp, #8
 80032ac:	af00      	add	r7, sp, #0
 80032ae:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	68da      	ldr	r2, [r3, #12]
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80032be:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	2220      	movs	r2, #32
 80032c4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80032c8:	6878      	ldr	r0, [r7, #4]
 80032ca:	f7ff ff07 	bl	80030dc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80032ce:	2300      	movs	r3, #0
}
 80032d0:	4618      	mov	r0, r3
 80032d2:	3708      	adds	r7, #8
 80032d4:	46bd      	mov	sp, r7
 80032d6:	bd80      	pop	{r7, pc}

080032d8 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80032d8:	b580      	push	{r7, lr}
 80032da:	b084      	sub	sp, #16
 80032dc:	af00      	add	r7, sp, #0
 80032de:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80032e6:	b2db      	uxtb	r3, r3
 80032e8:	2b22      	cmp	r3, #34	; 0x22
 80032ea:	d171      	bne.n	80033d0 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	689b      	ldr	r3, [r3, #8]
 80032f0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80032f4:	d123      	bne.n	800333e <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032fa:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	691b      	ldr	r3, [r3, #16]
 8003300:	2b00      	cmp	r3, #0
 8003302:	d10e      	bne.n	8003322 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	685b      	ldr	r3, [r3, #4]
 800330a:	b29b      	uxth	r3, r3
 800330c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003310:	b29a      	uxth	r2, r3
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800331a:	1c9a      	adds	r2, r3, #2
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	629a      	str	r2, [r3, #40]	; 0x28
 8003320:	e029      	b.n	8003376 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	685b      	ldr	r3, [r3, #4]
 8003328:	b29b      	uxth	r3, r3
 800332a:	b2db      	uxtb	r3, r3
 800332c:	b29a      	uxth	r2, r3
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003336:	1c5a      	adds	r2, r3, #1
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	629a      	str	r2, [r3, #40]	; 0x28
 800333c:	e01b      	b.n	8003376 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	691b      	ldr	r3, [r3, #16]
 8003342:	2b00      	cmp	r3, #0
 8003344:	d10a      	bne.n	800335c <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	6858      	ldr	r0, [r3, #4]
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003350:	1c59      	adds	r1, r3, #1
 8003352:	687a      	ldr	r2, [r7, #4]
 8003354:	6291      	str	r1, [r2, #40]	; 0x28
 8003356:	b2c2      	uxtb	r2, r0
 8003358:	701a      	strb	r2, [r3, #0]
 800335a:	e00c      	b.n	8003376 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	685b      	ldr	r3, [r3, #4]
 8003362:	b2da      	uxtb	r2, r3
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003368:	1c58      	adds	r0, r3, #1
 800336a:	6879      	ldr	r1, [r7, #4]
 800336c:	6288      	str	r0, [r1, #40]	; 0x28
 800336e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003372:	b2d2      	uxtb	r2, r2
 8003374:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800337a:	b29b      	uxth	r3, r3
 800337c:	3b01      	subs	r3, #1
 800337e:	b29b      	uxth	r3, r3
 8003380:	687a      	ldr	r2, [r7, #4]
 8003382:	4619      	mov	r1, r3
 8003384:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003386:	2b00      	cmp	r3, #0
 8003388:	d120      	bne.n	80033cc <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	68da      	ldr	r2, [r3, #12]
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	f022 0220 	bic.w	r2, r2, #32
 8003398:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	68da      	ldr	r2, [r3, #12]
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80033a8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	695a      	ldr	r2, [r3, #20]
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	f022 0201 	bic.w	r2, r2, #1
 80033b8:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	2220      	movs	r2, #32
 80033be:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 80033c2:	6878      	ldr	r0, [r7, #4]
 80033c4:	f7fd ff00 	bl	80011c8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 80033c8:	2300      	movs	r3, #0
 80033ca:	e002      	b.n	80033d2 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 80033cc:	2300      	movs	r3, #0
 80033ce:	e000      	b.n	80033d2 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 80033d0:	2302      	movs	r3, #2
  }
}
 80033d2:	4618      	mov	r0, r3
 80033d4:	3710      	adds	r7, #16
 80033d6:	46bd      	mov	sp, r7
 80033d8:	bd80      	pop	{r7, pc}
	...

080033dc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80033dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80033e0:	b085      	sub	sp, #20
 80033e2:	af00      	add	r7, sp, #0
 80033e4:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	691b      	ldr	r3, [r3, #16]
 80033ec:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	68da      	ldr	r2, [r3, #12]
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	430a      	orrs	r2, r1
 80033fa:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	689a      	ldr	r2, [r3, #8]
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	691b      	ldr	r3, [r3, #16]
 8003404:	431a      	orrs	r2, r3
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	695b      	ldr	r3, [r3, #20]
 800340a:	431a      	orrs	r2, r3
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	69db      	ldr	r3, [r3, #28]
 8003410:	4313      	orrs	r3, r2
 8003412:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	68db      	ldr	r3, [r3, #12]
 800341a:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800341e:	f023 030c 	bic.w	r3, r3, #12
 8003422:	687a      	ldr	r2, [r7, #4]
 8003424:	6812      	ldr	r2, [r2, #0]
 8003426:	68f9      	ldr	r1, [r7, #12]
 8003428:	430b      	orrs	r3, r1
 800342a:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	695b      	ldr	r3, [r3, #20]
 8003432:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	699a      	ldr	r2, [r3, #24]
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	430a      	orrs	r2, r1
 8003440:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	69db      	ldr	r3, [r3, #28]
 8003446:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800344a:	f040 818b 	bne.w	8003764 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	4ac1      	ldr	r2, [pc, #772]	; (8003758 <UART_SetConfig+0x37c>)
 8003454:	4293      	cmp	r3, r2
 8003456:	d005      	beq.n	8003464 <UART_SetConfig+0x88>
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	4abf      	ldr	r2, [pc, #764]	; (800375c <UART_SetConfig+0x380>)
 800345e:	4293      	cmp	r3, r2
 8003460:	f040 80bd 	bne.w	80035de <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003464:	f7ff f818 	bl	8002498 <HAL_RCC_GetPCLK2Freq>
 8003468:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800346a:	68bb      	ldr	r3, [r7, #8]
 800346c:	461d      	mov	r5, r3
 800346e:	f04f 0600 	mov.w	r6, #0
 8003472:	46a8      	mov	r8, r5
 8003474:	46b1      	mov	r9, r6
 8003476:	eb18 0308 	adds.w	r3, r8, r8
 800347a:	eb49 0409 	adc.w	r4, r9, r9
 800347e:	4698      	mov	r8, r3
 8003480:	46a1      	mov	r9, r4
 8003482:	eb18 0805 	adds.w	r8, r8, r5
 8003486:	eb49 0906 	adc.w	r9, r9, r6
 800348a:	f04f 0100 	mov.w	r1, #0
 800348e:	f04f 0200 	mov.w	r2, #0
 8003492:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003496:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800349a:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800349e:	4688      	mov	r8, r1
 80034a0:	4691      	mov	r9, r2
 80034a2:	eb18 0005 	adds.w	r0, r8, r5
 80034a6:	eb49 0106 	adc.w	r1, r9, r6
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	685b      	ldr	r3, [r3, #4]
 80034ae:	461d      	mov	r5, r3
 80034b0:	f04f 0600 	mov.w	r6, #0
 80034b4:	196b      	adds	r3, r5, r5
 80034b6:	eb46 0406 	adc.w	r4, r6, r6
 80034ba:	461a      	mov	r2, r3
 80034bc:	4623      	mov	r3, r4
 80034be:	f7fc fe8b 	bl	80001d8 <__aeabi_uldivmod>
 80034c2:	4603      	mov	r3, r0
 80034c4:	460c      	mov	r4, r1
 80034c6:	461a      	mov	r2, r3
 80034c8:	4ba5      	ldr	r3, [pc, #660]	; (8003760 <UART_SetConfig+0x384>)
 80034ca:	fba3 2302 	umull	r2, r3, r3, r2
 80034ce:	095b      	lsrs	r3, r3, #5
 80034d0:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80034d4:	68bb      	ldr	r3, [r7, #8]
 80034d6:	461d      	mov	r5, r3
 80034d8:	f04f 0600 	mov.w	r6, #0
 80034dc:	46a9      	mov	r9, r5
 80034de:	46b2      	mov	sl, r6
 80034e0:	eb19 0309 	adds.w	r3, r9, r9
 80034e4:	eb4a 040a 	adc.w	r4, sl, sl
 80034e8:	4699      	mov	r9, r3
 80034ea:	46a2      	mov	sl, r4
 80034ec:	eb19 0905 	adds.w	r9, r9, r5
 80034f0:	eb4a 0a06 	adc.w	sl, sl, r6
 80034f4:	f04f 0100 	mov.w	r1, #0
 80034f8:	f04f 0200 	mov.w	r2, #0
 80034fc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003500:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003504:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003508:	4689      	mov	r9, r1
 800350a:	4692      	mov	sl, r2
 800350c:	eb19 0005 	adds.w	r0, r9, r5
 8003510:	eb4a 0106 	adc.w	r1, sl, r6
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	685b      	ldr	r3, [r3, #4]
 8003518:	461d      	mov	r5, r3
 800351a:	f04f 0600 	mov.w	r6, #0
 800351e:	196b      	adds	r3, r5, r5
 8003520:	eb46 0406 	adc.w	r4, r6, r6
 8003524:	461a      	mov	r2, r3
 8003526:	4623      	mov	r3, r4
 8003528:	f7fc fe56 	bl	80001d8 <__aeabi_uldivmod>
 800352c:	4603      	mov	r3, r0
 800352e:	460c      	mov	r4, r1
 8003530:	461a      	mov	r2, r3
 8003532:	4b8b      	ldr	r3, [pc, #556]	; (8003760 <UART_SetConfig+0x384>)
 8003534:	fba3 1302 	umull	r1, r3, r3, r2
 8003538:	095b      	lsrs	r3, r3, #5
 800353a:	2164      	movs	r1, #100	; 0x64
 800353c:	fb01 f303 	mul.w	r3, r1, r3
 8003540:	1ad3      	subs	r3, r2, r3
 8003542:	00db      	lsls	r3, r3, #3
 8003544:	3332      	adds	r3, #50	; 0x32
 8003546:	4a86      	ldr	r2, [pc, #536]	; (8003760 <UART_SetConfig+0x384>)
 8003548:	fba2 2303 	umull	r2, r3, r2, r3
 800354c:	095b      	lsrs	r3, r3, #5
 800354e:	005b      	lsls	r3, r3, #1
 8003550:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003554:	4498      	add	r8, r3
 8003556:	68bb      	ldr	r3, [r7, #8]
 8003558:	461d      	mov	r5, r3
 800355a:	f04f 0600 	mov.w	r6, #0
 800355e:	46a9      	mov	r9, r5
 8003560:	46b2      	mov	sl, r6
 8003562:	eb19 0309 	adds.w	r3, r9, r9
 8003566:	eb4a 040a 	adc.w	r4, sl, sl
 800356a:	4699      	mov	r9, r3
 800356c:	46a2      	mov	sl, r4
 800356e:	eb19 0905 	adds.w	r9, r9, r5
 8003572:	eb4a 0a06 	adc.w	sl, sl, r6
 8003576:	f04f 0100 	mov.w	r1, #0
 800357a:	f04f 0200 	mov.w	r2, #0
 800357e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003582:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003586:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800358a:	4689      	mov	r9, r1
 800358c:	4692      	mov	sl, r2
 800358e:	eb19 0005 	adds.w	r0, r9, r5
 8003592:	eb4a 0106 	adc.w	r1, sl, r6
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	685b      	ldr	r3, [r3, #4]
 800359a:	461d      	mov	r5, r3
 800359c:	f04f 0600 	mov.w	r6, #0
 80035a0:	196b      	adds	r3, r5, r5
 80035a2:	eb46 0406 	adc.w	r4, r6, r6
 80035a6:	461a      	mov	r2, r3
 80035a8:	4623      	mov	r3, r4
 80035aa:	f7fc fe15 	bl	80001d8 <__aeabi_uldivmod>
 80035ae:	4603      	mov	r3, r0
 80035b0:	460c      	mov	r4, r1
 80035b2:	461a      	mov	r2, r3
 80035b4:	4b6a      	ldr	r3, [pc, #424]	; (8003760 <UART_SetConfig+0x384>)
 80035b6:	fba3 1302 	umull	r1, r3, r3, r2
 80035ba:	095b      	lsrs	r3, r3, #5
 80035bc:	2164      	movs	r1, #100	; 0x64
 80035be:	fb01 f303 	mul.w	r3, r1, r3
 80035c2:	1ad3      	subs	r3, r2, r3
 80035c4:	00db      	lsls	r3, r3, #3
 80035c6:	3332      	adds	r3, #50	; 0x32
 80035c8:	4a65      	ldr	r2, [pc, #404]	; (8003760 <UART_SetConfig+0x384>)
 80035ca:	fba2 2303 	umull	r2, r3, r2, r3
 80035ce:	095b      	lsrs	r3, r3, #5
 80035d0:	f003 0207 	and.w	r2, r3, #7
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	4442      	add	r2, r8
 80035da:	609a      	str	r2, [r3, #8]
 80035dc:	e26f      	b.n	8003abe <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80035de:	f7fe ff47 	bl	8002470 <HAL_RCC_GetPCLK1Freq>
 80035e2:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80035e4:	68bb      	ldr	r3, [r7, #8]
 80035e6:	461d      	mov	r5, r3
 80035e8:	f04f 0600 	mov.w	r6, #0
 80035ec:	46a8      	mov	r8, r5
 80035ee:	46b1      	mov	r9, r6
 80035f0:	eb18 0308 	adds.w	r3, r8, r8
 80035f4:	eb49 0409 	adc.w	r4, r9, r9
 80035f8:	4698      	mov	r8, r3
 80035fa:	46a1      	mov	r9, r4
 80035fc:	eb18 0805 	adds.w	r8, r8, r5
 8003600:	eb49 0906 	adc.w	r9, r9, r6
 8003604:	f04f 0100 	mov.w	r1, #0
 8003608:	f04f 0200 	mov.w	r2, #0
 800360c:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003610:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003614:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003618:	4688      	mov	r8, r1
 800361a:	4691      	mov	r9, r2
 800361c:	eb18 0005 	adds.w	r0, r8, r5
 8003620:	eb49 0106 	adc.w	r1, r9, r6
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	685b      	ldr	r3, [r3, #4]
 8003628:	461d      	mov	r5, r3
 800362a:	f04f 0600 	mov.w	r6, #0
 800362e:	196b      	adds	r3, r5, r5
 8003630:	eb46 0406 	adc.w	r4, r6, r6
 8003634:	461a      	mov	r2, r3
 8003636:	4623      	mov	r3, r4
 8003638:	f7fc fdce 	bl	80001d8 <__aeabi_uldivmod>
 800363c:	4603      	mov	r3, r0
 800363e:	460c      	mov	r4, r1
 8003640:	461a      	mov	r2, r3
 8003642:	4b47      	ldr	r3, [pc, #284]	; (8003760 <UART_SetConfig+0x384>)
 8003644:	fba3 2302 	umull	r2, r3, r3, r2
 8003648:	095b      	lsrs	r3, r3, #5
 800364a:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800364e:	68bb      	ldr	r3, [r7, #8]
 8003650:	461d      	mov	r5, r3
 8003652:	f04f 0600 	mov.w	r6, #0
 8003656:	46a9      	mov	r9, r5
 8003658:	46b2      	mov	sl, r6
 800365a:	eb19 0309 	adds.w	r3, r9, r9
 800365e:	eb4a 040a 	adc.w	r4, sl, sl
 8003662:	4699      	mov	r9, r3
 8003664:	46a2      	mov	sl, r4
 8003666:	eb19 0905 	adds.w	r9, r9, r5
 800366a:	eb4a 0a06 	adc.w	sl, sl, r6
 800366e:	f04f 0100 	mov.w	r1, #0
 8003672:	f04f 0200 	mov.w	r2, #0
 8003676:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800367a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800367e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003682:	4689      	mov	r9, r1
 8003684:	4692      	mov	sl, r2
 8003686:	eb19 0005 	adds.w	r0, r9, r5
 800368a:	eb4a 0106 	adc.w	r1, sl, r6
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	685b      	ldr	r3, [r3, #4]
 8003692:	461d      	mov	r5, r3
 8003694:	f04f 0600 	mov.w	r6, #0
 8003698:	196b      	adds	r3, r5, r5
 800369a:	eb46 0406 	adc.w	r4, r6, r6
 800369e:	461a      	mov	r2, r3
 80036a0:	4623      	mov	r3, r4
 80036a2:	f7fc fd99 	bl	80001d8 <__aeabi_uldivmod>
 80036a6:	4603      	mov	r3, r0
 80036a8:	460c      	mov	r4, r1
 80036aa:	461a      	mov	r2, r3
 80036ac:	4b2c      	ldr	r3, [pc, #176]	; (8003760 <UART_SetConfig+0x384>)
 80036ae:	fba3 1302 	umull	r1, r3, r3, r2
 80036b2:	095b      	lsrs	r3, r3, #5
 80036b4:	2164      	movs	r1, #100	; 0x64
 80036b6:	fb01 f303 	mul.w	r3, r1, r3
 80036ba:	1ad3      	subs	r3, r2, r3
 80036bc:	00db      	lsls	r3, r3, #3
 80036be:	3332      	adds	r3, #50	; 0x32
 80036c0:	4a27      	ldr	r2, [pc, #156]	; (8003760 <UART_SetConfig+0x384>)
 80036c2:	fba2 2303 	umull	r2, r3, r2, r3
 80036c6:	095b      	lsrs	r3, r3, #5
 80036c8:	005b      	lsls	r3, r3, #1
 80036ca:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80036ce:	4498      	add	r8, r3
 80036d0:	68bb      	ldr	r3, [r7, #8]
 80036d2:	461d      	mov	r5, r3
 80036d4:	f04f 0600 	mov.w	r6, #0
 80036d8:	46a9      	mov	r9, r5
 80036da:	46b2      	mov	sl, r6
 80036dc:	eb19 0309 	adds.w	r3, r9, r9
 80036e0:	eb4a 040a 	adc.w	r4, sl, sl
 80036e4:	4699      	mov	r9, r3
 80036e6:	46a2      	mov	sl, r4
 80036e8:	eb19 0905 	adds.w	r9, r9, r5
 80036ec:	eb4a 0a06 	adc.w	sl, sl, r6
 80036f0:	f04f 0100 	mov.w	r1, #0
 80036f4:	f04f 0200 	mov.w	r2, #0
 80036f8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80036fc:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003700:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003704:	4689      	mov	r9, r1
 8003706:	4692      	mov	sl, r2
 8003708:	eb19 0005 	adds.w	r0, r9, r5
 800370c:	eb4a 0106 	adc.w	r1, sl, r6
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	685b      	ldr	r3, [r3, #4]
 8003714:	461d      	mov	r5, r3
 8003716:	f04f 0600 	mov.w	r6, #0
 800371a:	196b      	adds	r3, r5, r5
 800371c:	eb46 0406 	adc.w	r4, r6, r6
 8003720:	461a      	mov	r2, r3
 8003722:	4623      	mov	r3, r4
 8003724:	f7fc fd58 	bl	80001d8 <__aeabi_uldivmod>
 8003728:	4603      	mov	r3, r0
 800372a:	460c      	mov	r4, r1
 800372c:	461a      	mov	r2, r3
 800372e:	4b0c      	ldr	r3, [pc, #48]	; (8003760 <UART_SetConfig+0x384>)
 8003730:	fba3 1302 	umull	r1, r3, r3, r2
 8003734:	095b      	lsrs	r3, r3, #5
 8003736:	2164      	movs	r1, #100	; 0x64
 8003738:	fb01 f303 	mul.w	r3, r1, r3
 800373c:	1ad3      	subs	r3, r2, r3
 800373e:	00db      	lsls	r3, r3, #3
 8003740:	3332      	adds	r3, #50	; 0x32
 8003742:	4a07      	ldr	r2, [pc, #28]	; (8003760 <UART_SetConfig+0x384>)
 8003744:	fba2 2303 	umull	r2, r3, r2, r3
 8003748:	095b      	lsrs	r3, r3, #5
 800374a:	f003 0207 	and.w	r2, r3, #7
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	4442      	add	r2, r8
 8003754:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8003756:	e1b2      	b.n	8003abe <UART_SetConfig+0x6e2>
 8003758:	40011000 	.word	0x40011000
 800375c:	40011400 	.word	0x40011400
 8003760:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	4ad7      	ldr	r2, [pc, #860]	; (8003ac8 <UART_SetConfig+0x6ec>)
 800376a:	4293      	cmp	r3, r2
 800376c:	d005      	beq.n	800377a <UART_SetConfig+0x39e>
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	4ad6      	ldr	r2, [pc, #856]	; (8003acc <UART_SetConfig+0x6f0>)
 8003774:	4293      	cmp	r3, r2
 8003776:	f040 80d1 	bne.w	800391c <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 800377a:	f7fe fe8d 	bl	8002498 <HAL_RCC_GetPCLK2Freq>
 800377e:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003780:	68bb      	ldr	r3, [r7, #8]
 8003782:	469a      	mov	sl, r3
 8003784:	f04f 0b00 	mov.w	fp, #0
 8003788:	46d0      	mov	r8, sl
 800378a:	46d9      	mov	r9, fp
 800378c:	eb18 0308 	adds.w	r3, r8, r8
 8003790:	eb49 0409 	adc.w	r4, r9, r9
 8003794:	4698      	mov	r8, r3
 8003796:	46a1      	mov	r9, r4
 8003798:	eb18 080a 	adds.w	r8, r8, sl
 800379c:	eb49 090b 	adc.w	r9, r9, fp
 80037a0:	f04f 0100 	mov.w	r1, #0
 80037a4:	f04f 0200 	mov.w	r2, #0
 80037a8:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80037ac:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80037b0:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80037b4:	4688      	mov	r8, r1
 80037b6:	4691      	mov	r9, r2
 80037b8:	eb1a 0508 	adds.w	r5, sl, r8
 80037bc:	eb4b 0609 	adc.w	r6, fp, r9
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	685b      	ldr	r3, [r3, #4]
 80037c4:	4619      	mov	r1, r3
 80037c6:	f04f 0200 	mov.w	r2, #0
 80037ca:	f04f 0300 	mov.w	r3, #0
 80037ce:	f04f 0400 	mov.w	r4, #0
 80037d2:	0094      	lsls	r4, r2, #2
 80037d4:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80037d8:	008b      	lsls	r3, r1, #2
 80037da:	461a      	mov	r2, r3
 80037dc:	4623      	mov	r3, r4
 80037de:	4628      	mov	r0, r5
 80037e0:	4631      	mov	r1, r6
 80037e2:	f7fc fcf9 	bl	80001d8 <__aeabi_uldivmod>
 80037e6:	4603      	mov	r3, r0
 80037e8:	460c      	mov	r4, r1
 80037ea:	461a      	mov	r2, r3
 80037ec:	4bb8      	ldr	r3, [pc, #736]	; (8003ad0 <UART_SetConfig+0x6f4>)
 80037ee:	fba3 2302 	umull	r2, r3, r3, r2
 80037f2:	095b      	lsrs	r3, r3, #5
 80037f4:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80037f8:	68bb      	ldr	r3, [r7, #8]
 80037fa:	469b      	mov	fp, r3
 80037fc:	f04f 0c00 	mov.w	ip, #0
 8003800:	46d9      	mov	r9, fp
 8003802:	46e2      	mov	sl, ip
 8003804:	eb19 0309 	adds.w	r3, r9, r9
 8003808:	eb4a 040a 	adc.w	r4, sl, sl
 800380c:	4699      	mov	r9, r3
 800380e:	46a2      	mov	sl, r4
 8003810:	eb19 090b 	adds.w	r9, r9, fp
 8003814:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003818:	f04f 0100 	mov.w	r1, #0
 800381c:	f04f 0200 	mov.w	r2, #0
 8003820:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003824:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003828:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800382c:	4689      	mov	r9, r1
 800382e:	4692      	mov	sl, r2
 8003830:	eb1b 0509 	adds.w	r5, fp, r9
 8003834:	eb4c 060a 	adc.w	r6, ip, sl
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	685b      	ldr	r3, [r3, #4]
 800383c:	4619      	mov	r1, r3
 800383e:	f04f 0200 	mov.w	r2, #0
 8003842:	f04f 0300 	mov.w	r3, #0
 8003846:	f04f 0400 	mov.w	r4, #0
 800384a:	0094      	lsls	r4, r2, #2
 800384c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003850:	008b      	lsls	r3, r1, #2
 8003852:	461a      	mov	r2, r3
 8003854:	4623      	mov	r3, r4
 8003856:	4628      	mov	r0, r5
 8003858:	4631      	mov	r1, r6
 800385a:	f7fc fcbd 	bl	80001d8 <__aeabi_uldivmod>
 800385e:	4603      	mov	r3, r0
 8003860:	460c      	mov	r4, r1
 8003862:	461a      	mov	r2, r3
 8003864:	4b9a      	ldr	r3, [pc, #616]	; (8003ad0 <UART_SetConfig+0x6f4>)
 8003866:	fba3 1302 	umull	r1, r3, r3, r2
 800386a:	095b      	lsrs	r3, r3, #5
 800386c:	2164      	movs	r1, #100	; 0x64
 800386e:	fb01 f303 	mul.w	r3, r1, r3
 8003872:	1ad3      	subs	r3, r2, r3
 8003874:	011b      	lsls	r3, r3, #4
 8003876:	3332      	adds	r3, #50	; 0x32
 8003878:	4a95      	ldr	r2, [pc, #596]	; (8003ad0 <UART_SetConfig+0x6f4>)
 800387a:	fba2 2303 	umull	r2, r3, r2, r3
 800387e:	095b      	lsrs	r3, r3, #5
 8003880:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003884:	4498      	add	r8, r3
 8003886:	68bb      	ldr	r3, [r7, #8]
 8003888:	469b      	mov	fp, r3
 800388a:	f04f 0c00 	mov.w	ip, #0
 800388e:	46d9      	mov	r9, fp
 8003890:	46e2      	mov	sl, ip
 8003892:	eb19 0309 	adds.w	r3, r9, r9
 8003896:	eb4a 040a 	adc.w	r4, sl, sl
 800389a:	4699      	mov	r9, r3
 800389c:	46a2      	mov	sl, r4
 800389e:	eb19 090b 	adds.w	r9, r9, fp
 80038a2:	eb4a 0a0c 	adc.w	sl, sl, ip
 80038a6:	f04f 0100 	mov.w	r1, #0
 80038aa:	f04f 0200 	mov.w	r2, #0
 80038ae:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80038b2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80038b6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80038ba:	4689      	mov	r9, r1
 80038bc:	4692      	mov	sl, r2
 80038be:	eb1b 0509 	adds.w	r5, fp, r9
 80038c2:	eb4c 060a 	adc.w	r6, ip, sl
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	685b      	ldr	r3, [r3, #4]
 80038ca:	4619      	mov	r1, r3
 80038cc:	f04f 0200 	mov.w	r2, #0
 80038d0:	f04f 0300 	mov.w	r3, #0
 80038d4:	f04f 0400 	mov.w	r4, #0
 80038d8:	0094      	lsls	r4, r2, #2
 80038da:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80038de:	008b      	lsls	r3, r1, #2
 80038e0:	461a      	mov	r2, r3
 80038e2:	4623      	mov	r3, r4
 80038e4:	4628      	mov	r0, r5
 80038e6:	4631      	mov	r1, r6
 80038e8:	f7fc fc76 	bl	80001d8 <__aeabi_uldivmod>
 80038ec:	4603      	mov	r3, r0
 80038ee:	460c      	mov	r4, r1
 80038f0:	461a      	mov	r2, r3
 80038f2:	4b77      	ldr	r3, [pc, #476]	; (8003ad0 <UART_SetConfig+0x6f4>)
 80038f4:	fba3 1302 	umull	r1, r3, r3, r2
 80038f8:	095b      	lsrs	r3, r3, #5
 80038fa:	2164      	movs	r1, #100	; 0x64
 80038fc:	fb01 f303 	mul.w	r3, r1, r3
 8003900:	1ad3      	subs	r3, r2, r3
 8003902:	011b      	lsls	r3, r3, #4
 8003904:	3332      	adds	r3, #50	; 0x32
 8003906:	4a72      	ldr	r2, [pc, #456]	; (8003ad0 <UART_SetConfig+0x6f4>)
 8003908:	fba2 2303 	umull	r2, r3, r2, r3
 800390c:	095b      	lsrs	r3, r3, #5
 800390e:	f003 020f 	and.w	r2, r3, #15
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	4442      	add	r2, r8
 8003918:	609a      	str	r2, [r3, #8]
 800391a:	e0d0      	b.n	8003abe <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 800391c:	f7fe fda8 	bl	8002470 <HAL_RCC_GetPCLK1Freq>
 8003920:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003922:	68bb      	ldr	r3, [r7, #8]
 8003924:	469a      	mov	sl, r3
 8003926:	f04f 0b00 	mov.w	fp, #0
 800392a:	46d0      	mov	r8, sl
 800392c:	46d9      	mov	r9, fp
 800392e:	eb18 0308 	adds.w	r3, r8, r8
 8003932:	eb49 0409 	adc.w	r4, r9, r9
 8003936:	4698      	mov	r8, r3
 8003938:	46a1      	mov	r9, r4
 800393a:	eb18 080a 	adds.w	r8, r8, sl
 800393e:	eb49 090b 	adc.w	r9, r9, fp
 8003942:	f04f 0100 	mov.w	r1, #0
 8003946:	f04f 0200 	mov.w	r2, #0
 800394a:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800394e:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003952:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003956:	4688      	mov	r8, r1
 8003958:	4691      	mov	r9, r2
 800395a:	eb1a 0508 	adds.w	r5, sl, r8
 800395e:	eb4b 0609 	adc.w	r6, fp, r9
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	685b      	ldr	r3, [r3, #4]
 8003966:	4619      	mov	r1, r3
 8003968:	f04f 0200 	mov.w	r2, #0
 800396c:	f04f 0300 	mov.w	r3, #0
 8003970:	f04f 0400 	mov.w	r4, #0
 8003974:	0094      	lsls	r4, r2, #2
 8003976:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800397a:	008b      	lsls	r3, r1, #2
 800397c:	461a      	mov	r2, r3
 800397e:	4623      	mov	r3, r4
 8003980:	4628      	mov	r0, r5
 8003982:	4631      	mov	r1, r6
 8003984:	f7fc fc28 	bl	80001d8 <__aeabi_uldivmod>
 8003988:	4603      	mov	r3, r0
 800398a:	460c      	mov	r4, r1
 800398c:	461a      	mov	r2, r3
 800398e:	4b50      	ldr	r3, [pc, #320]	; (8003ad0 <UART_SetConfig+0x6f4>)
 8003990:	fba3 2302 	umull	r2, r3, r3, r2
 8003994:	095b      	lsrs	r3, r3, #5
 8003996:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800399a:	68bb      	ldr	r3, [r7, #8]
 800399c:	469b      	mov	fp, r3
 800399e:	f04f 0c00 	mov.w	ip, #0
 80039a2:	46d9      	mov	r9, fp
 80039a4:	46e2      	mov	sl, ip
 80039a6:	eb19 0309 	adds.w	r3, r9, r9
 80039aa:	eb4a 040a 	adc.w	r4, sl, sl
 80039ae:	4699      	mov	r9, r3
 80039b0:	46a2      	mov	sl, r4
 80039b2:	eb19 090b 	adds.w	r9, r9, fp
 80039b6:	eb4a 0a0c 	adc.w	sl, sl, ip
 80039ba:	f04f 0100 	mov.w	r1, #0
 80039be:	f04f 0200 	mov.w	r2, #0
 80039c2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80039c6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80039ca:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80039ce:	4689      	mov	r9, r1
 80039d0:	4692      	mov	sl, r2
 80039d2:	eb1b 0509 	adds.w	r5, fp, r9
 80039d6:	eb4c 060a 	adc.w	r6, ip, sl
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	685b      	ldr	r3, [r3, #4]
 80039de:	4619      	mov	r1, r3
 80039e0:	f04f 0200 	mov.w	r2, #0
 80039e4:	f04f 0300 	mov.w	r3, #0
 80039e8:	f04f 0400 	mov.w	r4, #0
 80039ec:	0094      	lsls	r4, r2, #2
 80039ee:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80039f2:	008b      	lsls	r3, r1, #2
 80039f4:	461a      	mov	r2, r3
 80039f6:	4623      	mov	r3, r4
 80039f8:	4628      	mov	r0, r5
 80039fa:	4631      	mov	r1, r6
 80039fc:	f7fc fbec 	bl	80001d8 <__aeabi_uldivmod>
 8003a00:	4603      	mov	r3, r0
 8003a02:	460c      	mov	r4, r1
 8003a04:	461a      	mov	r2, r3
 8003a06:	4b32      	ldr	r3, [pc, #200]	; (8003ad0 <UART_SetConfig+0x6f4>)
 8003a08:	fba3 1302 	umull	r1, r3, r3, r2
 8003a0c:	095b      	lsrs	r3, r3, #5
 8003a0e:	2164      	movs	r1, #100	; 0x64
 8003a10:	fb01 f303 	mul.w	r3, r1, r3
 8003a14:	1ad3      	subs	r3, r2, r3
 8003a16:	011b      	lsls	r3, r3, #4
 8003a18:	3332      	adds	r3, #50	; 0x32
 8003a1a:	4a2d      	ldr	r2, [pc, #180]	; (8003ad0 <UART_SetConfig+0x6f4>)
 8003a1c:	fba2 2303 	umull	r2, r3, r2, r3
 8003a20:	095b      	lsrs	r3, r3, #5
 8003a22:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003a26:	4498      	add	r8, r3
 8003a28:	68bb      	ldr	r3, [r7, #8]
 8003a2a:	469b      	mov	fp, r3
 8003a2c:	f04f 0c00 	mov.w	ip, #0
 8003a30:	46d9      	mov	r9, fp
 8003a32:	46e2      	mov	sl, ip
 8003a34:	eb19 0309 	adds.w	r3, r9, r9
 8003a38:	eb4a 040a 	adc.w	r4, sl, sl
 8003a3c:	4699      	mov	r9, r3
 8003a3e:	46a2      	mov	sl, r4
 8003a40:	eb19 090b 	adds.w	r9, r9, fp
 8003a44:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003a48:	f04f 0100 	mov.w	r1, #0
 8003a4c:	f04f 0200 	mov.w	r2, #0
 8003a50:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003a54:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003a58:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003a5c:	4689      	mov	r9, r1
 8003a5e:	4692      	mov	sl, r2
 8003a60:	eb1b 0509 	adds.w	r5, fp, r9
 8003a64:	eb4c 060a 	adc.w	r6, ip, sl
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	685b      	ldr	r3, [r3, #4]
 8003a6c:	4619      	mov	r1, r3
 8003a6e:	f04f 0200 	mov.w	r2, #0
 8003a72:	f04f 0300 	mov.w	r3, #0
 8003a76:	f04f 0400 	mov.w	r4, #0
 8003a7a:	0094      	lsls	r4, r2, #2
 8003a7c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003a80:	008b      	lsls	r3, r1, #2
 8003a82:	461a      	mov	r2, r3
 8003a84:	4623      	mov	r3, r4
 8003a86:	4628      	mov	r0, r5
 8003a88:	4631      	mov	r1, r6
 8003a8a:	f7fc fba5 	bl	80001d8 <__aeabi_uldivmod>
 8003a8e:	4603      	mov	r3, r0
 8003a90:	460c      	mov	r4, r1
 8003a92:	461a      	mov	r2, r3
 8003a94:	4b0e      	ldr	r3, [pc, #56]	; (8003ad0 <UART_SetConfig+0x6f4>)
 8003a96:	fba3 1302 	umull	r1, r3, r3, r2
 8003a9a:	095b      	lsrs	r3, r3, #5
 8003a9c:	2164      	movs	r1, #100	; 0x64
 8003a9e:	fb01 f303 	mul.w	r3, r1, r3
 8003aa2:	1ad3      	subs	r3, r2, r3
 8003aa4:	011b      	lsls	r3, r3, #4
 8003aa6:	3332      	adds	r3, #50	; 0x32
 8003aa8:	4a09      	ldr	r2, [pc, #36]	; (8003ad0 <UART_SetConfig+0x6f4>)
 8003aaa:	fba2 2303 	umull	r2, r3, r2, r3
 8003aae:	095b      	lsrs	r3, r3, #5
 8003ab0:	f003 020f 	and.w	r2, r3, #15
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	4442      	add	r2, r8
 8003aba:	609a      	str	r2, [r3, #8]
}
 8003abc:	e7ff      	b.n	8003abe <UART_SetConfig+0x6e2>
 8003abe:	bf00      	nop
 8003ac0:	3714      	adds	r7, #20
 8003ac2:	46bd      	mov	sp, r7
 8003ac4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003ac8:	40011000 	.word	0x40011000
 8003acc:	40011400 	.word	0x40011400
 8003ad0:	51eb851f 	.word	0x51eb851f

08003ad4 <__errno>:
 8003ad4:	4b01      	ldr	r3, [pc, #4]	; (8003adc <__errno+0x8>)
 8003ad6:	6818      	ldr	r0, [r3, #0]
 8003ad8:	4770      	bx	lr
 8003ada:	bf00      	nop
 8003adc:	200000b0 	.word	0x200000b0

08003ae0 <__libc_init_array>:
 8003ae0:	b570      	push	{r4, r5, r6, lr}
 8003ae2:	4e0d      	ldr	r6, [pc, #52]	; (8003b18 <__libc_init_array+0x38>)
 8003ae4:	4c0d      	ldr	r4, [pc, #52]	; (8003b1c <__libc_init_array+0x3c>)
 8003ae6:	1ba4      	subs	r4, r4, r6
 8003ae8:	10a4      	asrs	r4, r4, #2
 8003aea:	2500      	movs	r5, #0
 8003aec:	42a5      	cmp	r5, r4
 8003aee:	d109      	bne.n	8003b04 <__libc_init_array+0x24>
 8003af0:	4e0b      	ldr	r6, [pc, #44]	; (8003b20 <__libc_init_array+0x40>)
 8003af2:	4c0c      	ldr	r4, [pc, #48]	; (8003b24 <__libc_init_array+0x44>)
 8003af4:	f000 f8d4 	bl	8003ca0 <_init>
 8003af8:	1ba4      	subs	r4, r4, r6
 8003afa:	10a4      	asrs	r4, r4, #2
 8003afc:	2500      	movs	r5, #0
 8003afe:	42a5      	cmp	r5, r4
 8003b00:	d105      	bne.n	8003b0e <__libc_init_array+0x2e>
 8003b02:	bd70      	pop	{r4, r5, r6, pc}
 8003b04:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003b08:	4798      	blx	r3
 8003b0a:	3501      	adds	r5, #1
 8003b0c:	e7ee      	b.n	8003aec <__libc_init_array+0xc>
 8003b0e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003b12:	4798      	blx	r3
 8003b14:	3501      	adds	r5, #1
 8003b16:	e7f2      	b.n	8003afe <__libc_init_array+0x1e>
 8003b18:	08003d88 	.word	0x08003d88
 8003b1c:	08003d88 	.word	0x08003d88
 8003b20:	08003d88 	.word	0x08003d88
 8003b24:	08003d8c 	.word	0x08003d8c

08003b28 <memcpy>:
 8003b28:	b510      	push	{r4, lr}
 8003b2a:	1e43      	subs	r3, r0, #1
 8003b2c:	440a      	add	r2, r1
 8003b2e:	4291      	cmp	r1, r2
 8003b30:	d100      	bne.n	8003b34 <memcpy+0xc>
 8003b32:	bd10      	pop	{r4, pc}
 8003b34:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003b38:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003b3c:	e7f7      	b.n	8003b2e <memcpy+0x6>

08003b3e <memset>:
 8003b3e:	4402      	add	r2, r0
 8003b40:	4603      	mov	r3, r0
 8003b42:	4293      	cmp	r3, r2
 8003b44:	d100      	bne.n	8003b48 <memset+0xa>
 8003b46:	4770      	bx	lr
 8003b48:	f803 1b01 	strb.w	r1, [r3], #1
 8003b4c:	e7f9      	b.n	8003b42 <memset+0x4>
	...

08003b50 <rand>:
 8003b50:	b538      	push	{r3, r4, r5, lr}
 8003b52:	4b13      	ldr	r3, [pc, #76]	; (8003ba0 <rand+0x50>)
 8003b54:	681c      	ldr	r4, [r3, #0]
 8003b56:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003b58:	b97b      	cbnz	r3, 8003b7a <rand+0x2a>
 8003b5a:	2018      	movs	r0, #24
 8003b5c:	f000 f82c 	bl	8003bb8 <malloc>
 8003b60:	4a10      	ldr	r2, [pc, #64]	; (8003ba4 <rand+0x54>)
 8003b62:	4b11      	ldr	r3, [pc, #68]	; (8003ba8 <rand+0x58>)
 8003b64:	63a0      	str	r0, [r4, #56]	; 0x38
 8003b66:	e9c0 2300 	strd	r2, r3, [r0]
 8003b6a:	4b10      	ldr	r3, [pc, #64]	; (8003bac <rand+0x5c>)
 8003b6c:	6083      	str	r3, [r0, #8]
 8003b6e:	230b      	movs	r3, #11
 8003b70:	8183      	strh	r3, [r0, #12]
 8003b72:	2201      	movs	r2, #1
 8003b74:	2300      	movs	r3, #0
 8003b76:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8003b7a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8003b7c:	480c      	ldr	r0, [pc, #48]	; (8003bb0 <rand+0x60>)
 8003b7e:	690a      	ldr	r2, [r1, #16]
 8003b80:	694b      	ldr	r3, [r1, #20]
 8003b82:	4c0c      	ldr	r4, [pc, #48]	; (8003bb4 <rand+0x64>)
 8003b84:	4350      	muls	r0, r2
 8003b86:	fb04 0003 	mla	r0, r4, r3, r0
 8003b8a:	fba2 2304 	umull	r2, r3, r2, r4
 8003b8e:	4403      	add	r3, r0
 8003b90:	1c54      	adds	r4, r2, #1
 8003b92:	f143 0500 	adc.w	r5, r3, #0
 8003b96:	e9c1 4504 	strd	r4, r5, [r1, #16]
 8003b9a:	f025 4000 	bic.w	r0, r5, #2147483648	; 0x80000000
 8003b9e:	bd38      	pop	{r3, r4, r5, pc}
 8003ba0:	200000b0 	.word	0x200000b0
 8003ba4:	abcd330e 	.word	0xabcd330e
 8003ba8:	e66d1234 	.word	0xe66d1234
 8003bac:	0005deec 	.word	0x0005deec
 8003bb0:	5851f42d 	.word	0x5851f42d
 8003bb4:	4c957f2d 	.word	0x4c957f2d

08003bb8 <malloc>:
 8003bb8:	4b02      	ldr	r3, [pc, #8]	; (8003bc4 <malloc+0xc>)
 8003bba:	4601      	mov	r1, r0
 8003bbc:	6818      	ldr	r0, [r3, #0]
 8003bbe:	f000 b803 	b.w	8003bc8 <_malloc_r>
 8003bc2:	bf00      	nop
 8003bc4:	200000b0 	.word	0x200000b0

08003bc8 <_malloc_r>:
 8003bc8:	b570      	push	{r4, r5, r6, lr}
 8003bca:	1ccd      	adds	r5, r1, #3
 8003bcc:	f025 0503 	bic.w	r5, r5, #3
 8003bd0:	3508      	adds	r5, #8
 8003bd2:	2d0c      	cmp	r5, #12
 8003bd4:	bf38      	it	cc
 8003bd6:	250c      	movcc	r5, #12
 8003bd8:	2d00      	cmp	r5, #0
 8003bda:	4606      	mov	r6, r0
 8003bdc:	db01      	blt.n	8003be2 <_malloc_r+0x1a>
 8003bde:	42a9      	cmp	r1, r5
 8003be0:	d903      	bls.n	8003bea <_malloc_r+0x22>
 8003be2:	230c      	movs	r3, #12
 8003be4:	6033      	str	r3, [r6, #0]
 8003be6:	2000      	movs	r0, #0
 8003be8:	bd70      	pop	{r4, r5, r6, pc}
 8003bea:	f000 f857 	bl	8003c9c <__malloc_lock>
 8003bee:	4a21      	ldr	r2, [pc, #132]	; (8003c74 <_malloc_r+0xac>)
 8003bf0:	6814      	ldr	r4, [r2, #0]
 8003bf2:	4621      	mov	r1, r4
 8003bf4:	b991      	cbnz	r1, 8003c1c <_malloc_r+0x54>
 8003bf6:	4c20      	ldr	r4, [pc, #128]	; (8003c78 <_malloc_r+0xb0>)
 8003bf8:	6823      	ldr	r3, [r4, #0]
 8003bfa:	b91b      	cbnz	r3, 8003c04 <_malloc_r+0x3c>
 8003bfc:	4630      	mov	r0, r6
 8003bfe:	f000 f83d 	bl	8003c7c <_sbrk_r>
 8003c02:	6020      	str	r0, [r4, #0]
 8003c04:	4629      	mov	r1, r5
 8003c06:	4630      	mov	r0, r6
 8003c08:	f000 f838 	bl	8003c7c <_sbrk_r>
 8003c0c:	1c43      	adds	r3, r0, #1
 8003c0e:	d124      	bne.n	8003c5a <_malloc_r+0x92>
 8003c10:	230c      	movs	r3, #12
 8003c12:	6033      	str	r3, [r6, #0]
 8003c14:	4630      	mov	r0, r6
 8003c16:	f000 f842 	bl	8003c9e <__malloc_unlock>
 8003c1a:	e7e4      	b.n	8003be6 <_malloc_r+0x1e>
 8003c1c:	680b      	ldr	r3, [r1, #0]
 8003c1e:	1b5b      	subs	r3, r3, r5
 8003c20:	d418      	bmi.n	8003c54 <_malloc_r+0x8c>
 8003c22:	2b0b      	cmp	r3, #11
 8003c24:	d90f      	bls.n	8003c46 <_malloc_r+0x7e>
 8003c26:	600b      	str	r3, [r1, #0]
 8003c28:	50cd      	str	r5, [r1, r3]
 8003c2a:	18cc      	adds	r4, r1, r3
 8003c2c:	4630      	mov	r0, r6
 8003c2e:	f000 f836 	bl	8003c9e <__malloc_unlock>
 8003c32:	f104 000b 	add.w	r0, r4, #11
 8003c36:	1d23      	adds	r3, r4, #4
 8003c38:	f020 0007 	bic.w	r0, r0, #7
 8003c3c:	1ac3      	subs	r3, r0, r3
 8003c3e:	d0d3      	beq.n	8003be8 <_malloc_r+0x20>
 8003c40:	425a      	negs	r2, r3
 8003c42:	50e2      	str	r2, [r4, r3]
 8003c44:	e7d0      	b.n	8003be8 <_malloc_r+0x20>
 8003c46:	428c      	cmp	r4, r1
 8003c48:	684b      	ldr	r3, [r1, #4]
 8003c4a:	bf16      	itet	ne
 8003c4c:	6063      	strne	r3, [r4, #4]
 8003c4e:	6013      	streq	r3, [r2, #0]
 8003c50:	460c      	movne	r4, r1
 8003c52:	e7eb      	b.n	8003c2c <_malloc_r+0x64>
 8003c54:	460c      	mov	r4, r1
 8003c56:	6849      	ldr	r1, [r1, #4]
 8003c58:	e7cc      	b.n	8003bf4 <_malloc_r+0x2c>
 8003c5a:	1cc4      	adds	r4, r0, #3
 8003c5c:	f024 0403 	bic.w	r4, r4, #3
 8003c60:	42a0      	cmp	r0, r4
 8003c62:	d005      	beq.n	8003c70 <_malloc_r+0xa8>
 8003c64:	1a21      	subs	r1, r4, r0
 8003c66:	4630      	mov	r0, r6
 8003c68:	f000 f808 	bl	8003c7c <_sbrk_r>
 8003c6c:	3001      	adds	r0, #1
 8003c6e:	d0cf      	beq.n	8003c10 <_malloc_r+0x48>
 8003c70:	6025      	str	r5, [r4, #0]
 8003c72:	e7db      	b.n	8003c2c <_malloc_r+0x64>
 8003c74:	2000013c 	.word	0x2000013c
 8003c78:	20000140 	.word	0x20000140

08003c7c <_sbrk_r>:
 8003c7c:	b538      	push	{r3, r4, r5, lr}
 8003c7e:	4c06      	ldr	r4, [pc, #24]	; (8003c98 <_sbrk_r+0x1c>)
 8003c80:	2300      	movs	r3, #0
 8003c82:	4605      	mov	r5, r0
 8003c84:	4608      	mov	r0, r1
 8003c86:	6023      	str	r3, [r4, #0]
 8003c88:	f7fd fc16 	bl	80014b8 <_sbrk>
 8003c8c:	1c43      	adds	r3, r0, #1
 8003c8e:	d102      	bne.n	8003c96 <_sbrk_r+0x1a>
 8003c90:	6823      	ldr	r3, [r4, #0]
 8003c92:	b103      	cbz	r3, 8003c96 <_sbrk_r+0x1a>
 8003c94:	602b      	str	r3, [r5, #0]
 8003c96:	bd38      	pop	{r3, r4, r5, pc}
 8003c98:	2000052c 	.word	0x2000052c

08003c9c <__malloc_lock>:
 8003c9c:	4770      	bx	lr

08003c9e <__malloc_unlock>:
 8003c9e:	4770      	bx	lr

08003ca0 <_init>:
 8003ca0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ca2:	bf00      	nop
 8003ca4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003ca6:	bc08      	pop	{r3}
 8003ca8:	469e      	mov	lr, r3
 8003caa:	4770      	bx	lr

08003cac <_fini>:
 8003cac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003cae:	bf00      	nop
 8003cb0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003cb2:	bc08      	pop	{r3}
 8003cb4:	469e      	mov	lr, r3
 8003cb6:	4770      	bx	lr
